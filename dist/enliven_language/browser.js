// Generated by CoffeeScript 1.6.3
(function() {
  var CoffeeScript, compile, getErrorLine, getErrorObject, runScripts,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CoffeeScript = require('./coffee-script');

  CoffeeScript.require = require;

  compile = CoffeeScript.compile;

  CoffeeScript["eval"] = function(code, options) {
    if (options == null) {
      options = {};
    }
    if (options.bare == null) {
      options.bare = true;
    }
    return eval(compile(code, options));
  };

  getErrorObject = function() {
    var err;
    try {
      throw Error('');
    } catch (_error) {
      err = _error;
      return err;
    }
  };

  getErrorLine = function(err) {
    return err.lineNumber;
  };

  CoffeeScript.run = function(code, options) {
    var currentLine, delimiter, e, error, line, tokens;
    if (options == null) {
      options = {};
    }
    options.bare = true;
    options.shiftLine = true;
    try {
      return Function(compile(code, options))();
    } catch (_error) {
      error = _error;
      if (error.location === void 0) {
        currentLine = getErrorLine(new Error());
        error.location = {
          first_line: error.lineNumber - (currentLine - 4),
          first_column: 0
        };
      }
      if (error.location) {
        e = new Error();
        delimiter = "\n";
        tokens = code.split(delimiter).slice(error.location.first_line);
        if (tokens.length) {
          line = tokens[0].replace(/(\n|\r)/g, "");
          e.message = "" + error.message + ": \"" + line + "\"\n" + options.scriptFile + " in line " + error.location.first_line + ", at " + error.location.first_column;
        } else {
          e.message = "" + error.message + "\n" + options.scriptFile + " in line " + error.location.first_line + ", at " + error.location.first_column;
        }
        throw e;
      }
      throw error;
    }
  };

  if (typeof window === "undefined" || window === null) {
    return;
  }

  if ((typeof btoa !== "undefined" && btoa !== null) && (typeof JSON !== "undefined" && JSON !== null) && (typeof unescape !== "undefined" && unescape !== null) && (typeof encodeURIComponent !== "undefined" && encodeURIComponent !== null)) {
    compile = function(code, options) {
      var js, v3SourceMap, _ref;
      if (options == null) {
        options = {};
      }
      options.sourceMap = true;
      options.inline = true;
      _ref = CoffeeScript.compile(code, options), js = _ref.js, v3SourceMap = _ref.v3SourceMap;
      return "" + js + "\n//@ sourceMappingURL=data:application/json;base64," + (btoa(unescape(encodeURIComponent(v3SourceMap)))) + "\n//@ sourceURL=coffeescript";
    };
  }

  CoffeeScript.load = function(url, callback, options) {
    var xhr;
    if (options == null) {
      options = {};
    }
    options.sourceFiles = [url];
    xhr = window.ActiveXObject ? new window.ActiveXObject('Microsoft.XMLHTTP') : new window.XMLHttpRequest();
    xhr.open('GET', url, true);
    if ('overrideMimeType' in xhr) {
      xhr.overrideMimeType('text/plain');
    }
    xhr.onreadystatechange = function() {
      var _ref;
      if (xhr.readyState === 4) {
        if ((_ref = xhr.status) === 0 || _ref === 200) {
          CoffeeScript.run(xhr.responseText, options);
        } else {
          throw new Error("Could not load " + url);
        }
        if (callback) {
          return callback();
        }
      }
    };
    return xhr.send(null);
  };

  runScripts = function() {
    var coffees, coffeetypes, execute, index, length, s, scripts, start;
    scripts = window.document.getElementsByTagName('script');
    coffeetypes = ['text/enliven', 'text/coffeescript', 'text/literate-coffeescript'];
    coffees = (function() {
      var _i, _len, _ref, _results;
      _results = [];
      for (_i = 0, _len = scripts.length; _i < _len; _i++) {
        s = scripts[_i];
        if (_ref = s.type, __indexOf.call(coffeetypes, _ref) >= 0) {
          _results.push(s);
        }
      }
      return _results;
    })();
    index = 0;
    length = coffees.length;
    start = Date.now();
    (execute = function() {
      var end, event, loaded, mediatype, options, script;
      script = coffees[index++];
      mediatype = script != null ? script.type : void 0;
      loaded = false;
      if (__indexOf.call(coffeetypes, mediatype) >= 0) {
        loaded = true;
        options = {
          literate: mediatype === 'text/literate-coffeescript'
        };
        if (script.src) {
          options.scriptFile = script.src;
          CoffeeScript.load(script.src, execute, options);
        } else {
          options.scriptFile = 'embedded';
          options.sourceFiles = ['embedded'];
          CoffeeScript.run(script.innerHTML, options);
          execute();
        }
      }
      if (!loaded) {
        event = new CustomEvent('compiled');
        this.dispatchEvent(event);
        end = Date.now() - start;
        if (window.ENLIVEN_DETAILS) {
          return console.log("Comiling: " + end + " ms");
        }
      }
    })();
    return null;
  };

  if (window.addEventListener) {
    window.addEventListener('DOMContentLoaded', runScripts, false);
  } else {
    window.attachEvent('onload', runScripts);
  }

}).call(this);
