// Generated by CoffeeScript 1.6.2
(function() {
  var Framebuffer,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __operators = Object.prototype.operators = function(operator, object) { switch (operator) {case '+': return this + object;case '-': return this - object;case '/':return this / object;case '*':return this * object;case '%':return this % object;case '^':return this ^ object;default:throw SyntaxError('Object does not support "' + operator + '" operator');}};

  window.Framebuffer = Framebuffer = (function(_super) {
    __extends(Framebuffer, _super);

    Framebuffer.prototype.options = {
      width: 512,
      height: 512
    };

    function Framebuffer(options) {
      var name, value;
      for (name in options) {
        if (!__hasProp.call(options, name)) continue;
        value = options[name];
        this.options[name] = value;
      }
    }

    Framebuffer.prototype.init = function(gl) {
      var attachment, format, handle, i, texture_options, _base, _ref;
      handle = gl.createFramebuffer();
      gl.bindFramebuffer(gl.FRAMEBUFFER, handle);
      this.setHandle(gl, handle);
      handle.renderbuffer = gl.createRenderbuffer();
      gl.bindRenderbuffer(gl.RENDERBUFFER, handle.renderbuffer);
      gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.options.width, this.options.height);
      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, handle.renderbuffer);
      gl.bindRenderbuffer(gl.RENDERBUFFER, null);
      if ((_base = this.options).colors == null) {
        _base.colors = [gl.RGBA];
      }
      handle.textures = [];
      attachment = gl.COLOR_ATTACHMENT0;
      _ref = this.options.colors;
      for (i in _ref) {
        if (!__hasProp.call(_ref, i)) continue;
        format = _ref[i];
        texture_options = {
          format: format,
          width: this.options.width,
          height: this.options.height,
          min_filter: gl.LINEAR_MIPMAP_NEAREST,
          mag_filter: gl.LINEAR,
          wrap_s: gl.CLAMP_TO_EDGE,
          wrap_t: gl.CLAMP_TO_EDGE,
          generate_mipmap: false
        };
        handle.textures[i] = new Texture(null, texture_options);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, handle.textures[i].getHandle(gl), 0);
        attachment++;
      }
      return this.checkStatus(gl);
    };

    Framebuffer.prototype.checkStatus = function(gl) {
      var status;
      status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
      this.unbind(gl);
      switch (status) {
        case gl.FRAMEBUFFER_COMPLETE:
          break;
        case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
          throw new Error("Framebuffer: one or more attachments is incomplete. (gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT)");
          break;
        case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
          throw new Error("Framebuffer: there are no images attached to the framebuffer. (gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT)");
          break;
        case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
          throw new Error("Framebuffer: all attachments must have the same dimensions. (gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS)");
          break;
        case gl.FRAMEBUFFER_UNSUPPORTED:
          throw new Error("Framebuffer: the requested framebuffer layout is unsupported on this hardware. (gl.FRAMEBUFFER_UNSUPPORTED)");
          break;
        case 0x8cdb:
          throw new Error("Framebuffer: make sure the framebuffer has at least 1 texture attachment. (gl.FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER)");
          break;
        default:
          throw new Error((("Framebuffer: an unknown error occurred. (").operators("+",status)).operators("+",")"));
      }
    };

    Framebuffer.prototype.viewport = function(gl) {
      return gl.viewport(0, 0, this.options.width, this.options.height);
    };

    Framebuffer.prototype.bind = function(gl, callback) {
      var handle;
      handle = this.getHandle(gl);
      if (handle === null) {
        this.init(gl);
        handle = this.getHandle(gl);
      }
      gl.bindFramebuffer(gl.FRAMEBUFFER, handle);
      if (callback) {
        callback.call(this);
        return this.unbind(gl);
      }
    };

    Framebuffer.prototype.unbind = function(gl) {
      return gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    };

    return Framebuffer;

  })(Component);

}).call(this);
