// Generated by CoffeeScript 1.6.2
(function() {
  var TextureMaterial, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.TextureMaterial = TextureMaterial = (function(_super) {
    var FRAGMENT_SHADER, VERTEX_SHADER, shaderProgram;

    __extends(TextureMaterial, _super);

    function TextureMaterial() {
      _ref = TextureMaterial.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TextureMaterial.prototype.vertexShaderProperties = [["attribute", "vec2", "aVertexTextureCoord"], ["attribute", "vec3", "aVertexPosition"], ["uniform", "mat4", "uMvMatrix"], ["uniform", "mat4", "uPMatrix"], ["varying", "vec2", "vTextureCoord"]];

    VERTEX_SHADER = " \nvoid main(void) {\n    gl_Position = uPMatrix * uMvMatrix * vec4(aVertexPosition, 1.0);\n    vTextureCoord = aVertexTextureCoord;\n}\n";

    TextureMaterial.prototype.vertexShader = VERTEX_SHADER;

    TextureMaterial.prototype.fragmentShaderProperties = [["varying", "vec2", "vTextureCoord"], ["uniform", "sampler2D", "uSampler"]];

    FRAGMENT_SHADER = "void main(void) {\n    gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\n}\n";

    TextureMaterial.prototype.fragmentShader = FRAGMENT_SHADER;

    shaderProgram = null;

    TextureMaterial.prototype.getShaderProgram = function(gl) {
      if (shaderProgram === null) {
        shaderProgram = this.createShaderProgram(gl);
      }
      return shaderProgram;
    };

    return TextureMaterial;

  })(Material);

}).call(this);
