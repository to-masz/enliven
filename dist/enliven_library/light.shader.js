// Generated by CoffeeScript 1.6.2
(function() {
  window.Enliven.ShaderSources["light.vertex"] = "global attribute vec3 VertexNormal;\nglobal uniform mat3 NormalMatrix;\n\npublic uniform vec3 AmbientLightColor;\n\npublic uniform vec3 PointLightLocation;\npublic uniform vec3 PointLightColor;\n\npublic uniform vec3 PointLightSpecularColor;\npublic uniform float MaterialShininess;\n\npublic varying vec3 LightWeighting;\npublic varying vec3 TransformedNormal;\npublic varying vec4 Position;\n\n\npublic void apply(void) {\n  Position = ModelViewMatrix * vec4(VertexPosition, 1.0);\n  vec3 lightDirection = normalize(PointLightLocation - Position.xyz);\n  TransformedNormal = NormalMatrix  * VertexNormal;\n  float directionalLightWeighting = max(dot(TransformedNormal, lightDirection), 0.0);\n  LightWeighting = AmbientLightColor + PointLightColor * directionalLightWeighting;\n}\n\npublic void applyPerFragment(void) {\n  Position = ModelViewMatrix * vec4(VertexPosition, 1.0);\n  TransformedNormal = NormalMatrix * VertexNormal;\n}\n\nvoid main(void) {\n  apply();\n}";window.Enliven.ShaderSources["light.fragment"] = "public varying vec3 LightWeighting;\npublic varying vec3 TransformedNormal;\npublic varying vec4 Position;\n\npublic uniform vec3 AmbientLightColor;\npublic uniform vec3 PointLightLocation;\npublic uniform vec3 PointLightColor;\n\npublic uniform vec3 PointLightSpecularColor;\npublic uniform float MaterialShininess;\n\npublic void apply(void) {\n  gl_FragColor = vec4(gl_FragColor.rgb * LightWeighting, gl_FragColor.a);\n}\n\npublic void applyPerFragment(void) {\n  vec3 lightDirection = normalize(PointLightLocation - Position.xyz);\n  vec3 normal = normalize(TransformedNormal);\n  float directionalLightWeighting = max(dot(normal, lightDirection), 0.0);\n  \n  float specularLightWeighting = 0.0;\n  if(MaterialShininess > 0.0)\n  {\n    vec3 eyeDirection = normalize(-Position.xyz);\n    vec3 reflectionDirection = reflect(-lightDirection, normal);\n    specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), MaterialShininess);\n  }\n  \n  vec3 fragmentLightWeighting = AmbientLightColor \n      + PointLightColor * directionalLightWeighting\n      + PointLightSpecularColor * specularLightWeighting;\n  gl_FragColor = vec4(gl_FragColor.rgb * fragmentLightWeighting, gl_FragColor.a);\n}\n\nvoid main(void) {\n  apply();\n}";

}).call(this);
