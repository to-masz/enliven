// Generated by CoffeeScript 1.6.2
(function() {
  var Material, PickingMaterial, SimpleMaterial, TextureMaterial,
    __operators = Object.prototype.operators = function(operator, object) { switch (operator) {case '+': return this + object;case '-': return this - object;case '/':return this / object;case '*':return this * object;case '%':return this % object;case '^':return this ^ object;default:throw SyntaxError('Object does not support "' + operator + '" operator');}},
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Material = Material = (function() {
    Material.id = 0;

    Material.get = function() {
      return this.id++;
    };

    function Material(name, callback) {
      var layers;
      this.name = name != null ? name : "core";
      this.callback = callback != null ? callback : null;
      this.reset();
      if (typeof this.name === 'object') {
        layers = this.name;
        this.name = ("LayerMaterial_").operators("+",(Material.get()));
        this.setLayers(layers);
      }
    }

    Material.prototype.reset = function() {
      return this.shader = null;
    };

    Material.prototype.setLayers = function(layers) {
      this.layers = layers;
      this.reset();
      window.Enliven.ShaderSources[(("").operators("+",this.name)).operators("+",".vertex")] = this.generateLayerSource("vertex");
      return window.Enliven.ShaderSources[(("").operators("+",this.name)).operators("+",".fragment")] = this.generateLayerSource("fragment");
    };

    Material.prototype.generateLayerSource = function(type) {
      var calls, i, imports, layer, _ref;
      imports = [];
      calls = [];
      _ref = this.layers;
      for (i in _ref) {
        if (!__hasProp.call(_ref, i)) continue;
        layer = _ref[i];
        imports.push((((("import ").operators("+",layer)).operators("+",".")).operators("+",type)).operators("+",";"));
        calls.push((("").operators("+",layer)).operators("+",".apply();"));
      }
      return (((("").operators("+",(imports.join("\n")))).operators("+","\nvoid main(void){\n")).operators("+",(calls.join("\n")))).operators("+","\n}");
    };

    Material.prototype.getShader = function(gl) {
      if (!(this.shader instanceof ShaderProgram)) {
        this.shader = new ShaderProgram(this.name);
      }
      return this.shader;
    };

    Material.prototype.bindGlobals = function(gl) {
      var normalMatrix;
      this.shader.bindProperty(gl, 'ModelViewMatrix', gl.matrixStack.getModelViewMatrix());
      this.shader.bindProperty(gl, 'ProjectionMatrix', gl.scene.pMatrix);
      normalMatrix = gl.matrixStack.getModelViewMatrix().clone().toMat3().invert().transpose();
      return this.shader.bindProperty(gl, 'NormalMatrix', normalMatrix);
    };

    Material.prototype.bindProperties = function(gl, object, mesh) {
      var buffers;
      buffers = mesh.getBuffers();
      this.shader.bindProperty(gl, 'VertexPosition', buffers.vertexPositionBuffer);
      this.shader.bindProperty(gl, 'VertexColor', buffers.vertexColorBuffer);
      this.shader.bindProperty(gl, 'VertexTextureCoord', buffers.vertexTextureCoordBuffer);
      return this.shader.bindProperty(gl, 'VertexNormal', buffers.vertexNormalBuffer);
    };

    Material.prototype.apply = function(gl, object, mesh) {
      var shaderProgram;
      shaderProgram = this.getShader(gl);
      shaderProgram.use(gl);
      this.bindGlobals(gl);
      this.bindProperties(gl, object, mesh);
      if (this.callback !== null) {
        return this.callback.apply(this, [gl, object, mesh]);
      }
    };

    Material.prototype.remove = function(gl, object, mesh) {};

    return Material;

  })();

  window.PickingMaterial = PickingMaterial = (function(_super) {
    __extends(PickingMaterial, _super);

    PickingMaterial.instance = null;

    PickingMaterial.get = function() {
      return this.instance != null ? this.instance : this.instance = new PickingMaterial();
    };

    function PickingMaterial() {
      PickingMaterial.__super__.constructor.call(this, 'picking');
    }

    PickingMaterial.prototype.bindProperties = function(gl, object, mesh) {
      this.shader.bindProperty(gl, 'INDEX', object.id);
      return PickingMaterial.__super__.bindProperties.call(this, gl, object, mesh);
    };

    return PickingMaterial;

  })(Material);

  window.SimpleMaterial = SimpleMaterial = (function(_super) {
    __extends(SimpleMaterial, _super);

    function SimpleMaterial(color) {
      this.color = color;
      SimpleMaterial.__super__.constructor.call(this, 'core');
    }

    SimpleMaterial.prototype.bindProperties = function(gl, object, mesh) {
      this.shader.bindProperty(gl, 'Color', this.color);
      return SimpleMaterial.__super__.bindProperties.call(this, gl, object, mesh);
    };

    return SimpleMaterial;

  })(Material);

  window.TextureMaterial = TextureMaterial = (function(_super) {
    __extends(TextureMaterial, _super);

    TextureMaterial.bindTexture = function(gl, texture) {
      return texture.bind(gl);
    };

    TextureMaterial.unbindTexture = function(gl, texture) {
      return texture.unbind(gl);
    };

    TextureMaterial.bindTextureSampler = function(gl, shaderProgram) {
      return shaderProgram.bindProperty(gl, 'texture.TextureSampler', 0);
    };

    function TextureMaterial(texture) {
      this.texture = texture;
      if (!(this.texture instanceof Texture)) {
        this.texture = new Texture(this.texture);
      }
      TextureMaterial.__super__.constructor.call(this, ['core', 'texture']);
    }

    TextureMaterial.prototype.bindProperties = function(gl, object, mesh) {
      this.shader.bindProperty(gl, 'texture.TextureSampler', 0);
      return TextureMaterial.__super__.bindProperties.call(this, gl, object, mesh);
    };

    TextureMaterial.prototype.apply = function(gl, object, mesh) {
      this.texture.bind(gl);
      return TextureMaterial.__super__.apply.call(this, gl, object, mesh);
    };

    TextureMaterial.prototype.remove = function(gl, object, mesh) {
      TextureMaterial.__super__.remove.call(this, gl, object, mesh);
      return this.texture.unbind(gl);
    };

    return TextureMaterial;

  })(Material);

}).call(this);
