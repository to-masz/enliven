/**
 *
 */
(function(window, undefined){ var module = {}; var require = function(m){ if(module[m] !== void 0) { return module[m]; } };module['./rewriter'] = new function(){ var exports = this; // Generated by CoffeeScript 1.6.3
(function() {
  var BALANCED_PAIRS, EXPRESSION_CLOSE, EXPRESSION_END, EXPRESSION_START, IMPLICIT_BLOCK, IMPLICIT_CALL, IMPLICIT_END, IMPLICIT_FUNC, IMPLICIT_UNSPACED_CALL, INVERSES, LINEBREAKS, SINGLE_CLOSERS, SINGLE_LINERS, generate, left, rite, _i, _len, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  generate = function(tag, value) {
    var tok;
    tok = [tag, value];
    tok.generated = true;
    return tok;
  };

  exports.Rewriter = (function() {
    function Rewriter() {}

    Rewriter.prototype.rewrite = function(tokens) {
      this.tokens = tokens;
      this.removeLeadingNewlines();
      this.removeMidExpressionNewlines();
      this.closeOpenCalls();
      this.closeOpenIndexes();
      this.addImplicitIndentation();
      this.tagPostfixConditionals();
      this.addImplicitBracesAndParens();
      this.addLocationDataToGeneratedTokens();
      return this.tokens;
    };

    Rewriter.prototype.scanTokens = function(block) {
      var i, token, tokens;
      tokens = this.tokens;
      i = 0;
      while (token = tokens[i]) {
        i += block.call(this, token, i, tokens);
      }
      return true;
    };

    Rewriter.prototype.detectEnd = function(i, condition, action) {
      var levels, token, tokens, _ref, _ref1;
      tokens = this.tokens;
      levels = 0;
      while (token = tokens[i]) {
        if (levels === 0 && condition.call(this, token, i)) {
          return action.call(this, token, i);
        }
        if (!token || levels < 0) {
          return action.call(this, token, i - 1);
        }
        if (_ref = token[0], __indexOf.call(EXPRESSION_START, _ref) >= 0) {
          levels += 1;
        } else if (_ref1 = token[0], __indexOf.call(EXPRESSION_END, _ref1) >= 0) {
          levels -= 1;
        }
        i += 1;
      }
      return i - 1;
    };

    Rewriter.prototype.removeLeadingNewlines = function() {
      var i, tag, _i, _len, _ref;
      _ref = this.tokens;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        tag = _ref[i][0];
        if (tag !== 'TERMINATOR') {
          break;
        }
      }
      if (i) {
        return this.tokens.splice(0, i);
      }
    };

    Rewriter.prototype.removeMidExpressionNewlines = function() {
      return this.scanTokens(function(token, i, tokens) {
        var _ref;
        if (!(token[0] === 'TERMINATOR' && (_ref = this.tag(i + 1), __indexOf.call(EXPRESSION_CLOSE, _ref) >= 0))) {
          return 1;
        }
        tokens.splice(i, 1);
        return 0;
      });
    };

    Rewriter.prototype.closeOpenCalls = function() {
      var action, condition;
      condition = function(token, i) {
        var _ref;
        return ((_ref = token[0]) === ')' || _ref === 'CALL_END') || token[0] === 'OUTDENT' && this.tag(i - 1) === ')';
      };
      action = function(token, i) {
        return this.tokens[token[0] === 'OUTDENT' ? i - 1 : i][0] = 'CALL_END';
      };
      return this.scanTokens(function(token, i) {
        if (token[0] === 'CALL_START') {
          this.detectEnd(i + 1, condition, action);
        }
        return 1;
      });
    };

    Rewriter.prototype.closeOpenIndexes = function() {
      var action, condition;
      condition = function(token, i) {
        var _ref;
        return (_ref = token[0]) === ']' || _ref === 'INDEX_END';
      };
      action = function(token, i) {
        return token[0] = 'INDEX_END';
      };
      return this.scanTokens(function(token, i) {
        if (token[0] === 'INDEX_START') {
          this.detectEnd(i + 1, condition, action);
        }
        return 1;
      });
    };

    Rewriter.prototype.matchTags = function() {
      var fuzz, i, j, pattern, _i, _ref, _ref1;
      i = arguments[0], pattern = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      fuzz = 0;
      for (j = _i = 0, _ref = pattern.length; 0 <= _ref ? _i < _ref : _i > _ref; j = 0 <= _ref ? ++_i : --_i) {
        while (this.tag(i + j + fuzz) === 'HERECOMMENT') {
          fuzz += 2;
        }
        if (pattern[j] == null) {
          continue;
        }
        if (typeof pattern[j] === 'string') {
          pattern[j] = [pattern[j]];
        }
        if (_ref1 = this.tag(i + j + fuzz), __indexOf.call(pattern[j], _ref1) < 0) {
          return false;
        }
      }
      return true;
    };

    Rewriter.prototype.looksObjectish = function(j) {
      return this.matchTags(j, '@', null, ':') || this.matchTags(j, null, ':');
    };

    Rewriter.prototype.findTagsBackwards = function(i, tags) {
      var backStack, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      backStack = [];
      while (i >= 0 && (backStack.length || (_ref2 = this.tag(i), __indexOf.call(tags, _ref2) < 0) && ((_ref3 = this.tag(i), __indexOf.call(EXPRESSION_START, _ref3) < 0) || this.tokens[i].generated) && (_ref4 = this.tag(i), __indexOf.call(LINEBREAKS, _ref4) < 0))) {
        if (_ref = this.tag(i), __indexOf.call(EXPRESSION_END, _ref) >= 0) {
          backStack.push(this.tag(i));
        }
        if ((_ref1 = this.tag(i), __indexOf.call(EXPRESSION_START, _ref1) >= 0) && backStack.length) {
          backStack.pop();
        }
        i -= 1;
      }
      return _ref5 = this.tag(i), __indexOf.call(tags, _ref5) >= 0;
    };

    Rewriter.prototype.addImplicitBracesAndParens = function() {
      var stack;
      stack = [];
      return this.scanTokens(function(token, i, tokens) {
        var endImplicitCall, endImplicitObject, forward, inImplicit, inImplicitCall, inImplicitControl, inImplicitObject, nextTag, offset, prevTag, s, sameLine, stackIdx, stackTag, stackTop, startIdx, startImplicitCall, startImplicitObject, startsLine, tag, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
        tag = token[0];
        prevTag = (i > 0 ? tokens[i - 1] : [])[0];
        nextTag = (i < tokens.length - 1 ? tokens[i + 1] : [])[0];
        stackTop = function() {
          return stack[stack.length - 1];
        };
        startIdx = i;
        forward = function(n) {
          return i - startIdx + n;
        };
        inImplicit = function() {
          var _ref, _ref1;
          return (_ref = stackTop()) != null ? (_ref1 = _ref[2]) != null ? _ref1.ours : void 0 : void 0;
        };
        inImplicitCall = function() {
          var _ref;
          return inImplicit() && ((_ref = stackTop()) != null ? _ref[0] : void 0) === '(';
        };
        inImplicitObject = function() {
          var _ref;
          return inImplicit() && ((_ref = stackTop()) != null ? _ref[0] : void 0) === '{';
        };
        inImplicitControl = function() {
          var _ref;
          return inImplicit && ((_ref = stackTop()) != null ? _ref[0] : void 0) === 'CONTROL';
        };
        startImplicitCall = function(j) {
          var idx;
          idx = j != null ? j : i;
          stack.push([
            '(', idx, {
              ours: true
            }
          ]);
          tokens.splice(idx, 0, generate('CALL_START', '('));
          if (j == null) {
            return i += 1;
          }
        };
        endImplicitCall = function() {
          stack.pop();
          tokens.splice(i, 0, generate('CALL_END', ')'));
          return i += 1;
        };
        startImplicitObject = function(j, startsLine) {
          var idx;
          if (startsLine == null) {
            startsLine = true;
          }
          idx = j != null ? j : i;
          stack.push([
            '{', idx, {
              sameLine: true,
              startsLine: startsLine,
              ours: true
            }
          ]);
          tokens.splice(idx, 0, generate('{', generate(new String('{'))));
          if (j == null) {
            return i += 1;
          }
        };
        endImplicitObject = function(j) {
          j = j != null ? j : i;
          stack.pop();
          tokens.splice(j, 0, generate('}', '}'));
          return i += 1;
        };
        if (inImplicitCall() && (tag === 'IF' || tag === 'TRY' || tag === 'FINALLY' || tag === 'CATCH' || tag === 'CLASS' || tag === 'SWITCH')) {
          stack.push([
            'CONTROL', i, {
              ours: true
            }
          ]);
          return forward(1);
        }
        if (tag === 'INDENT' && inImplicit()) {
          if (prevTag !== '=>' && prevTag !== '->' && prevTag !== '[' && prevTag !== '(' && prevTag !== ',' && prevTag !== '{' && prevTag !== 'TRY' && prevTag !== 'ELSE' && prevTag !== '=') {
            while (inImplicitCall()) {
              endImplicitCall();
            }
          }
          if (inImplicitControl()) {
            stack.pop();
          }
          stack.push([tag, i]);
          return forward(1);
        }
        if (__indexOf.call(EXPRESSION_START, tag) >= 0) {
          stack.push([tag, i]);
          return forward(1);
        }
        if (__indexOf.call(EXPRESSION_END, tag) >= 0) {
          while (inImplicit()) {
            if (inImplicitCall()) {
              endImplicitCall();
            } else if (inImplicitObject()) {
              endImplicitObject();
            } else {
              stack.pop();
            }
          }
          stack.pop();
        }
        if ((__indexOf.call(IMPLICIT_FUNC, tag) >= 0 && token.spaced && !token.stringEnd || tag === '?' && i > 0 && !tokens[i - 1].spaced) && (__indexOf.call(IMPLICIT_CALL, nextTag) >= 0 || __indexOf.call(IMPLICIT_UNSPACED_CALL, nextTag) >= 0 && !((_ref = tokens[i + 1]) != null ? _ref.spaced : void 0) && !((_ref1 = tokens[i + 1]) != null ? _ref1.newLine : void 0))) {
          if (tag === '?') {
            tag = token[0] = 'FUNC_EXIST';
          }
          startImplicitCall(i + 1);
          return forward(2);
        }
        if (__indexOf.call(IMPLICIT_FUNC, tag) >= 0 && this.matchTags(i + 1, 'INDENT', null, ':') && !this.findTagsBackwards(i, ['CLASS', 'EXTENDS', 'IF', 'CATCH', 'SWITCH', 'LEADING_WHEN', 'FOR', 'WHILE', 'UNTIL', 'SCENE', 'MODEL'])) {
          startImplicitCall(i + 1);
          stack.push(['INDENT', i + 2]);
          return forward(3);
        }
        if (tag === ':') {
          if (this.tag(i - 2) === '@') {
            s = i - 2;
          } else {
            s = i - 1;
          }
          while (this.tag(s - 2) === 'HERECOMMENT') {
            s -= 2;
          }
          startsLine = s === 0 || (_ref2 = this.tag(s - 1), __indexOf.call(LINEBREAKS, _ref2) >= 0) || tokens[s - 1].newLine;
          if (stackTop()) {
            _ref3 = stackTop(), stackTag = _ref3[0], stackIdx = _ref3[1];
            if ((stackTag === '{' || stackTag === 'INDENT' && this.tag(stackIdx - 1) === '{') && (startsLine || this.tag(s - 1) === ',' || this.tag(s - 1) === '{')) {
              return forward(1);
            }
          }
          startImplicitObject(s, !!startsLine);
          return forward(2);
        }
        if (prevTag === 'OUTDENT' && inImplicitCall() && (tag === '.' || tag === '?.' || tag === '::' || tag === '?::')) {
          endImplicitCall();
          return forward(1);
        }
        if (inImplicitObject() && __indexOf.call(LINEBREAKS, tag) >= 0) {
          stackTop()[2].sameLine = false;
        }
        if (__indexOf.call(IMPLICIT_END, tag) >= 0) {
          while (inImplicit()) {
            _ref4 = stackTop(), stackTag = _ref4[0], stackIdx = _ref4[1], (_ref5 = _ref4[2], sameLine = _ref5.sameLine, startsLine = _ref5.startsLine);
            if (inImplicitCall() && prevTag !== ',') {
              endImplicitCall();
            } else if (inImplicitObject() && sameLine && !startsLine) {
              endImplicitObject();
            } else if (inImplicitObject() && tag === 'TERMINATOR' && prevTag !== ',' && !(startsLine && this.looksObjectish(i + 1))) {
              endImplicitObject();
            } else {
              break;
            }
          }
        }
        if (tag === ',' && !this.looksObjectish(i + 1) && inImplicitObject() && (nextTag !== 'TERMINATOR' || !this.looksObjectish(i + 2))) {
          offset = nextTag === 'OUTDENT' ? 1 : 0;
          while (inImplicitObject()) {
            endImplicitObject(i + offset);
          }
        }
        return forward(1);
      });
    };

    Rewriter.prototype.addLocationDataToGeneratedTokens = function() {
      return this.scanTokens(function(token, i, tokens) {
        var column, line, nextLocation, prevLocation, _ref, _ref1;
        if (token[2]) {
          return 1;
        }
        if (!(token.generated || token.explicit)) {
          return 1;
        }
        if (token[0] === '{' && (nextLocation = (_ref = tokens[i + 1]) != null ? _ref[2] : void 0)) {
          line = nextLocation.first_line, column = nextLocation.first_column;
        } else if (prevLocation = (_ref1 = tokens[i - 1]) != null ? _ref1[2] : void 0) {
          line = prevLocation.last_line, column = prevLocation.last_column;
        } else {
          line = column = 0;
        }
        token[2] = {
          first_line: line,
          first_column: column,
          last_line: line,
          last_column: column
        };
        return 1;
      });
    };

    Rewriter.prototype.addImplicitIndentation = function() {
      var action, condition, indent, outdent, starter;
      starter = indent = outdent = null;
      condition = function(token, i) {
        var _ref;
        return token[1] !== ';' && (_ref = token[0], __indexOf.call(SINGLE_CLOSERS, _ref) >= 0) && !(token[0] === 'ELSE' && (starter !== 'IF' && starter !== 'THEN'));
      };
      action = function(token, i) {
        return this.tokens.splice((this.tag(i - 1) === ',' ? i - 1 : i), 0, outdent);
      };
      return this.scanTokens(function(token, i, tokens) {
        var j, tag, _i, _ref, _ref1;
        tag = token[0];
        if (tag === 'TERMINATOR' && this.tag(i + 1) === 'THEN') {
          tokens.splice(i, 1);
          return 0;
        }
        if (tag === 'ELSE' && this.tag(i - 1) !== 'OUTDENT') {
          tokens.splice.apply(tokens, [i, 0].concat(__slice.call(this.indentation())));
          return 2;
        }
        if (tag === 'CATCH') {
          for (j = _i = 1; _i <= 2; j = ++_i) {
            if (!((_ref = this.tag(i + j)) === 'OUTDENT' || _ref === 'TERMINATOR' || _ref === 'FINALLY')) {
              continue;
            }
            tokens.splice.apply(tokens, [i + j, 0].concat(__slice.call(this.indentation())));
            return 2 + j;
          }
        }
        if (__indexOf.call(SINGLE_LINERS, tag) >= 0 && this.tag(i + 1) !== 'INDENT' && !(tag === 'ELSE' && this.tag(i + 1) === 'IF')) {
          starter = tag;
          _ref1 = this.indentation(true), indent = _ref1[0], outdent = _ref1[1];
          if (starter === 'THEN') {
            indent.fromThen = true;
          }
          tokens.splice(i + 1, 0, indent);
          this.detectEnd(i + 2, condition, action);
          if (tag === 'THEN') {
            tokens.splice(i, 1);
          }
          return 1;
        }
        return 1;
      });
    };

    Rewriter.prototype.tagPostfixConditionals = function() {
      var action, condition, original;
      original = null;
      condition = function(token, i) {
        var prevTag, tag;
        tag = token[0];
        prevTag = this.tokens[i - 1][0];
        return tag === 'TERMINATOR' || (tag === 'INDENT' && __indexOf.call(SINGLE_LINERS, prevTag) < 0);
      };
      action = function(token, i) {
        if (token[0] !== 'INDENT' || (token.generated && !token.fromThen)) {
          return original[0] = 'POST_' + original[0];
        }
      };
      return this.scanTokens(function(token, i) {
        if (token[0] !== 'IF') {
          return 1;
        }
        original = token;
        this.detectEnd(i + 1, condition, action);
        return 1;
      });
    };

    Rewriter.prototype.indentation = function(implicit) {
      var indent, outdent;
      if (implicit == null) {
        implicit = false;
      }
      indent = ['INDENT', 2];
      outdent = ['OUTDENT', 2];
      if (implicit) {
        indent.generated = outdent.generated = true;
      }
      if (!implicit) {
        indent.explicit = outdent.explicit = true;
      }
      return [indent, outdent];
    };

    Rewriter.prototype.generate = generate;

    Rewriter.prototype.tag = function(i) {
      var _ref;
      return (_ref = this.tokens[i]) != null ? _ref[0] : void 0;
    };

    return Rewriter;

  })();

  BALANCED_PAIRS = [['(', ')'], ['[', ']'], ['{', '}'], ['INDENT', 'OUTDENT'], ['CALL_START', 'CALL_END'], ['PARAM_START', 'PARAM_END'], ['INDEX_START', 'INDEX_END']];

  exports.INVERSES = INVERSES = {};

  EXPRESSION_START = [];

  EXPRESSION_END = [];

  for (_i = 0, _len = BALANCED_PAIRS.length; _i < _len; _i++) {
    _ref = BALANCED_PAIRS[_i], left = _ref[0], rite = _ref[1];
    EXPRESSION_START.push(INVERSES[rite] = left);
    EXPRESSION_END.push(INVERSES[left] = rite);
  }

  EXPRESSION_CLOSE = ['CATCH', 'WHEN', 'ELSE', 'FINALLY'].concat(EXPRESSION_END);

  IMPLICIT_FUNC = ['IDENTIFIER', 'SUPER', ')', 'CALL_END', ']', 'INDEX_END', '@', 'THIS'];

  IMPLICIT_CALL = ['IDENTIFIER', 'NUMBER', 'STRING', 'JS', 'REGEX', 'NEW', 'PARAM_START', 'CLASS', 'IF', 'TRY', 'SWITCH', 'THIS', 'BOOL', 'NULL', 'UNDEFINED', 'UNARY', 'SUPER', 'THROW', '@', '->', '=>', '[', '(', '{', '--', '++'];

  IMPLICIT_UNSPACED_CALL = ['+', '-'];

  IMPLICIT_BLOCK = ['->', '=>', '{', '[', ','];

  IMPLICIT_END = ['POST_IF', 'FOR', 'WHILE', 'UNTIL', 'WHEN', 'BY', 'LOOP', 'TERMINATOR'];

  SINGLE_LINERS = ['ELSE', '->', '=>', 'TRY', 'FINALLY', 'THEN'];

  SINGLE_CLOSERS = ['TERMINATOR', 'CATCH', 'FINALLY', 'ELSE', 'OUTDENT', 'LEADING_WHEN'];

  LINEBREAKS = ['TERMINATOR', 'INDENT', 'OUTDENT'];

}).call(this);
 if(module.exports){ var temp = module.exports; module.exports = void 0; return temp; }};module['./helpers'] = new function(){ var exports = this; // Generated by CoffeeScript 1.6.3
(function() {
  var buildLocationData, extend, flatten, last, repeat, _ref;

  exports.starts = function(string, literal, start) {
    return literal === string.substr(start, literal.length);
  };

  exports.ends = function(string, literal, back) {
    var len;
    len = literal.length;
    return literal === string.substr(string.length - len - (back || 0), len);
  };

  exports.repeat = repeat = function(str, n) {
    var res;
    res = '';
    while (n > 0) {
      if (n & 1) {
        res += str;
      }
      n >>>= 1;
      str += str;
    }
    return res;
  };

  exports.compact = function(array) {
    var item, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      item = array[_i];
      if (item) {
        _results.push(item);
      }
    }
    return _results;
  };

  exports.count = function(string, substr) {
    var num, pos;
    num = pos = 0;
    if (!substr.length) {
      return 1 / 0;
    }
    while (pos = 1 + string.indexOf(substr, pos)) {
      num++;
    }
    return num;
  };

  exports.merge = function(options, overrides) {
    return extend(extend({}, options), overrides);
  };

  extend = exports.extend = function(object, properties) {
    var key, val;
    for (key in properties) {
      val = properties[key];
      object[key] = val;
    }
    return object;
  };

  exports.flatten = flatten = function(array) {
    var element, flattened, _i, _len;
    flattened = [];
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      element = array[_i];
      if (element instanceof Array) {
        flattened = flattened.concat(flatten(element));
      } else {
        flattened.push(element);
      }
    }
    return flattened;
  };

  exports.del = function(obj, key) {
    var val;
    val = obj[key];
    delete obj[key];
    return val;
  };

  exports.last = last = function(array, back) {
    return array[array.length - (back || 0) - 1];
  };

  exports.some = (_ref = Array.prototype.some) != null ? _ref : function(fn) {
    var e, _i, _len;
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      e = this[_i];
      if (fn(e)) {
        return true;
      }
    }
    return false;
  };

  exports.invertLiterate = function(code) {
    var line, lines, maybe_code;
    maybe_code = true;
    lines = (function() {
      var _i, _len, _ref1, _results;
      _ref1 = code.split('\n');
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        line = _ref1[_i];
        if (maybe_code && /^([ ]{4}|[ ]{0,3}\t)/.test(line)) {
          _results.push(line);
        } else if (maybe_code = /^\s*$/.test(line)) {
          _results.push(line);
        } else {
          _results.push('# ' + line);
        }
      }
      return _results;
    })();
    return lines.join('\n');
  };

  buildLocationData = function(first, last) {
    if (!last) {
      return first;
    } else {
      return {
        first_line: first.first_line,
        first_column: first.first_column,
        last_line: last.last_line,
        last_column: last.last_column
      };
    }
  };

  exports.addLocationDataFn = function(first, last) {
    return function(obj) {
      if (((typeof obj) === 'object') && (!!obj['updateLocationDataIfMissing'])) {
        obj.updateLocationDataIfMissing(buildLocationData(first, last));
      }
      return obj;
    };
  };

  exports.locationDataToString = function(obj) {
    var locationData;
    if (("2" in obj) && ("first_line" in obj[2])) {
      locationData = obj[2];
    } else if ("first_line" in obj) {
      locationData = obj;
    }
    if (locationData) {
      return ("" + (locationData.first_line + 1) + ":" + (locationData.first_column + 1) + "-") + ("" + (locationData.last_line + 1) + ":" + (locationData.last_column + 1));
    } else {
      return "No location data";
    }
  };

  exports.baseFileName = function(file, stripExt, useWinPathSep) {
    var parts, pathSep;
    if (stripExt == null) {
      stripExt = false;
    }
    if (useWinPathSep == null) {
      useWinPathSep = false;
    }
    pathSep = useWinPathSep ? /\\|\// : /\//;
    parts = file.split(pathSep);
    file = parts[parts.length - 1];
    if (!stripExt) {
      return file;
    }
    parts = file.split('.');
    parts.pop();
    if (parts[parts.length - 1] === 'coffee' && parts.length > 1) {
      parts.pop();
    }
    return parts.join('.');
  };

  exports.isCoffee = function(file) {
    return /\.((lit)?coffee|coffee\.md)$/.test(file);
  };

  exports.isLiterate = function(file) {
    return /\.(litcoffee|coffee\.md)$/.test(file);
  };

  exports.throwSyntaxError = function(message, location) {
    var error;
    if (location.last_line == null) {
      location.last_line = location.first_line;
    }
    if (location.last_column == null) {
      location.last_column = location.first_column;
    }
    error = new SyntaxError(message);
    error.location = location;
    throw error;
  };

  exports.prettyErrorMessage = function(error, fileName, code, useColors) {
    var codeLine, colorize, end, first_column, first_line, last_column, last_line, marker, message, start, _ref1;
    if (!error.location) {
      return error.stack || ("" + error);
    }
    _ref1 = error.location, first_line = _ref1.first_line, first_column = _ref1.first_column, last_line = _ref1.last_line, last_column = _ref1.last_column;
    codeLine = code.split('\n')[first_line];
    start = first_column;
    end = first_line === last_line ? last_column + 1 : codeLine.length;
    marker = repeat(' ', start) + repeat('^', end - start);
    if (useColors) {
      colorize = function(str) {
        return "\x1B[1;31m" + str + "\x1B[0m";
      };
      codeLine = codeLine.slice(0, start) + colorize(codeLine.slice(start, end)) + codeLine.slice(end);
      marker = colorize(marker);
    }
    message = "" + fileName + ":" + (first_line + 1) + ":" + (first_column + 1) + ": error: " + error.message + "\n" + codeLine + "\n" + marker;
    return message;
  };

}).call(this);
 if(module.exports){ var temp = module.exports; module.exports = void 0; return temp; }};module['./lexer'] = new function(){ var exports = this; // Generated by CoffeeScript 1.6.3
(function() {
  var BOM, BOOL, CALLABLE, CODE, COFFEE_ALIASES, COFFEE_ALIAS_MAP, COFFEE_KEYWORDS, COMMENT, COMPARE, COMPOUND_ASSIGN, CUSTOM_OP, HEREDOC, HEREDOC_ILLEGAL, HEREDOC_INDENT, HEREGEX, HEREGEX_OMIT, IDENTIFIER, INDEXABLE, INVERSES, JSTOKEN, JS_FORBIDDEN, JS_KEYWORDS, LINE_BREAK, LINE_CONTINUER, LOGIC, Lexer, MATH, MATRIX_TYPES, MULTILINER, MULTI_DENT, NOT_REGEX, NOT_SPACED_REGEX, NUMBER, OPERATOR, REGEX, RELATION, RESERVED, Rewriter, SHIFT, SIMPLESTR, STRICT_PROSCRIBED, TRAILING_SPACES, UNARY, WHITESPACE, compact, count, invertLiterate, key, last, locationDataToString, repeat, starts, throwSyntaxError, _ref, _ref1,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ref = require('./rewriter'), Rewriter = _ref.Rewriter, INVERSES = _ref.INVERSES;

  _ref1 = require('./helpers'), count = _ref1.count, starts = _ref1.starts, compact = _ref1.compact, last = _ref1.last, repeat = _ref1.repeat, invertLiterate = _ref1.invertLiterate, locationDataToString = _ref1.locationDataToString, throwSyntaxError = _ref1.throwSyntaxError;

  exports.Lexer = Lexer = (function() {
    function Lexer() {}

    Lexer.prototype.tokenize = function(code, opts) {
      var consumed, i, tag, _ref2;
      if (opts == null) {
        opts = {};
      }
      this.literate = opts.literate;
      this.indent = 0;
      this.indebt = 0;
      this.outdebt = 0;
      this.indents = [];
      this.ends = [];
      this.tokens = [];
      this.chunkLine = opts.line || 0;
      this.chunkColumn = opts.column || 0;
      code = this.clean(code);
      i = 0;
      while (this.chunk = code.slice(i)) {
        consumed = this.identifierToken() || this.commentToken() || this.whitespaceToken() || this.lineToken() || this.heredocToken() || this.stringToken() || this.numberToken() || this.regexToken() || this.jsToken() || this.literalToken();
        _ref2 = this.getLineAndColumnFromChunk(consumed), this.chunkLine = _ref2[0], this.chunkColumn = _ref2[1];
        i += consumed;
      }
      this.closeIndentation();
      if (tag = this.ends.pop()) {
        this.error("missing " + tag);
      }
      if (opts.rewrite === false) {
        return this.tokens;
      }
      return (new Rewriter).rewrite(this.tokens);
    };

    Lexer.prototype.clean = function(code) {
      if (code.charCodeAt(0) === BOM) {
        code = code.slice(1);
      }
      code = code.replace(/\r/g, '').replace(TRAILING_SPACES, '');
      if (WHITESPACE.test(code)) {
        code = "\n" + code;
        this.chunkLine--;
      }
      if (this.literate) {
        code = invertLiterate(code);
      }
      return code;
    };

    Lexer.prototype.identifierToken = function() {
      var colon, colonOffset, forcedIdentifier, id, idLength, input, match, poppedToken, prev, tag, tagToken, _ref2, _ref3, _ref4;
      if (!(match = IDENTIFIER.exec(this.chunk))) {
        return 0;
      }
      input = match[0], id = match[1], colon = match[2];
      idLength = id.length;
      poppedToken = void 0;
      if (id === 'own' && this.tag() === 'FOR') {
        this.token('OWN', id);
        return id.length;
      }
      forcedIdentifier = colon || (prev = last(this.tokens)) && (((_ref2 = prev[0]) === '.' || _ref2 === '?.' || _ref2 === '::' || _ref2 === '?::') || !prev.spaced && prev[0] === '@');
      tag = 'IDENTIFIER';
      if (!forcedIdentifier && MATRIX_TYPES.test(id)) {
        tag = 'MATRIX_TYPE';
      }
      if (!forcedIdentifier && (__indexOf.call(JS_KEYWORDS, id) >= 0 || __indexOf.call(COFFEE_KEYWORDS, id) >= 0)) {
        tag = id.toUpperCase();
        if (tag === 'WHEN' && (_ref3 = this.tag(), __indexOf.call(LINE_BREAK, _ref3) >= 0)) {
          tag = 'LEADING_WHEN';
        } else if (tag === 'FOR') {
          this.seenFor = true;
        } else if (tag === 'UNLESS') {
          tag = 'IF';
        } else if (__indexOf.call(UNARY, tag) >= 0) {
          tag = 'UNARY';
        } else if (__indexOf.call(RELATION, tag) >= 0) {
          if (tag !== 'INSTANCEOF' && this.seenFor) {
            tag = 'FOR' + tag;
            this.seenFor = false;
          } else {
            tag = 'RELATION';
            if (this.value() === '!') {
              poppedToken = this.tokens.pop();
              id = '!' + id;
            }
          }
        }
      }
      if (__indexOf.call(JS_FORBIDDEN, id) >= 0) {
        if (forcedIdentifier) {
          tag = 'IDENTIFIER';
          id = new String(id);
          id.reserved = true;
        } else if (__indexOf.call(RESERVED, id) >= 0) {
          this.error("reserved word \"" + id + "\"");
        }
      }
      if (!forcedIdentifier) {
        if (__indexOf.call(COFFEE_ALIASES, id) >= 0) {
          id = COFFEE_ALIAS_MAP[id];
        }
        tag = (function() {
          switch (id) {
            case '!':
              return 'UNARY';
            case '==':
            case '!=':
              return 'COMPARE';
            case '&&':
            case '||':
              return 'LOGIC';
            case 'true':
            case 'false':
              return 'BOOL';
            case 'break':
            case 'continue':
              return 'STATEMENT';
            default:
              return tag;
          }
        })();
      }
      tagToken = this.token(tag, id, 0, idLength);
      if (poppedToken) {
        _ref4 = [poppedToken[2].first_line, poppedToken[2].first_column], tagToken[2].first_line = _ref4[0], tagToken[2].first_column = _ref4[1];
      }
      if (colon) {
        colonOffset = input.lastIndexOf(':');
        this.token(':', ':', colonOffset, colon.length);
      }
      return input.length;
    };

    Lexer.prototype.numberToken = function() {
      var binaryLiteral, lexedLength, match, number, octalLiteral;
      if (!(match = NUMBER.exec(this.chunk))) {
        return 0;
      }
      number = match[0];
      if (/^0[BOX]/.test(number)) {
        this.error("radix prefix '" + number + "' must be lowercase");
      } else if (/E/.test(number) && !/^0x/.test(number)) {
        this.error("exponential notation '" + number + "' must be indicated with a lowercase 'e'");
      } else if (/^0\d*[89]/.test(number)) {
        this.error("decimal literal '" + number + "' must not be prefixed with '0'");
      } else if (/^0\d+/.test(number)) {
        this.error("octal literal '" + number + "' must be prefixed with '0o'");
      }
      lexedLength = number.length;
      if (octalLiteral = /^0o([0-7]+)/.exec(number)) {
        number = '0x' + parseInt(octalLiteral[1], 8).toString(16);
      }
      if (binaryLiteral = /^0b([01]+)/.exec(number)) {
        number = '0x' + parseInt(binaryLiteral[1], 2).toString(16);
      }
      this.token('NUMBER', number, 0, lexedLength);
      return lexedLength;
    };

    Lexer.prototype.stringToken = function() {
      var match, octalEsc, string;
      switch (this.chunk.charAt(0)) {
        case "'":
          if (!(match = SIMPLESTR.exec(this.chunk))) {
            return 0;
          }
          string = match[0];
          this.token('STRING', string.replace(MULTILINER, '\\\n'), 0, string.length);
          break;
        case '"':
          if (!(string = this.balancedString(this.chunk, '"'))) {
            return 0;
          }
          if (0 < string.indexOf('#{', 1)) {
            this.interpolateString(string.slice(1, -1), {
              strOffset: 1,
              lexedLength: string.length
            });
          } else {
            this.token('STRING', this.escapeLines(string, 0, string.length));
          }
          break;
        default:
          return 0;
      }
      if (octalEsc = /^(?:\\.|[^\\])*\\(?:0[0-7]|[1-7])/.test(string)) {
        this.error("octal escape sequences " + string + " are not allowed");
      }
      return string.length;
    };

    Lexer.prototype.heredocToken = function() {
      var doc, heredoc, match, quote;
      if (!(match = HEREDOC.exec(this.chunk))) {
        return 0;
      }
      heredoc = match[0];
      quote = heredoc.charAt(0);
      doc = this.sanitizeHeredoc(match[2], {
        quote: quote,
        indent: null
      });
      if (quote === '"' && 0 <= doc.indexOf('#{')) {
        this.interpolateString(doc, {
          heredoc: true,
          strOffset: 3,
          lexedLength: heredoc.length
        });
      } else {
        this.token('STRING', this.makeString(doc, quote, true), 0, heredoc.length);
      }
      return heredoc.length;
    };

    Lexer.prototype.commentToken = function() {
      var comment, here, match;
      if (!(match = this.chunk.match(COMMENT))) {
        return 0;
      }
      comment = match[0], here = match[1];
      if (here) {
        this.token('HERECOMMENT', this.sanitizeHeredoc(here, {
          herecomment: true,
          indent: repeat(' ', this.indent)
        }), 0, comment.length);
      }
      return comment.length;
    };

    Lexer.prototype.jsToken = function() {
      var match, script;
      if (!(this.chunk.charAt(0) === '`' && (match = JSTOKEN.exec(this.chunk)))) {
        return 0;
      }
      this.token('JS', (script = match[0]).slice(1, -1), 0, script.length);
      return script.length;
    };

    Lexer.prototype.regexToken = function() {
      var flags, length, match, prev, regex, _ref2, _ref3;
      if (this.chunk.charAt(0) !== '/') {
        return 0;
      }
      if (match = HEREGEX.exec(this.chunk)) {
        length = this.heregexToken(match);
        return length;
      }
      prev = last(this.tokens);
      if (prev && (_ref2 = prev[0], __indexOf.call((prev.spaced ? NOT_REGEX : NOT_SPACED_REGEX), _ref2) >= 0)) {
        return 0;
      }
      if (!(match = REGEX.exec(this.chunk))) {
        return 0;
      }
      _ref3 = match, match = _ref3[0], regex = _ref3[1], flags = _ref3[2];
      if (regex.slice(0, 2) === '/*') {
        this.error('regular expressions cannot begin with `*`');
      }
      if (regex === '//') {
        regex = '/(?:)/';
      }
      this.token('REGEX', "" + regex + flags, 0, match.length);
      return match.length;
    };

    Lexer.prototype.heregexToken = function(match) {
      var body, flags, flagsOffset, heregex, plusToken, prev, re, tag, token, tokens, value, _i, _len, _ref2, _ref3, _ref4;
      heregex = match[0], body = match[1], flags = match[2];
      if (0 > body.indexOf('#{')) {
        re = body.replace(HEREGEX_OMIT, '').replace(/\//g, '\\/');
        if (re.match(/^\*/)) {
          this.error('regular expressions cannot begin with `*`');
        }
        this.token('REGEX', "/" + (re || '(?:)') + "/" + flags, 0, heregex.length);
        return heregex.length;
      }
      this.token('IDENTIFIER', 'RegExp', 0, 0);
      this.token('CALL_START', '(', 0, 0);
      tokens = [];
      _ref2 = this.interpolateString(body, {
        regex: true
      });
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        token = _ref2[_i];
        tag = token[0], value = token[1];
        if (tag === 'TOKENS') {
          tokens.push.apply(tokens, value);
        } else if (tag === 'NEOSTRING') {
          if (!(value = value.replace(HEREGEX_OMIT, ''))) {
            continue;
          }
          value = value.replace(/\\/g, '\\\\');
          token[0] = 'STRING';
          token[1] = this.makeString(value, '"', true);
          tokens.push(token);
        } else {
          this.error("Unexpected " + tag);
        }
        prev = last(this.tokens);
        plusToken = ['+', '+'];
        plusToken[2] = prev[2];
        tokens.push(plusToken);
      }
      tokens.pop();
      if (((_ref3 = tokens[0]) != null ? _ref3[0] : void 0) !== 'STRING') {
        this.token('STRING', '""', 0, 0);
        this.token('+', '+', 0, 0);
      }
      (_ref4 = this.tokens).push.apply(_ref4, tokens);
      if (flags) {
        flagsOffset = heregex.lastIndexOf(flags);
        this.token(',', ',', flagsOffset, 0);
        this.token('STRING', '"' + flags + '"', flagsOffset, flags.length);
      }
      this.token(')', ')', heregex.length - 1, 0);
      return heregex.length;
    };

    Lexer.prototype.lineToken = function() {
      var diff, indent, match, noNewlines, size;
      if (!(match = MULTI_DENT.exec(this.chunk))) {
        return 0;
      }
      indent = match[0];
      this.seenFor = false;
      size = indent.length - 1 - indent.lastIndexOf('\n');
      noNewlines = this.unfinished();
      if (size - this.indebt === this.indent) {
        if (noNewlines) {
          this.suppressNewlines();
        } else {
          this.newlineToken(0);
        }
        return indent.length;
      }
      if (size > this.indent) {
        if (noNewlines) {
          this.indebt = size - this.indent;
          this.suppressNewlines();
          return indent.length;
        }
        diff = size - this.indent + this.outdebt;
        this.token('INDENT', diff, indent.length - size, size);
        this.indents.push(diff);
        this.ends.push('OUTDENT');
        this.outdebt = this.indebt = 0;
      } else {
        this.indebt = 0;
        this.outdentToken(this.indent - size, noNewlines, indent.length);
      }
      this.indent = size;
      return indent.length;
    };

    Lexer.prototype.outdentToken = function(moveOut, noNewlines, outdentLength) {
      var dent, len;
      while (moveOut > 0) {
        len = this.indents.length - 1;
        if (this.indents[len] === void 0) {
          moveOut = 0;
        } else if (this.indents[len] === this.outdebt) {
          moveOut -= this.outdebt;
          this.outdebt = 0;
        } else if (this.indents[len] < this.outdebt) {
          this.outdebt -= this.indents[len];
          moveOut -= this.indents[len];
        } else {
          dent = this.indents.pop() + this.outdebt;
          moveOut -= dent;
          this.outdebt = 0;
          this.pair('OUTDENT');
          this.token('OUTDENT', dent, 0, outdentLength);
        }
      }
      if (dent) {
        this.outdebt -= moveOut;
      }
      while (this.value() === ';') {
        this.tokens.pop();
      }
      if (!(this.tag() === 'TERMINATOR' || noNewlines)) {
        this.token('TERMINATOR', '\n', outdentLength, 0);
      }
      return this;
    };

    Lexer.prototype.whitespaceToken = function() {
      var match, nline, prev;
      if (!((match = WHITESPACE.exec(this.chunk)) || (nline = this.chunk.charAt(0) === '\n'))) {
        return 0;
      }
      prev = last(this.tokens);
      if (prev) {
        prev[match ? 'spaced' : 'newLine'] = true;
      }
      if (match) {
        return match[0].length;
      } else {
        return 0;
      }
    };

    Lexer.prototype.newlineToken = function(offset) {
      while (this.value() === ';') {
        this.tokens.pop();
      }
      if (this.tag() !== 'TERMINATOR') {
        this.token('TERMINATOR', '\n', offset, 0);
      }
      return this;
    };

    Lexer.prototype.suppressNewlines = function() {
      if (this.value() === '\\') {
        this.tokens.pop();
      }
      return this;
    };

    Lexer.prototype.literalToken = function() {
      var match, prev, tag, value, _ref2, _ref3, _ref4, _ref5;
      if (match = OPERATOR.exec(this.chunk)) {
        value = match[0];
        if (CODE.test(value)) {
          this.tagParameters();
        }
      } else {
        value = this.chunk.charAt(0);
      }
      tag = value;
      prev = last(this.tokens);
      if (value === '=' && prev) {
        if (!prev[1].reserved && (_ref2 = prev[1], __indexOf.call(JS_FORBIDDEN, _ref2) >= 0)) {
          this.error("reserved word \"" + (this.value()) + "\" can't be assigned");
        }
        if ((_ref3 = prev[1]) === '||' || _ref3 === '&&') {
          prev[0] = 'COMPOUND_ASSIGN';
          prev[1] += '=';
          return value.length;
        }
      }
      if (value === ';') {
        this.seenFor = false;
        tag = 'TERMINATOR';
      } else if (__indexOf.call(MATH, value) >= 0) {
        tag = 'MATH';
      } else if (__indexOf.call(COMPARE, value) >= 0) {
        tag = 'COMPARE';
      } else if (__indexOf.call(COMPOUND_ASSIGN, value) >= 0) {
        tag = 'COMPOUND_ASSIGN';
      } else if (__indexOf.call(UNARY, value) >= 0) {
        tag = 'UNARY';
      } else if (__indexOf.call(SHIFT, value) >= 0) {
        tag = 'SHIFT';
      } else if (__indexOf.call(CUSTOM_OP, value) >= 0) {
        tag = 'CUSTOM_OP';
      } else if (__indexOf.call(LOGIC, value) >= 0 || value === '?' && (prev != null ? prev.spaced : void 0)) {
        tag = 'LOGIC';
      } else if (prev && !prev.spaced) {
        if (value === '(' && (_ref4 = prev[0], __indexOf.call(CALLABLE, _ref4) >= 0)) {
          if (prev[0] === '?') {
            prev[0] = 'FUNC_EXIST';
          }
          tag = 'CALL_START';
        } else if (value === '[' && (_ref5 = prev[0], __indexOf.call(INDEXABLE, _ref5) >= 0)) {
          tag = 'INDEX_START';
          switch (prev[0]) {
            case '?':
              prev[0] = 'INDEX_SOAK';
          }
        }
      }
      switch (value) {
        case '(':
        case '{':
        case '[':
          this.ends.push(INVERSES[value]);
          break;
        case ')':
        case '}':
        case ']':
          this.pair(value);
      }
      this.token(tag, value);
      return value.length;
    };

    Lexer.prototype.sanitizeHeredoc = function(doc, options) {
      var attempt, herecomment, indent, match, _ref2;
      indent = options.indent, herecomment = options.herecomment;
      if (herecomment) {
        if (HEREDOC_ILLEGAL.test(doc)) {
          this.error("block comment cannot contain \"*/\", starting");
        }
        if (doc.indexOf('\n') < 0) {
          return doc;
        }
      } else {
        while (match = HEREDOC_INDENT.exec(doc)) {
          attempt = match[1];
          if (indent === null || (0 < (_ref2 = attempt.length) && _ref2 < indent.length)) {
            indent = attempt;
          }
        }
      }
      if (indent) {
        doc = doc.replace(RegExp("\\n" + indent, "g"), '\n');
      }
      if (!herecomment) {
        doc = doc.replace(/^\n/, '');
      }
      return doc;
    };

    Lexer.prototype.tagParameters = function() {
      var i, stack, tok, tokens;
      if (this.tag() !== ')') {
        return this;
      }
      stack = [];
      tokens = this.tokens;
      i = tokens.length;
      tokens[--i][0] = 'PARAM_END';
      while (tok = tokens[--i]) {
        switch (tok[0]) {
          case ')':
            stack.push(tok);
            break;
          case '(':
          case 'CALL_START':
            if (stack.length) {
              stack.pop();
            } else if (tok[0] === '(') {
              tok[0] = 'PARAM_START';
              return this;
            } else {
              return this;
            }
        }
      }
      return this;
    };

    Lexer.prototype.closeIndentation = function() {
      return this.outdentToken(this.indent);
    };

    Lexer.prototype.balancedString = function(str, end) {
      var continueCount, i, letter, match, prev, stack, _i, _ref2;
      continueCount = 0;
      stack = [end];
      for (i = _i = 1, _ref2 = str.length; 1 <= _ref2 ? _i < _ref2 : _i > _ref2; i = 1 <= _ref2 ? ++_i : --_i) {
        if (continueCount) {
          --continueCount;
          continue;
        }
        switch (letter = str.charAt(i)) {
          case '\\':
            ++continueCount;
            continue;
          case end:
            stack.pop();
            if (!stack.length) {
              return str.slice(0, +i + 1 || 9e9);
            }
            end = stack[stack.length - 1];
            continue;
        }
        if (end === '}' && (letter === '"' || letter === "'")) {
          stack.push(end = letter);
        } else if (end === '}' && letter === '/' && (match = HEREGEX.exec(str.slice(i)) || REGEX.exec(str.slice(i)))) {
          continueCount += match[0].length - 1;
        } else if (end === '}' && letter === '{') {
          stack.push(end = '}');
        } else if (end === '"' && prev === '#' && letter === '{') {
          stack.push(end = '}');
        }
        prev = letter;
      }
      return this.error("missing " + (stack.pop()) + ", starting");
    };

    Lexer.prototype.interpolateString = function(str, options) {
      var column, expr, heredoc, i, inner, interpolated, len, letter, lexedLength, line, locationToken, nested, offsetInChunk, pi, plusToken, popped, regex, rparen, strOffset, tag, token, tokens, value, _i, _len, _ref2, _ref3, _ref4;
      if (options == null) {
        options = {};
      }
      heredoc = options.heredoc, regex = options.regex, offsetInChunk = options.offsetInChunk, strOffset = options.strOffset, lexedLength = options.lexedLength;
      offsetInChunk = offsetInChunk || 0;
      strOffset = strOffset || 0;
      lexedLength = lexedLength || str.length;
      if (heredoc && str.length > 0 && str[0] === '\n') {
        str = str.slice(1);
        strOffset++;
      }
      tokens = [];
      pi = 0;
      i = -1;
      while (letter = str.charAt(i += 1)) {
        if (letter === '\\') {
          i += 1;
          continue;
        }
        if (!(letter === '#' && str.charAt(i + 1) === '{' && (expr = this.balancedString(str.slice(i + 1), '}')))) {
          continue;
        }
        if (pi < i) {
          tokens.push(this.makeToken('NEOSTRING', str.slice(pi, i), strOffset + pi));
        }
        inner = expr.slice(1, -1);
        if (inner.length) {
          _ref2 = this.getLineAndColumnFromChunk(strOffset + i + 1), line = _ref2[0], column = _ref2[1];
          nested = new Lexer().tokenize(inner, {
            line: line,
            column: column,
            rewrite: false
          });
          popped = nested.pop();
          if (((_ref3 = nested[0]) != null ? _ref3[0] : void 0) === 'TERMINATOR') {
            popped = nested.shift();
          }
          if (len = nested.length) {
            if (len > 1) {
              nested.unshift(this.makeToken('(', '(', strOffset + i + 1, 0));
              nested.push(this.makeToken(')', ')', strOffset + i + 1 + inner.length, 0));
            }
            tokens.push(['TOKENS', nested]);
          }
        }
        i += expr.length;
        pi = i + 1;
      }
      if ((i > pi && pi < str.length)) {
        tokens.push(this.makeToken('NEOSTRING', str.slice(pi), strOffset + pi));
      }
      if (regex) {
        return tokens;
      }
      if (!tokens.length) {
        return this.token('STRING', '""', offsetInChunk, lexedLength);
      }
      if (tokens[0][0] !== 'NEOSTRING') {
        tokens.unshift(this.makeToken('NEOSTRING', '', offsetInChunk));
      }
      if (interpolated = tokens.length > 1) {
        this.token('(', '(', offsetInChunk, 0);
      }
      for (i = _i = 0, _len = tokens.length; _i < _len; i = ++_i) {
        token = tokens[i];
        tag = token[0], value = token[1];
        if (i) {
          if (i) {
            plusToken = this.token('+', '+');
          }
          locationToken = tag === 'TOKENS' ? value[0] : token;
          plusToken[2] = {
            first_line: locationToken[2].first_line,
            first_column: locationToken[2].first_column,
            last_line: locationToken[2].first_line,
            last_column: locationToken[2].first_column
          };
        }
        if (tag === 'TOKENS') {
          (_ref4 = this.tokens).push.apply(_ref4, value);
        } else if (tag === 'NEOSTRING') {
          token[0] = 'STRING';
          token[1] = this.makeString(value, '"', heredoc);
          this.tokens.push(token);
        } else {
          this.error("Unexpected " + tag);
        }
      }
      if (interpolated) {
        rparen = this.makeToken(')', ')', offsetInChunk + lexedLength, 0);
        rparen.stringEnd = true;
        this.tokens.push(rparen);
      }
      return tokens;
    };

    Lexer.prototype.pair = function(tag) {
      var size, wanted;
      if (tag !== (wanted = last(this.ends))) {
        if ('OUTDENT' !== wanted) {
          this.error("unmatched " + tag);
        }
        this.indent -= size = last(this.indents);
        this.outdentToken(size, true);
        return this.pair(tag);
      }
      return this.ends.pop();
    };

    Lexer.prototype.getLineAndColumnFromChunk = function(offset) {
      var column, lineCount, lines, string;
      if (offset === 0) {
        return [this.chunkLine, this.chunkColumn];
      }
      if (offset >= this.chunk.length) {
        string = this.chunk;
      } else {
        string = this.chunk.slice(0, +(offset - 1) + 1 || 9e9);
      }
      lineCount = count(string, '\n');
      column = this.chunkColumn;
      if (lineCount > 0) {
        lines = string.split('\n');
        column = last(lines).length;
      } else {
        column += string.length;
      }
      return [this.chunkLine + lineCount, column];
    };

    Lexer.prototype.makeToken = function(tag, value, offsetInChunk, length) {
      var lastCharacter, locationData, token, _ref2, _ref3;
      if (offsetInChunk == null) {
        offsetInChunk = 0;
      }
      if (length == null) {
        length = value.length;
      }
      locationData = {};
      _ref2 = this.getLineAndColumnFromChunk(offsetInChunk), locationData.first_line = _ref2[0], locationData.first_column = _ref2[1];
      lastCharacter = Math.max(0, length - 1);
      _ref3 = this.getLineAndColumnFromChunk(offsetInChunk + lastCharacter), locationData.last_line = _ref3[0], locationData.last_column = _ref3[1];
      token = [tag, value, locationData];
      return token;
    };

    Lexer.prototype.token = function(tag, value, offsetInChunk, length) {
      var token;
      token = this.makeToken(tag, value, offsetInChunk, length);
      this.tokens.push(token);
      return token;
    };

    Lexer.prototype.tag = function(index, tag) {
      var tok;
      return (tok = last(this.tokens, index)) && (tag ? tok[0] = tag : tok[0]);
    };

    Lexer.prototype.value = function(index, val) {
      var tok;
      return (tok = last(this.tokens, index)) && (val ? tok[1] = val : tok[1]);
    };

    Lexer.prototype.unfinished = function() {
      var _ref2;
      return LINE_CONTINUER.test(this.chunk) || ((_ref2 = this.tag()) === '\\' || _ref2 === '.' || _ref2 === '?.' || _ref2 === '?::' || _ref2 === 'UNARY' || _ref2 === 'MATH' || _ref2 === '+' || _ref2 === '-' || _ref2 === 'SHIFT' || _ref2 === 'RELATION' || _ref2 === 'COMPARE' || _ref2 === 'LOGIC' || _ref2 === 'THROW' || _ref2 === 'EXTENDS');
    };

    Lexer.prototype.escapeLines = function(str, heredoc) {
      return str.replace(MULTILINER, heredoc ? '\\n' : '');
    };

    Lexer.prototype.makeString = function(body, quote, heredoc) {
      if (!body) {
        return quote + quote;
      }
      body = body.replace(/\\([\s\S])/g, function(match, contents) {
        if (contents === '\n' || contents === quote) {
          return contents;
        } else {
          return match;
        }
      });
      body = body.replace(RegExp("" + quote, "g"), '\\$&');
      return quote + this.escapeLines(body, heredoc) + quote;
    };

    Lexer.prototype.error = function(message) {
      return throwSyntaxError(message, {
        first_line: this.chunkLine,
        first_column: this.chunkColumn
      });
    };

    return Lexer;

  })();

  JS_KEYWORDS = ['true', 'false', 'null', 'this', 'new', 'delete', 'typeof', 'in', 'instanceof', 'return', 'throw', 'break', 'continue', 'debugger', 'if', 'else', 'switch', 'for', 'while', 'do', 'try', 'catch', 'finally', 'class', 'extends', 'super'];

  COFFEE_KEYWORDS = ['undefined', 'then', 'unless', 'until', 'loop', 'of', 'by', 'when', 'worker', 'shader', 'scene', 'model'];

  COFFEE_ALIAS_MAP = {
    and: '&&',
    or: '||',
    is: '==',
    isnt: '!=',
    not: '!',
    yes: 'true',
    no: 'false',
    on: 'true',
    off: 'false'
  };

  COFFEE_ALIASES = (function() {
    var _results;
    _results = [];
    for (key in COFFEE_ALIAS_MAP) {
      _results.push(key);
    }
    return _results;
  })();

  COFFEE_KEYWORDS = COFFEE_KEYWORDS.concat(COFFEE_ALIASES);

  RESERVED = ['case', 'default', 'function', 'var', 'void', 'with', 'const', 'let', 'enum', 'export', 'import', 'native', '__hasProp', '__extends', '__slice', '__bind', '__indexOf', 'implements', 'interface', 'package', 'private', 'protected', 'public', 'static', 'yield'];

  STRICT_PROSCRIBED = ['arguments', 'eval'];

  JS_FORBIDDEN = JS_KEYWORDS.concat(RESERVED).concat(STRICT_PROSCRIBED);

  exports.RESERVED = RESERVED.concat(JS_KEYWORDS).concat(COFFEE_KEYWORDS).concat(STRICT_PROSCRIBED);

  exports.STRICT_PROSCRIBED = STRICT_PROSCRIBED;

  BOM = 65279;

  IDENTIFIER = /^([$A-Za-z_\x7f-\uffff][$\w\x7f-\uffff]*)([^\n\S]*:(?!:))?/;

  NUMBER = /^0b[01]+|^0o[0-7]+|^0x[\da-f]+|^\d*\.?\d+(?:e[+-]?\d+)?/i;

  HEREDOC = /^("""|''')([\s\S]*?)(?:\n[^\n\S]*)?\1/;

  OPERATOR = /^(?:[-=]>|[@|^]>|[-+*\/%<>&|^!?=]=|>>>=?|([-+:])\1|([&|<>])\2=?|\?(\.|::)|\.{2,3})/;

  WHITESPACE = /^[^\n\S]+/;

  COMMENT = /^###([^#][\s\S]*?)(?:###[^\n\S]*|(?:###)$)|^(?:\s*#(?!##[^#]).*)+/;

  CODE = /^[-=]>/;

  MULTI_DENT = /^(?:\n[^\n\S]*)+/;

  SIMPLESTR = /^'[^\\']*(?:\\.[^\\']*)*'/;

  JSTOKEN = /^`[^\\`]*(?:\\.[^\\`]*)*`/;

  REGEX = /^(\/(?![\s=])[^[\/\n\\]*(?:(?:\\[\s\S]|\[[^\]\n\\]*(?:\\[\s\S][^\]\n\\]*)*])[^[\/\n\\]*)*\/)([imgy]{0,4})(?!\w)/;

  HEREGEX = /^\/{3}([\s\S]+?)\/{3}([imgy]{0,4})(?!\w)/;

  HEREGEX_OMIT = /\s+(?:#.*)?/g;

  MULTILINER = /\n/g;

  HEREDOC_INDENT = /\n+([^\n\S]*)/g;

  HEREDOC_ILLEGAL = /\*\//;

  LINE_CONTINUER = /^\s*(?:,|\??\.(?![.\d])|::)/;

  TRAILING_SPACES = /\s+$/;

  MATRIX_TYPES = /^(((mat|vec)[234])|quat)$/;

  COMPOUND_ASSIGN = ['-=', '+=', '/=', '*=', '%=', '||=', '&&=', '?=', '<<=', '>>=', '>>>=', '&=', '^=', '|='];

  UNARY = ['!', '~', 'NEW', 'TYPEOF', 'DELETE', 'DO'];

  LOGIC = ['&&', '||', '&', '^', '|'];

  SHIFT = ['<<', '>>', '>>>'];

  COMPARE = ['==', '!=', '<', '>', '<=', '>='];

  MATH = ['*', '/', '%'];

  CUSTOM_OP = ['@>', '|>', '^>'];

  RELATION = ['IN', 'OF', 'INSTANCEOF'];

  BOOL = ['TRUE', 'FALSE'];

  NOT_REGEX = ['NUMBER', 'REGEX', 'BOOL', 'NULL', 'UNDEFINED', '++', '--'];

  NOT_SPACED_REGEX = NOT_REGEX.concat(')', '}', 'THIS', 'IDENTIFIER', 'STRING', ']');

  CALLABLE = ['IDENTIFIER', 'STRING', 'REGEX', ')', ']', '}', '?', '::', '@', 'THIS', 'SUPER'];

  INDEXABLE = CALLABLE.concat('NUMBER', 'BOOL', 'NULL', 'UNDEFINED');

  LINE_BREAK = ['INDENT', 'OUTDENT', 'TERMINATOR'];

}).call(this);
 if(module.exports){ var temp = module.exports; module.exports = void 0; return temp; }};module['./parser'] = new function(){ var exports = this; /* parser generated by jison 0.4.4 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Root":3,"Body":4,"Block":5,"TERMINATOR":6,"Line":7,"Expression":8,"Statement":9,"Return":10,"Comment":11,"STATEMENT":12,"Value":13,"Invocation":14,"Code":15,"Operation":16,"Assign":17,"If":18,"Try":19,"While":20,"For":21,"Switch":22,"Class":23,"Worker":24,"Scene":25,"Model":26,"Shader":27,"Throw":28,"INDENT":29,"OUTDENT":30,"Identifier":31,"IDENTIFIER":32,"AlphaNumeric":33,"NUMBER":34,"STRING":35,"Literal":36,"JS":37,"REGEX":38,"DEBUGGER":39,"UNDEFINED":40,"NULL":41,"BOOL":42,"Assignable":43,"=":44,"AssignObj":45,"ObjAssignable":46,":":47,"ThisProperty":48,"RETURN":49,"HERECOMMENT":50,"PARAM_START":51,"ParamList":52,"PARAM_END":53,"FuncGlyph":54,"->":55,"=>":56,"OptComma":57,",":58,"Param":59,"ParamVar":60,"...":61,"Array":62,"Object":63,"Splat":64,"SimpleAssignable":65,"Accessor":66,"Parenthetical":67,"Range":68,"This":69,".":70,"?.":71,"::":72,"?::":73,"Index":74,"INDEX_START":75,"IndexValue":76,"INDEX_END":77,"INDEX_SOAK":78,"Slice":79,"{":80,"AssignList":81,"}":82,"CLASS":83,"EXTENDS":84,"WORKER":85,"SCENE":86,"MODEL":87,"SHADER":88,"OptFuncExist":89,"Arguments":90,"SUPER":91,"FUNC_EXIST":92,"CALL_START":93,"CALL_END":94,"ArgList":95,"THIS":96,"@":97,"[":98,"]":99,"MATRIX_TYPE":100,"RangeDots":101,"..":102,"Arg":103,"SimpleArgs":104,"TRY":105,"Catch":106,"FINALLY":107,"CATCH":108,"THROW":109,"(":110,")":111,"WhileSource":112,"WHILE":113,"WHEN":114,"UNTIL":115,"Loop":116,"LOOP":117,"ForBody":118,"FOR":119,"ForStart":120,"ForSource":121,"ForVariables":122,"OWN":123,"ForValue":124,"FORIN":125,"FOROF":126,"BY":127,"SWITCH":128,"Whens":129,"ELSE":130,"When":131,"LEADING_WHEN":132,"IfBlock":133,"IF":134,"POST_IF":135,"UNARY":136,"-":137,"+":138,"--":139,"++":140,"?":141,"MATH":142,"CUSTOM_OP":143,"SHIFT":144,"COMPARE":145,"LOGIC":146,"RELATION":147,"COMPOUND_ASSIGN":148,"$accept":0,"$end":1},
terminals_: {2:"error",6:"TERMINATOR",12:"STATEMENT",29:"INDENT",30:"OUTDENT",32:"IDENTIFIER",34:"NUMBER",35:"STRING",37:"JS",38:"REGEX",39:"DEBUGGER",40:"UNDEFINED",41:"NULL",42:"BOOL",44:"=",47:":",49:"RETURN",50:"HERECOMMENT",51:"PARAM_START",53:"PARAM_END",55:"->",56:"=>",58:",",61:"...",70:".",71:"?.",72:"::",73:"?::",75:"INDEX_START",77:"INDEX_END",78:"INDEX_SOAK",80:"{",82:"}",83:"CLASS",84:"EXTENDS",85:"WORKER",86:"SCENE",87:"MODEL",88:"SHADER",91:"SUPER",92:"FUNC_EXIST",93:"CALL_START",94:"CALL_END",96:"THIS",97:"@",98:"[",99:"]",100:"MATRIX_TYPE",102:"..",105:"TRY",107:"FINALLY",108:"CATCH",109:"THROW",110:"(",111:")",113:"WHILE",114:"WHEN",115:"UNTIL",117:"LOOP",119:"FOR",123:"OWN",125:"FORIN",126:"FOROF",127:"BY",128:"SWITCH",130:"ELSE",132:"LEADING_WHEN",134:"IF",135:"POST_IF",136:"UNARY",137:"-",138:"+",139:"--",140:"++",141:"?",142:"MATH",143:"CUSTOM_OP",144:"SHIFT",145:"COMPARE",146:"LOGIC",147:"RELATION",148:"COMPOUND_ASSIGN"},
productions_: [0,[3,0],[3,1],[3,2],[4,1],[4,3],[4,2],[7,1],[7,1],[9,1],[9,1],[9,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[5,2],[5,3],[31,1],[33,1],[33,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[17,3],[17,4],[17,5],[45,1],[45,3],[45,5],[45,1],[46,1],[46,1],[46,1],[10,2],[10,1],[11,1],[15,5],[15,2],[54,1],[54,1],[57,0],[57,1],[52,0],[52,1],[52,3],[52,4],[52,6],[59,1],[59,2],[59,3],[60,1],[60,1],[60,1],[60,1],[64,2],[65,1],[65,2],[65,2],[65,1],[43,1],[43,1],[43,1],[13,1],[13,1],[13,1],[13,1],[13,1],[66,2],[66,2],[66,2],[66,2],[66,1],[66,1],[74,3],[74,2],[76,1],[76,1],[63,4],[81,0],[81,1],[81,3],[81,4],[81,6],[23,1],[23,2],[23,3],[23,4],[23,2],[23,3],[23,4],[23,5],[24,2],[24,3],[25,2],[25,3],[26,2],[26,3],[27,7],[27,8],[14,3],[14,3],[14,1],[14,2],[89,0],[89,1],[90,2],[90,4],[69,1],[69,1],[48,2],[62,2],[62,4],[62,3],[62,5],[101,1],[101,1],[68,5],[79,3],[79,2],[79,2],[79,1],[95,1],[95,3],[95,4],[95,4],[95,6],[103,1],[103,1],[104,1],[104,3],[19,2],[19,3],[19,4],[19,5],[106,3],[106,3],[106,2],[28,2],[67,3],[67,5],[112,2],[112,4],[112,2],[112,4],[20,2],[20,2],[20,2],[20,1],[116,2],[116,2],[21,2],[21,2],[21,2],[118,2],[118,2],[120,2],[120,3],[124,1],[124,1],[124,1],[124,1],[122,1],[122,3],[121,2],[121,2],[121,4],[121,4],[121,4],[121,6],[121,6],[22,5],[22,7],[22,4],[22,6],[129,1],[129,2],[131,3],[131,4],[133,3],[133,5],[18,1],[18,3],[18,3],[18,3],[16,2],[16,2],[16,2],[16,2],[16,2],[16,2],[16,2],[16,2],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,5],[16,4],[16,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Block);
break;
case 2:return this.$ = $$[$0];
break;
case 3:return this.$ = $$[$0-1];
break;
case 4:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(yy.Block.wrap([$$[$0]]));
break;
case 5:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])($$[$0-2].push($$[$0]));
break;
case 6:this.$ = $$[$0-1];
break;
case 7:this.$ = $$[$0];
break;
case 8:this.$ = $$[$0];
break;
case 9:this.$ = $$[$0];
break;
case 10:this.$ = $$[$0];
break;
case 11:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Literal($$[$0]));
break;
case 12:this.$ = $$[$0];
break;
case 13:this.$ = $$[$0];
break;
case 14:this.$ = $$[$0];
break;
case 15:this.$ = $$[$0];
break;
case 16:this.$ = $$[$0];
break;
case 17:this.$ = $$[$0];
break;
case 18:this.$ = $$[$0];
break;
case 19:this.$ = $$[$0];
break;
case 20:this.$ = $$[$0];
break;
case 21:this.$ = $$[$0];
break;
case 22:this.$ = $$[$0];
break;
case 23:this.$ = $$[$0];
break;
case 24:this.$ = $$[$0];
break;
case 25:this.$ = $$[$0];
break;
case 26:this.$ = $$[$0];
break;
case 27:this.$ = $$[$0];
break;
case 28:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Block);
break;
case 29:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])($$[$0-1]);
break;
case 30:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Literal($$[$0]));
break;
case 31:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Literal($$[$0]));
break;
case 32:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Literal($$[$0]));
break;
case 33:this.$ = $$[$0];
break;
case 34:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Literal($$[$0]));
break;
case 35:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Literal($$[$0]));
break;
case 36:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Literal($$[$0]));
break;
case 37:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Undefined);
break;
case 38:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Null);
break;
case 39:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Bool($$[$0]));
break;
case 40:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Assign($$[$0-2], $$[$0]));
break;
case 41:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.Assign($$[$0-3], $$[$0]));
break;
case 42:this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Assign($$[$0-4], $$[$0-1]));
break;
case 43:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Value($$[$0]));
break;
case 44:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Assign(yy.addLocationDataFn(_$[$0-2])(new yy.Value($$[$0-2])), $$[$0], 'object'));
break;
case 45:this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Assign(yy.addLocationDataFn(_$[$0-4])(new yy.Value($$[$0-4])), $$[$0-1], 'object'));
break;
case 46:this.$ = $$[$0];
break;
case 47:this.$ = $$[$0];
break;
case 48:this.$ = $$[$0];
break;
case 49:this.$ = $$[$0];
break;
case 50:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Return($$[$0]));
break;
case 51:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Return);
break;
case 52:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Comment($$[$0]));
break;
case 53:this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Code($$[$0-3], $$[$0], $$[$0-1]));
break;
case 54:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Code([], $$[$0], $$[$0-1]));
break;
case 55:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])('func');
break;
case 56:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])('boundfunc');
break;
case 57:this.$ = $$[$0];
break;
case 58:this.$ = $$[$0];
break;
case 59:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])([]);
break;
case 60:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])([$$[$0]]);
break;
case 61:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])($$[$0-2].concat($$[$0]));
break;
case 62:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])($$[$0-3].concat($$[$0]));
break;
case 63:this.$ = yy.addLocationDataFn(_$[$0-5], _$[$0])($$[$0-5].concat($$[$0-2]));
break;
case 64:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Param($$[$0]));
break;
case 65:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Param($$[$0-1], null, true));
break;
case 66:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Param($$[$0-2], $$[$0]));
break;
case 67:this.$ = $$[$0];
break;
case 68:this.$ = $$[$0];
break;
case 69:this.$ = $$[$0];
break;
case 70:this.$ = $$[$0];
break;
case 71:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Splat($$[$0-1]));
break;
case 72:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Value($$[$0]));
break;
case 73:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])($$[$0-1].add($$[$0]));
break;
case 74:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Value($$[$0-1], [].concat($$[$0])));
break;
case 75:this.$ = $$[$0];
break;
case 76:this.$ = $$[$0];
break;
case 77:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Value($$[$0]));
break;
case 78:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Value($$[$0]));
break;
case 79:this.$ = $$[$0];
break;
case 80:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Value($$[$0]));
break;
case 81:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Value($$[$0]));
break;
case 82:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Value($$[$0]));
break;
case 83:this.$ = $$[$0];
break;
case 84:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Access($$[$0]));
break;
case 85:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Access($$[$0], 'soak'));
break;
case 86:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])([yy.addLocationDataFn(_$[$0-1])(new yy.Access(new yy.Literal('prototype'))), yy.addLocationDataFn(_$[$0])(new yy.Access($$[$0]))]);
break;
case 87:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])([yy.addLocationDataFn(_$[$0-1])(new yy.Access(new yy.Literal('prototype'), 'soak')), yy.addLocationDataFn(_$[$0])(new yy.Access($$[$0]))]);
break;
case 88:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Access(new yy.Literal('prototype')));
break;
case 89:this.$ = $$[$0];
break;
case 90:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])($$[$0-1]);
break;
case 91:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(yy.extend($$[$0], {
          soak: true
        }));
break;
case 92:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Index($$[$0]));
break;
case 93:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Slice($$[$0]));
break;
case 94:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.Obj($$[$0-2], $$[$0-3].generated));
break;
case 95:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])([]);
break;
case 96:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])([$$[$0]]);
break;
case 97:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])($$[$0-2].concat($$[$0]));
break;
case 98:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])($$[$0-3].concat($$[$0]));
break;
case 99:this.$ = yy.addLocationDataFn(_$[$0-5], _$[$0])($$[$0-5].concat($$[$0-2]));
break;
case 100:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Class);
break;
case 101:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Class(null, null, $$[$0]));
break;
case 102:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Class(null, $$[$0]));
break;
case 103:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.Class(null, $$[$0-1], $$[$0]));
break;
case 104:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Class($$[$0]));
break;
case 105:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Class($$[$0-1], null, $$[$0]));
break;
case 106:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.Class($$[$0-2], $$[$0]));
break;
case 107:this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Class($$[$0-3], $$[$0-1], $$[$0]));
break;
case 108:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.InlineWorker($$[$0]));
break;
case 109:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.InlineWorker($$[$0-1], $$[$0]));
break;
case 110:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.SceneClass($$[$0]));
break;
case 111:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.SceneClass($$[$0-1], $$[$0]));
break;
case 112:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.ModelClass($$[$0]));
break;
case 113:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.ModelClass($$[$0-1], $$[$0]));
break;
case 114:this.$ = yy.addLocationDataFn(_$[$0-6], _$[$0])(new yy.Shader($$[$0-5], new yy.Literal($$[$0-3]), new yy.Literal($$[$0-1])));
break;
case 115:this.$ = yy.addLocationDataFn(_$[$0-7], _$[$0])(new yy.Shader($$[$0-5], new yy.Literal($$[$0-3]), new yy.Literal($$[$0-1]), $$[$0-6]));
break;
case 116:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Call($$[$0-2], $$[$0], $$[$0-1]));
break;
case 117:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Call($$[$0-2], $$[$0], $$[$0-1]));
break;
case 118:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Call('super', [new yy.Splat(new yy.Literal('arguments'))]));
break;
case 119:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Call('super', $$[$0]));
break;
case 120:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(false);
break;
case 121:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(true);
break;
case 122:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])([]);
break;
case 123:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])($$[$0-2]);
break;
case 124:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Value(new yy.Literal('this')));
break;
case 125:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Value(new yy.Literal('this')));
break;
case 126:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Value(yy.addLocationDataFn(_$[$0-1])(new yy.Literal('this')), [yy.addLocationDataFn(_$[$0])(new yy.Access($$[$0]))], 'this'));
break;
case 127:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Arr([]));
break;
case 128:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.Arr($$[$0-2]));
break;
case 129:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.MatVec([], $$[$0-2]));
break;
case 130:this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.MatVec($$[$0-2], $$[$0-4]));
break;
case 131:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])('inclusive');
break;
case 132:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])('exclusive');
break;
case 133:this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Range($$[$0-3], $$[$0-1], $$[$0-2]));
break;
case 134:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Range($$[$0-2], $$[$0], $$[$0-1]));
break;
case 135:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Range($$[$0-1], null, $$[$0]));
break;
case 136:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Range(null, $$[$0], $$[$0-1]));
break;
case 137:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Range(null, null, $$[$0]));
break;
case 138:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])([$$[$0]]);
break;
case 139:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])($$[$0-2].concat($$[$0]));
break;
case 140:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])($$[$0-3].concat($$[$0]));
break;
case 141:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])($$[$0-2]);
break;
case 142:this.$ = yy.addLocationDataFn(_$[$0-5], _$[$0])($$[$0-5].concat($$[$0-2]));
break;
case 143:this.$ = $$[$0];
break;
case 144:this.$ = $$[$0];
break;
case 145:this.$ = $$[$0];
break;
case 146:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])([].concat($$[$0-2], $$[$0]));
break;
case 147:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Try($$[$0]));
break;
case 148:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Try($$[$0-1], $$[$0][0], $$[$0][1]));
break;
case 149:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.Try($$[$0-2], null, null, $$[$0]));
break;
case 150:this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Try($$[$0-3], $$[$0-2][0], $$[$0-2][1], $$[$0]));
break;
case 151:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])([$$[$0-1], $$[$0]]);
break;
case 152:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])([yy.addLocationDataFn(_$[$0-1])(new yy.Value($$[$0-1])), $$[$0]]);
break;
case 153:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])([null, $$[$0]]);
break;
case 154:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Throw($$[$0]));
break;
case 155:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Parens($$[$0-1]));
break;
case 156:this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Parens($$[$0-2]));
break;
case 157:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.While($$[$0]));
break;
case 158:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.While($$[$0-2], {
          guard: $$[$0]
        }));
break;
case 159:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.While($$[$0], {
          invert: true
        }));
break;
case 160:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.While($$[$0-2], {
          invert: true,
          guard: $$[$0]
        }));
break;
case 161:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])($$[$0-1].addBody($$[$0]));
break;
case 162:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])($$[$0].addBody(yy.addLocationDataFn(_$[$0-1])(yy.Block.wrap([$$[$0-1]]))));
break;
case 163:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])($$[$0].addBody(yy.addLocationDataFn(_$[$0-1])(yy.Block.wrap([$$[$0-1]]))));
break;
case 164:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])($$[$0]);
break;
case 165:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.While(yy.addLocationDataFn(_$[$0-1])(new yy.Literal('true'))).addBody($$[$0]));
break;
case 166:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.While(yy.addLocationDataFn(_$[$0-1])(new yy.Literal('true'))).addBody(yy.addLocationDataFn(_$[$0])(yy.Block.wrap([$$[$0]]))));
break;
case 167:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.For($$[$0-1], $$[$0]));
break;
case 168:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.For($$[$0-1], $$[$0]));
break;
case 169:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.For($$[$0], $$[$0-1]));
break;
case 170:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])({
          source: yy.addLocationDataFn(_$[$0])(new yy.Value($$[$0]))
        });
break;
case 171:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])((function () {
        $$[$0].own = $$[$0-1].own;
        $$[$0].name = $$[$0-1][0];
        $$[$0].index = $$[$0-1][1];
        return $$[$0];
      }()));
break;
case 172:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])($$[$0]);
break;
case 173:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])((function () {
        $$[$0].own = true;
        return $$[$0];
      }()));
break;
case 174:this.$ = $$[$0];
break;
case 175:this.$ = $$[$0];
break;
case 176:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Value($$[$0]));
break;
case 177:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Value($$[$0]));
break;
case 178:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])([$$[$0]]);
break;
case 179:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])([$$[$0-2], $$[$0]]);
break;
case 180:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])({
          source: $$[$0]
        });
break;
case 181:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])({
          source: $$[$0],
          object: true
        });
break;
case 182:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])({
          source: $$[$0-2],
          guard: $$[$0]
        });
break;
case 183:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])({
          source: $$[$0-2],
          guard: $$[$0],
          object: true
        });
break;
case 184:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])({
          source: $$[$0-2],
          step: $$[$0]
        });
break;
case 185:this.$ = yy.addLocationDataFn(_$[$0-5], _$[$0])({
          source: $$[$0-4],
          guard: $$[$0-2],
          step: $$[$0]
        });
break;
case 186:this.$ = yy.addLocationDataFn(_$[$0-5], _$[$0])({
          source: $$[$0-4],
          step: $$[$0-2],
          guard: $$[$0]
        });
break;
case 187:this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Switch($$[$0-3], $$[$0-1]));
break;
case 188:this.$ = yy.addLocationDataFn(_$[$0-6], _$[$0])(new yy.Switch($$[$0-5], $$[$0-3], $$[$0-1]));
break;
case 189:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.Switch(null, $$[$0-1]));
break;
case 190:this.$ = yy.addLocationDataFn(_$[$0-5], _$[$0])(new yy.Switch(null, $$[$0-3], $$[$0-1]));
break;
case 191:this.$ = $$[$0];
break;
case 192:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])($$[$0-1].concat($$[$0]));
break;
case 193:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])([[$$[$0-1], $$[$0]]]);
break;
case 194:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])([[$$[$0-2], $$[$0-1]]]);
break;
case 195:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.If($$[$0-1], $$[$0], {
          type: $$[$0-2]
        }));
break;
case 196:this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])($$[$0-4].addElse(new yy.If($$[$0-1], $$[$0], {
          type: $$[$0-2]
        })));
break;
case 197:this.$ = $$[$0];
break;
case 198:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])($$[$0-2].addElse($$[$0]));
break;
case 199:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.If($$[$0], yy.addLocationDataFn(_$[$0-2])(yy.Block.wrap([$$[$0-2]])), {
          type: $$[$0-1],
          statement: true
        }));
break;
case 200:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.If($$[$0], yy.addLocationDataFn(_$[$0-2])(yy.Block.wrap([$$[$0-2]])), {
          type: $$[$0-1],
          statement: true
        }));
break;
case 201:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Op($$[$0-1], $$[$0]));
break;
case 202:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Op('-', $$[$0]));
break;
case 203:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Op('+', $$[$0]));
break;
case 204:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Op('--', $$[$0]));
break;
case 205:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Op('++', $$[$0]));
break;
case 206:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Op('--', $$[$0-1], null, true));
break;
case 207:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Op('++', $$[$0-1], null, true));
break;
case 208:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.Existence($$[$0-1]));
break;
case 209:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Op('+', $$[$0-2], $$[$0]));
break;
case 210:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Op('-', $$[$0-2], $$[$0]));
break;
case 211:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Op($$[$0-1], $$[$0-2], $$[$0]));
break;
case 212:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Op($$[$0-1], $$[$0-2], $$[$0]));
break;
case 213:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Op($$[$0-1], $$[$0-2], $$[$0]));
break;
case 214:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Op($$[$0-1], $$[$0-2], $$[$0]));
break;
case 215:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Op($$[$0-1], $$[$0-2], $$[$0]));
break;
case 216:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])((function () {
        if ($$[$0-1].charAt(0) === '!') {
          return new yy.Op($$[$0-1].slice(1), $$[$0-2], $$[$0]).invert();
        } else {
          return new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
        }
      }()));
break;
case 217:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Assign($$[$0-2], $$[$0], $$[$0-1]));
break;
case 218:this.$ = yy.addLocationDataFn(_$[$0-4], _$[$0])(new yy.Assign($$[$0-4], $$[$0-1], $$[$0-3]));
break;
case 219:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.Assign($$[$0-3], $$[$0], $$[$0-2]));
break;
case 220:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.Extends($$[$0-2], $$[$0]));
break;
}
},
table: [{1:[2,1],3:1,4:2,5:3,7:4,8:6,9:7,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:[1,5],31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{1:[3]},{1:[2,2],6:[1,83]},{6:[1,84]},{1:[2,4],6:[2,4],30:[2,4],111:[2,4]},{4:86,7:4,8:6,9:7,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,30:[1,85],31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{1:[2,7],6:[2,7],30:[2,7],111:[2,7],112:97,113:[1,73],115:[1,74],118:98,119:[1,76],120:77,135:[1,96],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{1:[2,8],6:[2,8],30:[2,8],111:[2,8],112:100,113:[1,73],115:[1,74],118:101,119:[1,76],120:77,135:[1,99]},{1:[2,12],6:[2,12],29:[2,12],30:[2,12],53:[2,12],58:[2,12],61:[2,12],66:103,70:[1,105],71:[1,106],72:[1,107],73:[1,108],74:109,75:[1,110],77:[2,12],78:[1,111],82:[2,12],89:102,92:[1,104],93:[2,120],94:[2,12],99:[2,12],102:[2,12],111:[2,12],113:[2,12],114:[2,12],115:[2,12],119:[2,12],127:[2,12],135:[2,12],137:[2,12],138:[2,12],141:[2,12],142:[2,12],143:[2,12],144:[2,12],145:[2,12],146:[2,12],147:[2,12]},{1:[2,13],6:[2,13],29:[2,13],30:[2,13],53:[2,13],58:[2,13],61:[2,13],66:113,70:[1,105],71:[1,106],72:[1,107],73:[1,108],74:109,75:[1,110],77:[2,13],78:[1,111],82:[2,13],89:112,92:[1,104],93:[2,120],94:[2,13],99:[2,13],102:[2,13],111:[2,13],113:[2,13],114:[2,13],115:[2,13],119:[2,13],127:[2,13],135:[2,13],137:[2,13],138:[2,13],141:[2,13],142:[2,13],143:[2,13],144:[2,13],145:[2,13],146:[2,13],147:[2,13]},{1:[2,14],6:[2,14],29:[2,14],30:[2,14],53:[2,14],58:[2,14],61:[2,14],77:[2,14],82:[2,14],94:[2,14],99:[2,14],102:[2,14],111:[2,14],113:[2,14],114:[2,14],115:[2,14],119:[2,14],127:[2,14],135:[2,14],137:[2,14],138:[2,14],141:[2,14],142:[2,14],143:[2,14],144:[2,14],145:[2,14],146:[2,14],147:[2,14]},{1:[2,15],6:[2,15],29:[2,15],30:[2,15],53:[2,15],58:[2,15],61:[2,15],77:[2,15],82:[2,15],94:[2,15],99:[2,15],102:[2,15],111:[2,15],113:[2,15],114:[2,15],115:[2,15],119:[2,15],127:[2,15],135:[2,15],137:[2,15],138:[2,15],141:[2,15],142:[2,15],143:[2,15],144:[2,15],145:[2,15],146:[2,15],147:[2,15]},{1:[2,16],6:[2,16],29:[2,16],30:[2,16],53:[2,16],58:[2,16],61:[2,16],77:[2,16],82:[2,16],94:[2,16],99:[2,16],102:[2,16],111:[2,16],113:[2,16],114:[2,16],115:[2,16],119:[2,16],127:[2,16],135:[2,16],137:[2,16],138:[2,16],141:[2,16],142:[2,16],143:[2,16],144:[2,16],145:[2,16],146:[2,16],147:[2,16]},{1:[2,17],6:[2,17],29:[2,17],30:[2,17],53:[2,17],58:[2,17],61:[2,17],77:[2,17],82:[2,17],94:[2,17],99:[2,17],102:[2,17],111:[2,17],113:[2,17],114:[2,17],115:[2,17],119:[2,17],127:[2,17],135:[2,17],137:[2,17],138:[2,17],141:[2,17],142:[2,17],143:[2,17],144:[2,17],145:[2,17],146:[2,17],147:[2,17]},{1:[2,18],6:[2,18],29:[2,18],30:[2,18],53:[2,18],58:[2,18],61:[2,18],77:[2,18],82:[2,18],94:[2,18],99:[2,18],102:[2,18],111:[2,18],113:[2,18],114:[2,18],115:[2,18],119:[2,18],127:[2,18],135:[2,18],137:[2,18],138:[2,18],141:[2,18],142:[2,18],143:[2,18],144:[2,18],145:[2,18],146:[2,18],147:[2,18]},{1:[2,19],6:[2,19],29:[2,19],30:[2,19],53:[2,19],58:[2,19],61:[2,19],77:[2,19],82:[2,19],94:[2,19],99:[2,19],102:[2,19],111:[2,19],113:[2,19],114:[2,19],115:[2,19],119:[2,19],127:[2,19],135:[2,19],137:[2,19],138:[2,19],141:[2,19],142:[2,19],143:[2,19],144:[2,19],145:[2,19],146:[2,19],147:[2,19]},{1:[2,20],6:[2,20],29:[2,20],30:[2,20],53:[2,20],58:[2,20],61:[2,20],77:[2,20],82:[2,20],94:[2,20],99:[2,20],102:[2,20],111:[2,20],113:[2,20],114:[2,20],115:[2,20],119:[2,20],127:[2,20],135:[2,20],137:[2,20],138:[2,20],141:[2,20],142:[2,20],143:[2,20],144:[2,20],145:[2,20],146:[2,20],147:[2,20]},{1:[2,21],6:[2,21],29:[2,21],30:[2,21],53:[2,21],58:[2,21],61:[2,21],77:[2,21],82:[2,21],94:[2,21],99:[2,21],102:[2,21],111:[2,21],113:[2,21],114:[2,21],115:[2,21],119:[2,21],127:[2,21],135:[2,21],137:[2,21],138:[2,21],141:[2,21],142:[2,21],143:[2,21],144:[2,21],145:[2,21],146:[2,21],147:[2,21]},{1:[2,22],6:[2,22],29:[2,22],30:[2,22],53:[2,22],58:[2,22],61:[2,22],77:[2,22],82:[2,22],94:[2,22],99:[2,22],102:[2,22],111:[2,22],113:[2,22],114:[2,22],115:[2,22],119:[2,22],127:[2,22],135:[2,22],137:[2,22],138:[2,22],141:[2,22],142:[2,22],143:[2,22],144:[2,22],145:[2,22],146:[2,22],147:[2,22]},{1:[2,23],6:[2,23],29:[2,23],30:[2,23],53:[2,23],58:[2,23],61:[2,23],77:[2,23],82:[2,23],94:[2,23],99:[2,23],102:[2,23],111:[2,23],113:[2,23],114:[2,23],115:[2,23],119:[2,23],127:[2,23],135:[2,23],137:[2,23],138:[2,23],141:[2,23],142:[2,23],143:[2,23],144:[2,23],145:[2,23],146:[2,23],147:[2,23]},{1:[2,24],6:[2,24],29:[2,24],30:[2,24],53:[2,24],58:[2,24],61:[2,24],77:[2,24],82:[2,24],94:[2,24],99:[2,24],102:[2,24],111:[2,24],113:[2,24],114:[2,24],115:[2,24],119:[2,24],127:[2,24],135:[2,24],137:[2,24],138:[2,24],141:[2,24],142:[2,24],143:[2,24],144:[2,24],145:[2,24],146:[2,24],147:[2,24]},{1:[2,25],6:[2,25],29:[2,25],30:[2,25],53:[2,25],58:[2,25],61:[2,25],77:[2,25],82:[2,25],94:[2,25],99:[2,25],102:[2,25],111:[2,25],113:[2,25],114:[2,25],115:[2,25],119:[2,25],127:[2,25],135:[2,25],137:[2,25],138:[2,25],141:[2,25],142:[2,25],143:[2,25],144:[2,25],145:[2,25],146:[2,25],147:[2,25]},{1:[2,26],6:[2,26],29:[2,26],30:[2,26],53:[2,26],58:[2,26],61:[2,26],77:[2,26],82:[2,26],94:[2,26],99:[2,26],102:[2,26],111:[2,26],113:[2,26],114:[2,26],115:[2,26],119:[2,26],127:[2,26],135:[2,26],137:[2,26],138:[2,26],141:[2,26],142:[2,26],143:[2,26],144:[2,26],145:[2,26],146:[2,26],147:[2,26]},{1:[2,27],6:[2,27],29:[2,27],30:[2,27],53:[2,27],58:[2,27],61:[2,27],77:[2,27],82:[2,27],94:[2,27],99:[2,27],102:[2,27],111:[2,27],113:[2,27],114:[2,27],115:[2,27],119:[2,27],127:[2,27],135:[2,27],137:[2,27],138:[2,27],141:[2,27],142:[2,27],143:[2,27],144:[2,27],145:[2,27],146:[2,27],147:[2,27]},{1:[2,9],6:[2,9],30:[2,9],111:[2,9],113:[2,9],115:[2,9],119:[2,9],135:[2,9]},{1:[2,10],6:[2,10],30:[2,10],111:[2,10],113:[2,10],115:[2,10],119:[2,10],135:[2,10]},{1:[2,11],6:[2,11],30:[2,11],111:[2,11],113:[2,11],115:[2,11],119:[2,11],135:[2,11]},{1:[2,79],6:[2,79],29:[2,79],30:[2,79],44:[1,114],53:[2,79],58:[2,79],61:[2,79],70:[2,79],71:[2,79],72:[2,79],73:[2,79],75:[2,79],77:[2,79],78:[2,79],82:[2,79],92:[2,79],93:[2,79],94:[2,79],99:[2,79],102:[2,79],111:[2,79],113:[2,79],114:[2,79],115:[2,79],119:[2,79],127:[2,79],135:[2,79],137:[2,79],138:[2,79],141:[2,79],142:[2,79],143:[2,79],144:[2,79],145:[2,79],146:[2,79],147:[2,79]},{1:[2,80],6:[2,80],29:[2,80],30:[2,80],53:[2,80],58:[2,80],61:[2,80],70:[2,80],71:[2,80],72:[2,80],73:[2,80],75:[2,80],77:[2,80],78:[2,80],82:[2,80],92:[2,80],93:[2,80],94:[2,80],99:[2,80],102:[2,80],111:[2,80],113:[2,80],114:[2,80],115:[2,80],119:[2,80],127:[2,80],135:[2,80],137:[2,80],138:[2,80],141:[2,80],142:[2,80],143:[2,80],144:[2,80],145:[2,80],146:[2,80],147:[2,80]},{1:[2,81],6:[2,81],29:[2,81],30:[2,81],53:[2,81],58:[2,81],61:[2,81],70:[2,81],71:[2,81],72:[2,81],73:[2,81],75:[2,81],77:[2,81],78:[2,81],82:[2,81],92:[2,81],93:[2,81],94:[2,81],99:[2,81],102:[2,81],111:[2,81],113:[2,81],114:[2,81],115:[2,81],119:[2,81],127:[2,81],135:[2,81],137:[2,81],138:[2,81],141:[2,81],142:[2,81],143:[2,81],144:[2,81],145:[2,81],146:[2,81],147:[2,81]},{1:[2,82],6:[2,82],29:[2,82],30:[2,82],53:[2,82],58:[2,82],61:[2,82],70:[2,82],71:[2,82],72:[2,82],73:[2,82],75:[2,82],77:[2,82],78:[2,82],82:[2,82],92:[2,82],93:[2,82],94:[2,82],99:[2,82],102:[2,82],111:[2,82],113:[2,82],114:[2,82],115:[2,82],119:[2,82],127:[2,82],135:[2,82],137:[2,82],138:[2,82],141:[2,82],142:[2,82],143:[2,82],144:[2,82],145:[2,82],146:[2,82],147:[2,82]},{1:[2,83],6:[2,83],29:[2,83],30:[2,83],53:[2,83],58:[2,83],61:[2,83],70:[2,83],71:[2,83],72:[2,83],73:[2,83],75:[2,83],77:[2,83],78:[2,83],82:[2,83],92:[2,83],93:[2,83],94:[2,83],99:[2,83],102:[2,83],111:[2,83],113:[2,83],114:[2,83],115:[2,83],119:[2,83],127:[2,83],135:[2,83],137:[2,83],138:[2,83],141:[2,83],142:[2,83],143:[2,83],144:[2,83],145:[2,83],146:[2,83],147:[2,83]},{1:[2,118],6:[2,118],29:[2,118],30:[2,118],53:[2,118],58:[2,118],61:[2,118],70:[2,118],71:[2,118],72:[2,118],73:[2,118],75:[2,118],77:[2,118],78:[2,118],82:[2,118],90:115,92:[2,118],93:[1,116],94:[2,118],99:[2,118],102:[2,118],111:[2,118],113:[2,118],114:[2,118],115:[2,118],119:[2,118],127:[2,118],135:[2,118],137:[2,118],138:[2,118],141:[2,118],142:[2,118],143:[2,118],144:[2,118],145:[2,118],146:[2,118],147:[2,118]},{6:[2,59],29:[2,59],31:120,32:[1,82],48:121,52:117,53:[2,59],58:[2,59],59:118,60:119,62:122,63:123,80:[1,79],97:[1,124],98:[1,125],100:[1,78]},{5:126,29:[1,5]},{8:127,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{8:129,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{8:130,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{13:132,14:133,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:134,48:71,62:55,63:56,65:131,67:29,68:30,69:31,80:[1,79],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],110:[1,64]},{13:132,14:133,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:134,48:71,62:55,63:56,65:135,67:29,68:30,69:31,80:[1,79],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],110:[1,64]},{1:[2,76],6:[2,76],29:[2,76],30:[2,76],44:[2,76],53:[2,76],58:[2,76],61:[2,76],70:[2,76],71:[2,76],72:[2,76],73:[2,76],75:[2,76],77:[2,76],78:[2,76],82:[2,76],84:[1,139],92:[2,76],93:[2,76],94:[2,76],99:[2,76],102:[2,76],111:[2,76],113:[2,76],114:[2,76],115:[2,76],119:[2,76],127:[2,76],135:[2,76],137:[2,76],138:[2,76],139:[1,136],140:[1,137],141:[2,76],142:[2,76],143:[2,76],144:[2,76],145:[2,76],146:[2,76],147:[2,76],148:[1,138]},{1:[2,197],6:[2,197],29:[2,197],30:[2,197],53:[2,197],58:[2,197],61:[2,197],77:[2,197],82:[2,197],94:[2,197],99:[2,197],102:[2,197],111:[2,197],113:[2,197],114:[2,197],115:[2,197],119:[2,197],127:[2,197],130:[1,140],135:[2,197],137:[2,197],138:[2,197],141:[2,197],142:[2,197],143:[2,197],144:[2,197],145:[2,197],146:[2,197],147:[2,197]},{5:141,29:[1,5]},{5:142,29:[1,5]},{1:[2,164],6:[2,164],29:[2,164],30:[2,164],53:[2,164],58:[2,164],61:[2,164],77:[2,164],82:[2,164],94:[2,164],99:[2,164],102:[2,164],111:[2,164],113:[2,164],114:[2,164],115:[2,164],119:[2,164],127:[2,164],135:[2,164],137:[2,164],138:[2,164],141:[2,164],142:[2,164],143:[2,164],144:[2,164],145:[2,164],146:[2,164],147:[2,164]},{5:143,29:[1,5]},{8:144,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:[1,145],31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{1:[2,100],5:146,6:[2,100],13:132,14:133,29:[1,5],30:[2,100],31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:134,48:71,53:[2,100],58:[2,100],61:[2,100],62:55,63:56,65:148,67:29,68:30,69:31,77:[2,100],80:[1,79],82:[2,100],84:[1,147],91:[1,32],94:[2,100],96:[1,66],97:[1,67],98:[1,65],99:[2,100],100:[1,78],102:[2,100],110:[1,64],111:[2,100],113:[2,100],114:[2,100],115:[2,100],119:[2,100],127:[2,100],135:[2,100],137:[2,100],138:[2,100],141:[2,100],142:[2,100],143:[2,100],144:[2,100],145:[2,100],146:[2,100],147:[2,100]},{13:132,14:133,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:134,48:71,62:55,63:56,65:149,67:29,68:30,69:31,80:[1,79],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],110:[1,64]},{13:132,14:133,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:134,48:71,62:55,63:56,65:150,67:29,68:30,69:31,80:[1,79],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],110:[1,64]},{13:132,14:133,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:134,48:71,62:55,63:56,65:151,67:29,68:30,69:31,80:[1,79],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],110:[1,64]},{13:132,14:133,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:134,48:71,62:55,63:153,65:152,67:29,68:30,69:31,80:[1,79],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],110:[1,64]},{8:154,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{1:[2,51],6:[2,51],8:155,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,30:[2,51],31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],111:[2,51],112:43,113:[2,51],115:[2,51],116:44,117:[1,75],118:45,119:[2,51],120:77,128:[1,46],133:41,134:[1,72],135:[2,51],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{1:[2,52],6:[2,52],29:[2,52],30:[2,52],58:[2,52],82:[2,52],111:[2,52],113:[2,52],115:[2,52],119:[2,52],135:[2,52]},{1:[2,77],6:[2,77],29:[2,77],30:[2,77],44:[2,77],53:[2,77],58:[2,77],61:[2,77],70:[2,77],71:[2,77],72:[2,77],73:[2,77],75:[2,77],77:[2,77],78:[2,77],82:[2,77],92:[2,77],93:[2,77],94:[2,77],99:[2,77],102:[2,77],111:[2,77],113:[2,77],114:[2,77],115:[2,77],119:[2,77],127:[2,77],135:[2,77],137:[2,77],138:[2,77],141:[2,77],142:[2,77],143:[2,77],144:[2,77],145:[2,77],146:[2,77],147:[2,77]},{1:[2,78],6:[2,78],29:[2,78],30:[2,78],44:[2,78],53:[2,78],58:[2,78],61:[2,78],70:[2,78],71:[2,78],72:[2,78],73:[2,78],75:[2,78],77:[2,78],78:[2,78],82:[2,78],92:[2,78],93:[2,78],94:[2,78],99:[2,78],102:[2,78],111:[2,78],113:[2,78],114:[2,78],115:[2,78],119:[2,78],127:[2,78],135:[2,78],137:[2,78],138:[2,78],141:[2,78],142:[2,78],143:[2,78],144:[2,78],145:[2,78],146:[2,78],147:[2,78]},{1:[2,33],6:[2,33],29:[2,33],30:[2,33],53:[2,33],58:[2,33],61:[2,33],70:[2,33],71:[2,33],72:[2,33],73:[2,33],75:[2,33],77:[2,33],78:[2,33],82:[2,33],92:[2,33],93:[2,33],94:[2,33],99:[2,33],102:[2,33],111:[2,33],113:[2,33],114:[2,33],115:[2,33],119:[2,33],127:[2,33],135:[2,33],137:[2,33],138:[2,33],141:[2,33],142:[2,33],143:[2,33],144:[2,33],145:[2,33],146:[2,33],147:[2,33]},{1:[2,34],6:[2,34],29:[2,34],30:[2,34],53:[2,34],58:[2,34],61:[2,34],70:[2,34],71:[2,34],72:[2,34],73:[2,34],75:[2,34],77:[2,34],78:[2,34],82:[2,34],92:[2,34],93:[2,34],94:[2,34],99:[2,34],102:[2,34],111:[2,34],113:[2,34],114:[2,34],115:[2,34],119:[2,34],127:[2,34],135:[2,34],137:[2,34],138:[2,34],141:[2,34],142:[2,34],143:[2,34],144:[2,34],145:[2,34],146:[2,34],147:[2,34]},{1:[2,35],6:[2,35],29:[2,35],30:[2,35],53:[2,35],58:[2,35],61:[2,35],70:[2,35],71:[2,35],72:[2,35],73:[2,35],75:[2,35],77:[2,35],78:[2,35],82:[2,35],92:[2,35],93:[2,35],94:[2,35],99:[2,35],102:[2,35],111:[2,35],113:[2,35],114:[2,35],115:[2,35],119:[2,35],127:[2,35],135:[2,35],137:[2,35],138:[2,35],141:[2,35],142:[2,35],143:[2,35],144:[2,35],145:[2,35],146:[2,35],147:[2,35]},{1:[2,36],6:[2,36],29:[2,36],30:[2,36],53:[2,36],58:[2,36],61:[2,36],70:[2,36],71:[2,36],72:[2,36],73:[2,36],75:[2,36],77:[2,36],78:[2,36],82:[2,36],92:[2,36],93:[2,36],94:[2,36],99:[2,36],102:[2,36],111:[2,36],113:[2,36],114:[2,36],115:[2,36],119:[2,36],127:[2,36],135:[2,36],137:[2,36],138:[2,36],141:[2,36],142:[2,36],143:[2,36],144:[2,36],145:[2,36],146:[2,36],147:[2,36]},{1:[2,37],6:[2,37],29:[2,37],30:[2,37],53:[2,37],58:[2,37],61:[2,37],70:[2,37],71:[2,37],72:[2,37],73:[2,37],75:[2,37],77:[2,37],78:[2,37],82:[2,37],92:[2,37],93:[2,37],94:[2,37],99:[2,37],102:[2,37],111:[2,37],113:[2,37],114:[2,37],115:[2,37],119:[2,37],127:[2,37],135:[2,37],137:[2,37],138:[2,37],141:[2,37],142:[2,37],143:[2,37],144:[2,37],145:[2,37],146:[2,37],147:[2,37]},{1:[2,38],6:[2,38],29:[2,38],30:[2,38],53:[2,38],58:[2,38],61:[2,38],70:[2,38],71:[2,38],72:[2,38],73:[2,38],75:[2,38],77:[2,38],78:[2,38],82:[2,38],92:[2,38],93:[2,38],94:[2,38],99:[2,38],102:[2,38],111:[2,38],113:[2,38],114:[2,38],115:[2,38],119:[2,38],127:[2,38],135:[2,38],137:[2,38],138:[2,38],141:[2,38],142:[2,38],143:[2,38],144:[2,38],145:[2,38],146:[2,38],147:[2,38]},{1:[2,39],6:[2,39],29:[2,39],30:[2,39],53:[2,39],58:[2,39],61:[2,39],70:[2,39],71:[2,39],72:[2,39],73:[2,39],75:[2,39],77:[2,39],78:[2,39],82:[2,39],92:[2,39],93:[2,39],94:[2,39],99:[2,39],102:[2,39],111:[2,39],113:[2,39],114:[2,39],115:[2,39],119:[2,39],127:[2,39],135:[2,39],137:[2,39],138:[2,39],141:[2,39],142:[2,39],143:[2,39],144:[2,39],145:[2,39],146:[2,39],147:[2,39]},{4:156,7:4,8:6,9:7,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:[1,157],31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{8:158,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:[1,162],31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,64:163,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],95:160,96:[1,66],97:[1,67],98:[1,65],99:[1,159],100:[1,78],103:161,105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{1:[2,124],6:[2,124],29:[2,124],30:[2,124],53:[2,124],58:[2,124],61:[2,124],70:[2,124],71:[2,124],72:[2,124],73:[2,124],75:[2,124],77:[2,124],78:[2,124],82:[2,124],92:[2,124],93:[2,124],94:[2,124],99:[2,124],102:[2,124],111:[2,124],113:[2,124],114:[2,124],115:[2,124],119:[2,124],127:[2,124],135:[2,124],137:[2,124],138:[2,124],141:[2,124],142:[2,124],143:[2,124],144:[2,124],145:[2,124],146:[2,124],147:[2,124]},{1:[2,125],6:[2,125],29:[2,125],30:[2,125],31:164,32:[1,82],53:[2,125],58:[2,125],61:[2,125],70:[2,125],71:[2,125],72:[2,125],73:[2,125],75:[2,125],77:[2,125],78:[2,125],82:[2,125],92:[2,125],93:[2,125],94:[2,125],99:[2,125],102:[2,125],111:[2,125],113:[2,125],114:[2,125],115:[2,125],119:[2,125],127:[2,125],135:[2,125],137:[2,125],138:[2,125],141:[2,125],142:[2,125],143:[2,125],144:[2,125],145:[2,125],146:[2,125],147:[2,125]},{29:[2,55]},{29:[2,56]},{1:[2,72],6:[2,72],29:[2,72],30:[2,72],44:[2,72],53:[2,72],58:[2,72],61:[2,72],70:[2,72],71:[2,72],72:[2,72],73:[2,72],75:[2,72],77:[2,72],78:[2,72],82:[2,72],84:[2,72],92:[2,72],93:[2,72],94:[2,72],99:[2,72],102:[2,72],111:[2,72],113:[2,72],114:[2,72],115:[2,72],119:[2,72],127:[2,72],135:[2,72],137:[2,72],138:[2,72],139:[2,72],140:[2,72],141:[2,72],142:[2,72],143:[2,72],144:[2,72],145:[2,72],146:[2,72],147:[2,72],148:[2,72]},{1:[2,75],6:[2,75],29:[2,75],30:[2,75],44:[2,75],53:[2,75],58:[2,75],61:[2,75],70:[2,75],71:[2,75],72:[2,75],73:[2,75],75:[2,75],77:[2,75],78:[2,75],82:[2,75],84:[2,75],92:[2,75],93:[2,75],94:[2,75],99:[2,75],102:[2,75],111:[2,75],113:[2,75],114:[2,75],115:[2,75],119:[2,75],127:[2,75],135:[2,75],137:[2,75],138:[2,75],139:[2,75],140:[2,75],141:[2,75],142:[2,75],143:[2,75],144:[2,75],145:[2,75],146:[2,75],147:[2,75],148:[2,75]},{8:165,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{8:166,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{8:167,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{5:168,8:169,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:[1,5],31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{31:174,32:[1,82],48:175,62:176,63:177,68:170,80:[1,79],97:[1,124],98:[1,65],100:[1,78],122:171,123:[1,172],124:173},{121:178,125:[1,179],126:[1,180]},{98:[1,181]},{6:[2,95],11:185,29:[2,95],31:186,32:[1,82],33:187,34:[1,80],35:[1,81],45:183,46:184,48:188,50:[1,54],58:[2,95],81:182,82:[2,95],97:[1,124]},{1:[2,31],6:[2,31],29:[2,31],30:[2,31],47:[2,31],53:[2,31],58:[2,31],61:[2,31],70:[2,31],71:[2,31],72:[2,31],73:[2,31],75:[2,31],77:[2,31],78:[2,31],82:[2,31],92:[2,31],93:[2,31],94:[2,31],99:[2,31],102:[2,31],111:[2,31],113:[2,31],114:[2,31],115:[2,31],119:[2,31],127:[2,31],135:[2,31],137:[2,31],138:[2,31],141:[2,31],142:[2,31],143:[2,31],144:[2,31],145:[2,31],146:[2,31],147:[2,31]},{1:[2,32],6:[2,32],29:[2,32],30:[2,32],47:[2,32],53:[2,32],58:[2,32],61:[2,32],70:[2,32],71:[2,32],72:[2,32],73:[2,32],75:[2,32],77:[2,32],78:[2,32],82:[2,32],92:[2,32],93:[2,32],94:[2,32],99:[2,32],102:[2,32],111:[2,32],113:[2,32],114:[2,32],115:[2,32],119:[2,32],127:[2,32],135:[2,32],137:[2,32],138:[2,32],141:[2,32],142:[2,32],143:[2,32],144:[2,32],145:[2,32],146:[2,32],147:[2,32]},{1:[2,30],6:[2,30],29:[2,30],30:[2,30],44:[2,30],47:[2,30],53:[2,30],58:[2,30],61:[2,30],70:[2,30],71:[2,30],72:[2,30],73:[2,30],75:[2,30],77:[2,30],78:[2,30],82:[2,30],84:[2,30],92:[2,30],93:[2,30],94:[2,30],99:[2,30],102:[2,30],111:[2,30],113:[2,30],114:[2,30],115:[2,30],119:[2,30],125:[2,30],126:[2,30],127:[2,30],135:[2,30],137:[2,30],138:[2,30],139:[2,30],140:[2,30],141:[2,30],142:[2,30],143:[2,30],144:[2,30],145:[2,30],146:[2,30],147:[2,30],148:[2,30]},{1:[2,6],6:[2,6],7:189,8:6,9:7,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,30:[2,6],31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],111:[2,6],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{1:[2,3]},{1:[2,28],6:[2,28],29:[2,28],30:[2,28],53:[2,28],58:[2,28],61:[2,28],77:[2,28],82:[2,28],94:[2,28],99:[2,28],102:[2,28],107:[2,28],108:[2,28],111:[2,28],113:[2,28],114:[2,28],115:[2,28],119:[2,28],127:[2,28],130:[2,28],132:[2,28],135:[2,28],137:[2,28],138:[2,28],141:[2,28],142:[2,28],143:[2,28],144:[2,28],145:[2,28],146:[2,28],147:[2,28]},{6:[1,83],30:[1,190]},{1:[2,208],6:[2,208],29:[2,208],30:[2,208],53:[2,208],58:[2,208],61:[2,208],77:[2,208],82:[2,208],94:[2,208],99:[2,208],102:[2,208],111:[2,208],113:[2,208],114:[2,208],115:[2,208],119:[2,208],127:[2,208],135:[2,208],137:[2,208],138:[2,208],141:[2,208],142:[2,208],143:[2,208],144:[2,208],145:[2,208],146:[2,208],147:[2,208]},{8:191,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{8:192,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{8:193,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{8:194,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{8:195,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{8:196,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{8:197,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{8:198,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{8:199,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{1:[2,163],6:[2,163],29:[2,163],30:[2,163],53:[2,163],58:[2,163],61:[2,163],77:[2,163],82:[2,163],94:[2,163],99:[2,163],102:[2,163],111:[2,163],113:[2,163],114:[2,163],115:[2,163],119:[2,163],127:[2,163],135:[2,163],137:[2,163],138:[2,163],141:[2,163],142:[2,163],143:[2,163],144:[2,163],145:[2,163],146:[2,163],147:[2,163]},{1:[2,168],6:[2,168],29:[2,168],30:[2,168],53:[2,168],58:[2,168],61:[2,168],77:[2,168],82:[2,168],94:[2,168],99:[2,168],102:[2,168],111:[2,168],113:[2,168],114:[2,168],115:[2,168],119:[2,168],127:[2,168],135:[2,168],137:[2,168],138:[2,168],141:[2,168],142:[2,168],143:[2,168],144:[2,168],145:[2,168],146:[2,168],147:[2,168]},{8:200,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{1:[2,162],6:[2,162],29:[2,162],30:[2,162],53:[2,162],58:[2,162],61:[2,162],77:[2,162],82:[2,162],94:[2,162],99:[2,162],102:[2,162],111:[2,162],113:[2,162],114:[2,162],115:[2,162],119:[2,162],127:[2,162],135:[2,162],137:[2,162],138:[2,162],141:[2,162],142:[2,162],143:[2,162],144:[2,162],145:[2,162],146:[2,162],147:[2,162]},{1:[2,167],6:[2,167],29:[2,167],30:[2,167],53:[2,167],58:[2,167],61:[2,167],77:[2,167],82:[2,167],94:[2,167],99:[2,167],102:[2,167],111:[2,167],113:[2,167],114:[2,167],115:[2,167],119:[2,167],127:[2,167],135:[2,167],137:[2,167],138:[2,167],141:[2,167],142:[2,167],143:[2,167],144:[2,167],145:[2,167],146:[2,167],147:[2,167]},{90:201,93:[1,116]},{1:[2,73],6:[2,73],29:[2,73],30:[2,73],44:[2,73],53:[2,73],58:[2,73],61:[2,73],70:[2,73],71:[2,73],72:[2,73],73:[2,73],75:[2,73],77:[2,73],78:[2,73],82:[2,73],84:[2,73],92:[2,73],93:[2,73],94:[2,73],99:[2,73],102:[2,73],111:[2,73],113:[2,73],114:[2,73],115:[2,73],119:[2,73],127:[2,73],135:[2,73],137:[2,73],138:[2,73],139:[2,73],140:[2,73],141:[2,73],142:[2,73],143:[2,73],144:[2,73],145:[2,73],146:[2,73],147:[2,73],148:[2,73]},{93:[2,121]},{31:202,32:[1,82]},{31:203,32:[1,82]},{1:[2,88],6:[2,88],29:[2,88],30:[2,88],31:204,32:[1,82],44:[2,88],53:[2,88],58:[2,88],61:[2,88],70:[2,88],71:[2,88],72:[2,88],73:[2,88],75:[2,88],77:[2,88],78:[2,88],82:[2,88],84:[2,88],92:[2,88],93:[2,88],94:[2,88],99:[2,88],102:[2,88],111:[2,88],113:[2,88],114:[2,88],115:[2,88],119:[2,88],127:[2,88],135:[2,88],137:[2,88],138:[2,88],139:[2,88],140:[2,88],141:[2,88],142:[2,88],143:[2,88],144:[2,88],145:[2,88],146:[2,88],147:[2,88],148:[2,88]},{31:205,32:[1,82]},{1:[2,89],6:[2,89],29:[2,89],30:[2,89],44:[2,89],53:[2,89],58:[2,89],61:[2,89],70:[2,89],71:[2,89],72:[2,89],73:[2,89],75:[2,89],77:[2,89],78:[2,89],82:[2,89],84:[2,89],92:[2,89],93:[2,89],94:[2,89],99:[2,89],102:[2,89],111:[2,89],113:[2,89],114:[2,89],115:[2,89],119:[2,89],127:[2,89],135:[2,89],137:[2,89],138:[2,89],139:[2,89],140:[2,89],141:[2,89],142:[2,89],143:[2,89],144:[2,89],145:[2,89],146:[2,89],147:[2,89],148:[2,89]},{8:207,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],61:[1,211],62:55,63:56,65:40,67:29,68:30,69:31,76:206,79:208,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],101:209,102:[1,210],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{74:212,75:[1,110],78:[1,111]},{90:213,93:[1,116]},{1:[2,74],6:[2,74],29:[2,74],30:[2,74],44:[2,74],53:[2,74],58:[2,74],61:[2,74],70:[2,74],71:[2,74],72:[2,74],73:[2,74],75:[2,74],77:[2,74],78:[2,74],82:[2,74],84:[2,74],92:[2,74],93:[2,74],94:[2,74],99:[2,74],102:[2,74],111:[2,74],113:[2,74],114:[2,74],115:[2,74],119:[2,74],127:[2,74],135:[2,74],137:[2,74],138:[2,74],139:[2,74],140:[2,74],141:[2,74],142:[2,74],143:[2,74],144:[2,74],145:[2,74],146:[2,74],147:[2,74],148:[2,74]},{6:[1,215],8:214,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:[1,216],31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{1:[2,119],6:[2,119],29:[2,119],30:[2,119],53:[2,119],58:[2,119],61:[2,119],70:[2,119],71:[2,119],72:[2,119],73:[2,119],75:[2,119],77:[2,119],78:[2,119],82:[2,119],92:[2,119],93:[2,119],94:[2,119],99:[2,119],102:[2,119],111:[2,119],113:[2,119],114:[2,119],115:[2,119],119:[2,119],127:[2,119],135:[2,119],137:[2,119],138:[2,119],141:[2,119],142:[2,119],143:[2,119],144:[2,119],145:[2,119],146:[2,119],147:[2,119]},{8:219,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:[1,162],31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,64:163,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],94:[1,217],95:218,96:[1,66],97:[1,67],98:[1,65],100:[1,78],103:161,105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{6:[2,57],29:[2,57],53:[1,220],57:222,58:[1,221]},{6:[2,60],29:[2,60],30:[2,60],53:[2,60],58:[2,60]},{6:[2,64],29:[2,64],30:[2,64],44:[1,224],53:[2,64],58:[2,64],61:[1,223]},{6:[2,67],29:[2,67],30:[2,67],44:[2,67],53:[2,67],58:[2,67],61:[2,67]},{6:[2,68],29:[2,68],30:[2,68],44:[2,68],53:[2,68],58:[2,68],61:[2,68]},{6:[2,69],29:[2,69],30:[2,69],44:[2,69],53:[2,69],58:[2,69],61:[2,69]},{6:[2,70],29:[2,70],30:[2,70],44:[2,70],53:[2,70],58:[2,70],61:[2,70]},{31:164,32:[1,82]},{8:219,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:[1,162],31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,64:163,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],95:160,96:[1,66],97:[1,67],98:[1,65],99:[1,159],100:[1,78],103:161,105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{1:[2,54],6:[2,54],29:[2,54],30:[2,54],53:[2,54],58:[2,54],61:[2,54],77:[2,54],82:[2,54],94:[2,54],99:[2,54],102:[2,54],111:[2,54],113:[2,54],114:[2,54],115:[2,54],119:[2,54],127:[2,54],135:[2,54],137:[2,54],138:[2,54],141:[2,54],142:[2,54],143:[2,54],144:[2,54],145:[2,54],146:[2,54],147:[2,54]},{1:[2,201],6:[2,201],29:[2,201],30:[2,201],53:[2,201],58:[2,201],61:[2,201],77:[2,201],82:[2,201],94:[2,201],99:[2,201],102:[2,201],111:[2,201],112:97,113:[2,201],114:[2,201],115:[2,201],118:98,119:[2,201],120:77,127:[2,201],135:[2,201],137:[2,201],138:[2,201],141:[1,87],142:[2,201],143:[2,201],144:[2,201],145:[2,201],146:[2,201],147:[2,201]},{112:100,113:[1,73],115:[1,74],118:101,119:[1,76],120:77,135:[1,99]},{1:[2,202],6:[2,202],29:[2,202],30:[2,202],53:[2,202],58:[2,202],61:[2,202],77:[2,202],82:[2,202],94:[2,202],99:[2,202],102:[2,202],111:[2,202],112:97,113:[2,202],114:[2,202],115:[2,202],118:98,119:[2,202],120:77,127:[2,202],135:[2,202],137:[2,202],138:[2,202],141:[1,87],142:[2,202],143:[2,202],144:[2,202],145:[2,202],146:[2,202],147:[2,202]},{1:[2,203],6:[2,203],29:[2,203],30:[2,203],53:[2,203],58:[2,203],61:[2,203],77:[2,203],82:[2,203],94:[2,203],99:[2,203],102:[2,203],111:[2,203],112:97,113:[2,203],114:[2,203],115:[2,203],118:98,119:[2,203],120:77,127:[2,203],135:[2,203],137:[2,203],138:[2,203],141:[1,87],142:[2,203],143:[2,203],144:[2,203],145:[2,203],146:[2,203],147:[2,203]},{1:[2,204],6:[2,204],29:[2,204],30:[2,204],53:[2,204],58:[2,204],61:[2,204],70:[2,76],71:[2,76],72:[2,76],73:[2,76],75:[2,76],77:[2,204],78:[2,76],82:[2,204],92:[2,76],93:[2,76],94:[2,204],99:[2,204],102:[2,204],111:[2,204],113:[2,204],114:[2,204],115:[2,204],119:[2,204],127:[2,204],135:[2,204],137:[2,204],138:[2,204],141:[2,204],142:[2,204],143:[2,204],144:[2,204],145:[2,204],146:[2,204],147:[2,204]},{66:103,70:[1,105],71:[1,106],72:[1,107],73:[1,108],74:109,75:[1,110],78:[1,111],89:102,92:[1,104],93:[2,120]},{66:113,70:[1,105],71:[1,106],72:[1,107],73:[1,108],74:109,75:[1,110],78:[1,111],89:112,92:[1,104],93:[2,120]},{70:[2,79],71:[2,79],72:[2,79],73:[2,79],75:[2,79],78:[2,79],92:[2,79],93:[2,79]},{1:[2,205],6:[2,205],29:[2,205],30:[2,205],53:[2,205],58:[2,205],61:[2,205],70:[2,76],71:[2,76],72:[2,76],73:[2,76],75:[2,76],77:[2,205],78:[2,76],82:[2,205],92:[2,76],93:[2,76],94:[2,205],99:[2,205],102:[2,205],111:[2,205],113:[2,205],114:[2,205],115:[2,205],119:[2,205],127:[2,205],135:[2,205],137:[2,205],138:[2,205],141:[2,205],142:[2,205],143:[2,205],144:[2,205],145:[2,205],146:[2,205],147:[2,205]},{1:[2,206],6:[2,206],29:[2,206],30:[2,206],53:[2,206],58:[2,206],61:[2,206],77:[2,206],82:[2,206],94:[2,206],99:[2,206],102:[2,206],111:[2,206],113:[2,206],114:[2,206],115:[2,206],119:[2,206],127:[2,206],135:[2,206],137:[2,206],138:[2,206],141:[2,206],142:[2,206],143:[2,206],144:[2,206],145:[2,206],146:[2,206],147:[2,206]},{1:[2,207],6:[2,207],29:[2,207],30:[2,207],53:[2,207],58:[2,207],61:[2,207],77:[2,207],82:[2,207],94:[2,207],99:[2,207],102:[2,207],111:[2,207],113:[2,207],114:[2,207],115:[2,207],119:[2,207],127:[2,207],135:[2,207],137:[2,207],138:[2,207],141:[2,207],142:[2,207],143:[2,207],144:[2,207],145:[2,207],146:[2,207],147:[2,207]},{6:[1,227],8:225,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:[1,226],31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{8:228,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{5:229,29:[1,5],134:[1,230]},{1:[2,147],6:[2,147],29:[2,147],30:[2,147],53:[2,147],58:[2,147],61:[2,147],77:[2,147],82:[2,147],94:[2,147],99:[2,147],102:[2,147],106:231,107:[1,232],108:[1,233],111:[2,147],113:[2,147],114:[2,147],115:[2,147],119:[2,147],127:[2,147],135:[2,147],137:[2,147],138:[2,147],141:[2,147],142:[2,147],143:[2,147],144:[2,147],145:[2,147],146:[2,147],147:[2,147]},{1:[2,161],6:[2,161],29:[2,161],30:[2,161],53:[2,161],58:[2,161],61:[2,161],77:[2,161],82:[2,161],94:[2,161],99:[2,161],102:[2,161],111:[2,161],113:[2,161],114:[2,161],115:[2,161],119:[2,161],127:[2,161],135:[2,161],137:[2,161],138:[2,161],141:[2,161],142:[2,161],143:[2,161],144:[2,161],145:[2,161],146:[2,161],147:[2,161]},{1:[2,169],6:[2,169],29:[2,169],30:[2,169],53:[2,169],58:[2,169],61:[2,169],77:[2,169],82:[2,169],94:[2,169],99:[2,169],102:[2,169],111:[2,169],113:[2,169],114:[2,169],115:[2,169],119:[2,169],127:[2,169],135:[2,169],137:[2,169],138:[2,169],141:[2,169],142:[2,169],143:[2,169],144:[2,169],145:[2,169],146:[2,169],147:[2,169]},{29:[1,234],112:97,113:[1,73],115:[1,74],118:98,119:[1,76],120:77,135:[1,96],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{129:235,131:236,132:[1,237]},{1:[2,101],6:[2,101],29:[2,101],30:[2,101],53:[2,101],58:[2,101],61:[2,101],77:[2,101],82:[2,101],94:[2,101],99:[2,101],102:[2,101],111:[2,101],113:[2,101],114:[2,101],115:[2,101],119:[2,101],127:[2,101],135:[2,101],137:[2,101],138:[2,101],141:[2,101],142:[2,101],143:[2,101],144:[2,101],145:[2,101],146:[2,101],147:[2,101]},{8:238,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{1:[2,104],5:239,6:[2,104],29:[1,5],30:[2,104],53:[2,104],58:[2,104],61:[2,104],70:[2,76],71:[2,76],72:[2,76],73:[2,76],75:[2,76],77:[2,104],78:[2,76],82:[2,104],84:[1,240],92:[2,76],93:[2,76],94:[2,104],99:[2,104],102:[2,104],111:[2,104],113:[2,104],114:[2,104],115:[2,104],119:[2,104],127:[2,104],135:[2,104],137:[2,104],138:[2,104],141:[2,104],142:[2,104],143:[2,104],144:[2,104],145:[2,104],146:[2,104],147:[2,104]},{1:[2,108],5:241,6:[2,108],29:[1,5],30:[2,108],53:[2,108],58:[2,108],61:[2,108],70:[2,76],71:[2,76],72:[2,76],73:[2,76],75:[2,76],77:[2,108],78:[2,76],82:[2,108],92:[2,76],93:[2,76],94:[2,108],99:[2,108],102:[2,108],111:[2,108],113:[2,108],114:[2,108],115:[2,108],119:[2,108],127:[2,108],135:[2,108],137:[2,108],138:[2,108],141:[2,108],142:[2,108],143:[2,108],144:[2,108],145:[2,108],146:[2,108],147:[2,108]},{1:[2,110],5:242,6:[2,110],29:[1,5],30:[2,110],53:[2,110],58:[2,110],61:[2,110],70:[2,76],71:[2,76],72:[2,76],73:[2,76],75:[2,76],77:[2,110],78:[2,76],82:[2,110],92:[2,76],93:[2,76],94:[2,110],99:[2,110],102:[2,110],111:[2,110],113:[2,110],114:[2,110],115:[2,110],119:[2,110],127:[2,110],135:[2,110],137:[2,110],138:[2,110],141:[2,110],142:[2,110],143:[2,110],144:[2,110],145:[2,110],146:[2,110],147:[2,110]},{1:[2,112],5:243,6:[2,112],29:[1,5],30:[2,112],53:[2,112],58:[2,112],61:[2,112],70:[2,76],71:[2,76],72:[2,76],73:[2,76],75:[2,76],77:[2,112],78:[2,76],82:[2,112],92:[2,76],93:[2,76],94:[2,112],99:[2,112],102:[2,112],111:[2,112],113:[2,112],114:[2,112],115:[2,112],119:[2,112],127:[2,112],135:[2,112],137:[2,112],138:[2,112],141:[2,112],142:[2,112],143:[2,112],144:[2,112],145:[2,112],146:[2,112],147:[2,112]},{29:[1,244],70:[2,76],71:[2,76],72:[2,76],73:[2,76],75:[2,76],78:[2,76],92:[2,76],93:[2,76]},{13:132,14:133,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:134,48:71,62:55,63:56,65:245,67:29,68:30,69:31,70:[2,78],71:[2,78],72:[2,78],73:[2,78],75:[2,78],78:[2,78],80:[1,79],91:[1,32],92:[2,78],93:[2,78],96:[1,66],97:[1,67],98:[1,65],100:[1,78],110:[1,64]},{1:[2,154],6:[2,154],29:[2,154],30:[2,154],53:[2,154],58:[2,154],61:[2,154],77:[2,154],82:[2,154],94:[2,154],99:[2,154],102:[2,154],111:[2,154],112:97,113:[2,154],114:[2,154],115:[2,154],118:98,119:[2,154],120:77,127:[2,154],135:[2,154],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{1:[2,50],6:[2,50],30:[2,50],111:[2,50],112:97,113:[2,50],115:[2,50],118:98,119:[2,50],120:77,135:[2,50],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{6:[1,83],111:[1,246]},{4:247,7:4,8:6,9:7,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{6:[2,143],29:[2,143],58:[2,143],61:[1,249],99:[2,143],101:248,102:[1,210],112:97,113:[1,73],115:[1,74],118:98,119:[1,76],120:77,135:[1,96],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{1:[2,127],6:[2,127],29:[2,127],30:[2,127],44:[2,127],53:[2,127],58:[2,127],61:[2,127],70:[2,127],71:[2,127],72:[2,127],73:[2,127],75:[2,127],77:[2,127],78:[2,127],82:[2,127],92:[2,127],93:[2,127],94:[2,127],99:[2,127],102:[2,127],111:[2,127],113:[2,127],114:[2,127],115:[2,127],119:[2,127],125:[2,127],126:[2,127],127:[2,127],135:[2,127],137:[2,127],138:[2,127],141:[2,127],142:[2,127],143:[2,127],144:[2,127],145:[2,127],146:[2,127],147:[2,127]},{6:[2,57],29:[2,57],57:250,58:[1,251],99:[2,57]},{6:[2,138],29:[2,138],30:[2,138],58:[2,138],94:[2,138],99:[2,138]},{8:219,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:[1,162],31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,64:163,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],95:252,96:[1,66],97:[1,67],98:[1,65],100:[1,78],103:161,105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{6:[2,144],29:[2,144],30:[2,144],58:[2,144],94:[2,144],99:[2,144]},{1:[2,126],6:[2,126],29:[2,126],30:[2,126],44:[2,126],47:[2,126],53:[2,126],58:[2,126],61:[2,126],70:[2,126],71:[2,126],72:[2,126],73:[2,126],75:[2,126],77:[2,126],78:[2,126],82:[2,126],84:[2,126],92:[2,126],93:[2,126],94:[2,126],99:[2,126],102:[2,126],111:[2,126],113:[2,126],114:[2,126],115:[2,126],119:[2,126],125:[2,126],126:[2,126],127:[2,126],135:[2,126],137:[2,126],138:[2,126],139:[2,126],140:[2,126],141:[2,126],142:[2,126],143:[2,126],144:[2,126],145:[2,126],146:[2,126],147:[2,126],148:[2,126]},{5:253,29:[1,5],112:97,113:[1,73],115:[1,74],118:98,119:[1,76],120:77,135:[1,96],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{1:[2,157],6:[2,157],29:[2,157],30:[2,157],53:[2,157],58:[2,157],61:[2,157],77:[2,157],82:[2,157],94:[2,157],99:[2,157],102:[2,157],111:[2,157],112:97,113:[1,73],114:[1,254],115:[1,74],118:98,119:[1,76],120:77,127:[2,157],135:[2,157],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{1:[2,159],6:[2,159],29:[2,159],30:[2,159],53:[2,159],58:[2,159],61:[2,159],77:[2,159],82:[2,159],94:[2,159],99:[2,159],102:[2,159],111:[2,159],112:97,113:[1,73],114:[1,255],115:[1,74],118:98,119:[1,76],120:77,127:[2,159],135:[2,159],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{1:[2,165],6:[2,165],29:[2,165],30:[2,165],53:[2,165],58:[2,165],61:[2,165],77:[2,165],82:[2,165],94:[2,165],99:[2,165],102:[2,165],111:[2,165],113:[2,165],114:[2,165],115:[2,165],119:[2,165],127:[2,165],135:[2,165],137:[2,165],138:[2,165],141:[2,165],142:[2,165],143:[2,165],144:[2,165],145:[2,165],146:[2,165],147:[2,165]},{1:[2,166],6:[2,166],29:[2,166],30:[2,166],53:[2,166],58:[2,166],61:[2,166],77:[2,166],82:[2,166],94:[2,166],99:[2,166],102:[2,166],111:[2,166],112:97,113:[1,73],114:[2,166],115:[1,74],118:98,119:[1,76],120:77,127:[2,166],135:[2,166],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{1:[2,170],6:[2,170],29:[2,170],30:[2,170],53:[2,170],58:[2,170],61:[2,170],77:[2,170],82:[2,170],94:[2,170],99:[2,170],102:[2,170],111:[2,170],113:[2,170],114:[2,170],115:[2,170],119:[2,170],127:[2,170],135:[2,170],137:[2,170],138:[2,170],141:[2,170],142:[2,170],143:[2,170],144:[2,170],145:[2,170],146:[2,170],147:[2,170]},{125:[2,172],126:[2,172]},{31:174,32:[1,82],48:175,62:176,63:177,80:[1,79],97:[1,124],98:[1,125],100:[1,78],122:256,124:173},{58:[1,257],125:[2,178],126:[2,178]},{58:[2,174],125:[2,174],126:[2,174]},{58:[2,175],125:[2,175],126:[2,175]},{58:[2,176],125:[2,176],126:[2,176]},{58:[2,177],125:[2,177],126:[2,177]},{1:[2,171],6:[2,171],29:[2,171],30:[2,171],53:[2,171],58:[2,171],61:[2,171],77:[2,171],82:[2,171],94:[2,171],99:[2,171],102:[2,171],111:[2,171],113:[2,171],114:[2,171],115:[2,171],119:[2,171],127:[2,171],135:[2,171],137:[2,171],138:[2,171],141:[2,171],142:[2,171],143:[2,171],144:[2,171],145:[2,171],146:[2,171],147:[2,171]},{8:258,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{8:259,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{8:219,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:[1,162],31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,64:163,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],95:261,96:[1,66],97:[1,67],98:[1,65],99:[1,260],100:[1,78],103:161,105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{6:[2,57],29:[2,57],57:262,58:[1,263],82:[2,57]},{6:[2,96],29:[2,96],30:[2,96],58:[2,96],82:[2,96]},{6:[2,43],29:[2,43],30:[2,43],47:[1,264],58:[2,43],82:[2,43]},{6:[2,46],29:[2,46],30:[2,46],58:[2,46],82:[2,46]},{6:[2,47],29:[2,47],30:[2,47],47:[2,47],58:[2,47],82:[2,47]},{6:[2,48],29:[2,48],30:[2,48],47:[2,48],58:[2,48],82:[2,48]},{6:[2,49],29:[2,49],30:[2,49],47:[2,49],58:[2,49],82:[2,49]},{1:[2,5],6:[2,5],30:[2,5],111:[2,5]},{1:[2,29],6:[2,29],29:[2,29],30:[2,29],53:[2,29],58:[2,29],61:[2,29],77:[2,29],82:[2,29],94:[2,29],99:[2,29],102:[2,29],107:[2,29],108:[2,29],111:[2,29],113:[2,29],114:[2,29],115:[2,29],119:[2,29],127:[2,29],130:[2,29],132:[2,29],135:[2,29],137:[2,29],138:[2,29],141:[2,29],142:[2,29],143:[2,29],144:[2,29],145:[2,29],146:[2,29],147:[2,29]},{1:[2,209],6:[2,209],29:[2,209],30:[2,209],53:[2,209],58:[2,209],61:[2,209],77:[2,209],82:[2,209],94:[2,209],99:[2,209],102:[2,209],111:[2,209],112:97,113:[2,209],114:[2,209],115:[2,209],118:98,119:[2,209],120:77,127:[2,209],135:[2,209],137:[2,209],138:[2,209],141:[1,87],142:[1,90],143:[1,91],144:[2,209],145:[2,209],146:[2,209],147:[2,209]},{1:[2,210],6:[2,210],29:[2,210],30:[2,210],53:[2,210],58:[2,210],61:[2,210],77:[2,210],82:[2,210],94:[2,210],99:[2,210],102:[2,210],111:[2,210],112:97,113:[2,210],114:[2,210],115:[2,210],118:98,119:[2,210],120:77,127:[2,210],135:[2,210],137:[2,210],138:[2,210],141:[1,87],142:[1,90],143:[1,91],144:[2,210],145:[2,210],146:[2,210],147:[2,210]},{1:[2,211],6:[2,211],29:[2,211],30:[2,211],53:[2,211],58:[2,211],61:[2,211],77:[2,211],82:[2,211],94:[2,211],99:[2,211],102:[2,211],111:[2,211],112:97,113:[2,211],114:[2,211],115:[2,211],118:98,119:[2,211],120:77,127:[2,211],135:[2,211],137:[2,211],138:[2,211],141:[1,87],142:[2,211],143:[2,211],144:[2,211],145:[2,211],146:[2,211],147:[2,211]},{1:[2,212],6:[2,212],29:[2,212],30:[2,212],53:[2,212],58:[2,212],61:[2,212],77:[2,212],82:[2,212],94:[2,212],99:[2,212],102:[2,212],111:[2,212],112:97,113:[2,212],114:[2,212],115:[2,212],118:98,119:[2,212],120:77,127:[2,212],135:[2,212],137:[2,212],138:[2,212],141:[1,87],142:[1,90],143:[2,212],144:[2,212],145:[2,212],146:[2,212],147:[2,212]},{1:[2,213],6:[2,213],29:[2,213],30:[2,213],53:[2,213],58:[2,213],61:[2,213],77:[2,213],82:[2,213],94:[2,213],99:[2,213],102:[2,213],111:[2,213],112:97,113:[2,213],114:[2,213],115:[2,213],118:98,119:[2,213],120:77,127:[2,213],135:[2,213],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[2,213],145:[2,213],146:[2,213],147:[2,213]},{1:[2,214],6:[2,214],29:[2,214],30:[2,214],53:[2,214],58:[2,214],61:[2,214],77:[2,214],82:[2,214],94:[2,214],99:[2,214],102:[2,214],111:[2,214],112:97,113:[2,214],114:[2,214],115:[2,214],118:98,119:[2,214],120:77,127:[2,214],135:[2,214],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[2,214],146:[2,214],147:[1,95]},{1:[2,215],6:[2,215],29:[2,215],30:[2,215],53:[2,215],58:[2,215],61:[2,215],77:[2,215],82:[2,215],94:[2,215],99:[2,215],102:[2,215],111:[2,215],112:97,113:[2,215],114:[2,215],115:[2,215],118:98,119:[2,215],120:77,127:[2,215],135:[2,215],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[2,215],147:[1,95]},{1:[2,216],6:[2,216],29:[2,216],30:[2,216],53:[2,216],58:[2,216],61:[2,216],77:[2,216],82:[2,216],94:[2,216],99:[2,216],102:[2,216],111:[2,216],112:97,113:[2,216],114:[2,216],115:[2,216],118:98,119:[2,216],120:77,127:[2,216],135:[2,216],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[2,216],146:[2,216],147:[2,216]},{1:[2,200],6:[2,200],29:[2,200],30:[2,200],53:[2,200],58:[2,200],61:[2,200],77:[2,200],82:[2,200],94:[2,200],99:[2,200],102:[2,200],111:[2,200],112:97,113:[1,73],114:[2,200],115:[1,74],118:98,119:[1,76],120:77,127:[2,200],135:[1,96],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{1:[2,199],6:[2,199],29:[2,199],30:[2,199],53:[2,199],58:[2,199],61:[2,199],77:[2,199],82:[2,199],94:[2,199],99:[2,199],102:[2,199],111:[2,199],112:97,113:[1,73],114:[2,199],115:[1,74],118:98,119:[1,76],120:77,127:[2,199],135:[1,96],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{1:[2,116],6:[2,116],29:[2,116],30:[2,116],53:[2,116],58:[2,116],61:[2,116],70:[2,116],71:[2,116],72:[2,116],73:[2,116],75:[2,116],77:[2,116],78:[2,116],82:[2,116],92:[2,116],93:[2,116],94:[2,116],99:[2,116],102:[2,116],111:[2,116],113:[2,116],114:[2,116],115:[2,116],119:[2,116],127:[2,116],135:[2,116],137:[2,116],138:[2,116],141:[2,116],142:[2,116],143:[2,116],144:[2,116],145:[2,116],146:[2,116],147:[2,116]},{1:[2,84],6:[2,84],29:[2,84],30:[2,84],44:[2,84],53:[2,84],58:[2,84],61:[2,84],70:[2,84],71:[2,84],72:[2,84],73:[2,84],75:[2,84],77:[2,84],78:[2,84],82:[2,84],84:[2,84],92:[2,84],93:[2,84],94:[2,84],99:[2,84],102:[2,84],111:[2,84],113:[2,84],114:[2,84],115:[2,84],119:[2,84],127:[2,84],135:[2,84],137:[2,84],138:[2,84],139:[2,84],140:[2,84],141:[2,84],142:[2,84],143:[2,84],144:[2,84],145:[2,84],146:[2,84],147:[2,84],148:[2,84]},{1:[2,85],6:[2,85],29:[2,85],30:[2,85],44:[2,85],53:[2,85],58:[2,85],61:[2,85],70:[2,85],71:[2,85],72:[2,85],73:[2,85],75:[2,85],77:[2,85],78:[2,85],82:[2,85],84:[2,85],92:[2,85],93:[2,85],94:[2,85],99:[2,85],102:[2,85],111:[2,85],113:[2,85],114:[2,85],115:[2,85],119:[2,85],127:[2,85],135:[2,85],137:[2,85],138:[2,85],139:[2,85],140:[2,85],141:[2,85],142:[2,85],143:[2,85],144:[2,85],145:[2,85],146:[2,85],147:[2,85],148:[2,85]},{1:[2,86],6:[2,86],29:[2,86],30:[2,86],44:[2,86],53:[2,86],58:[2,86],61:[2,86],70:[2,86],71:[2,86],72:[2,86],73:[2,86],75:[2,86],77:[2,86],78:[2,86],82:[2,86],84:[2,86],92:[2,86],93:[2,86],94:[2,86],99:[2,86],102:[2,86],111:[2,86],113:[2,86],114:[2,86],115:[2,86],119:[2,86],127:[2,86],135:[2,86],137:[2,86],138:[2,86],139:[2,86],140:[2,86],141:[2,86],142:[2,86],143:[2,86],144:[2,86],145:[2,86],146:[2,86],147:[2,86],148:[2,86]},{1:[2,87],6:[2,87],29:[2,87],30:[2,87],44:[2,87],53:[2,87],58:[2,87],61:[2,87],70:[2,87],71:[2,87],72:[2,87],73:[2,87],75:[2,87],77:[2,87],78:[2,87],82:[2,87],84:[2,87],92:[2,87],93:[2,87],94:[2,87],99:[2,87],102:[2,87],111:[2,87],113:[2,87],114:[2,87],115:[2,87],119:[2,87],127:[2,87],135:[2,87],137:[2,87],138:[2,87],139:[2,87],140:[2,87],141:[2,87],142:[2,87],143:[2,87],144:[2,87],145:[2,87],146:[2,87],147:[2,87],148:[2,87]},{77:[1,265]},{61:[1,211],77:[2,92],101:266,102:[1,210],112:97,113:[1,73],115:[1,74],118:98,119:[1,76],120:77,135:[1,96],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{77:[2,93]},{8:267,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,77:[2,137],80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{12:[2,131],32:[2,131],34:[2,131],35:[2,131],37:[2,131],38:[2,131],39:[2,131],40:[2,131],41:[2,131],42:[2,131],49:[2,131],50:[2,131],51:[2,131],55:[2,131],56:[2,131],77:[2,131],80:[2,131],83:[2,131],85:[2,131],86:[2,131],87:[2,131],88:[2,131],91:[2,131],96:[2,131],97:[2,131],98:[2,131],100:[2,131],105:[2,131],109:[2,131],110:[2,131],113:[2,131],115:[2,131],117:[2,131],119:[2,131],128:[2,131],134:[2,131],136:[2,131],137:[2,131],138:[2,131],139:[2,131],140:[2,131]},{12:[2,132],32:[2,132],34:[2,132],35:[2,132],37:[2,132],38:[2,132],39:[2,132],40:[2,132],41:[2,132],42:[2,132],49:[2,132],50:[2,132],51:[2,132],55:[2,132],56:[2,132],77:[2,132],80:[2,132],83:[2,132],85:[2,132],86:[2,132],87:[2,132],88:[2,132],91:[2,132],96:[2,132],97:[2,132],98:[2,132],100:[2,132],105:[2,132],109:[2,132],110:[2,132],113:[2,132],115:[2,132],117:[2,132],119:[2,132],128:[2,132],134:[2,132],136:[2,132],137:[2,132],138:[2,132],139:[2,132],140:[2,132]},{1:[2,91],6:[2,91],29:[2,91],30:[2,91],44:[2,91],53:[2,91],58:[2,91],61:[2,91],70:[2,91],71:[2,91],72:[2,91],73:[2,91],75:[2,91],77:[2,91],78:[2,91],82:[2,91],84:[2,91],92:[2,91],93:[2,91],94:[2,91],99:[2,91],102:[2,91],111:[2,91],113:[2,91],114:[2,91],115:[2,91],119:[2,91],127:[2,91],135:[2,91],137:[2,91],138:[2,91],139:[2,91],140:[2,91],141:[2,91],142:[2,91],143:[2,91],144:[2,91],145:[2,91],146:[2,91],147:[2,91],148:[2,91]},{1:[2,117],6:[2,117],29:[2,117],30:[2,117],53:[2,117],58:[2,117],61:[2,117],70:[2,117],71:[2,117],72:[2,117],73:[2,117],75:[2,117],77:[2,117],78:[2,117],82:[2,117],92:[2,117],93:[2,117],94:[2,117],99:[2,117],102:[2,117],111:[2,117],113:[2,117],114:[2,117],115:[2,117],119:[2,117],127:[2,117],135:[2,117],137:[2,117],138:[2,117],141:[2,117],142:[2,117],143:[2,117],144:[2,117],145:[2,117],146:[2,117],147:[2,117]},{1:[2,40],6:[2,40],29:[2,40],30:[2,40],53:[2,40],58:[2,40],61:[2,40],77:[2,40],82:[2,40],94:[2,40],99:[2,40],102:[2,40],111:[2,40],112:97,113:[2,40],114:[2,40],115:[2,40],118:98,119:[2,40],120:77,127:[2,40],135:[2,40],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{8:268,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{8:269,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{1:[2,122],6:[2,122],29:[2,122],30:[2,122],53:[2,122],58:[2,122],61:[2,122],70:[2,122],71:[2,122],72:[2,122],73:[2,122],75:[2,122],77:[2,122],78:[2,122],82:[2,122],92:[2,122],93:[2,122],94:[2,122],99:[2,122],102:[2,122],111:[2,122],113:[2,122],114:[2,122],115:[2,122],119:[2,122],127:[2,122],135:[2,122],137:[2,122],138:[2,122],141:[2,122],142:[2,122],143:[2,122],144:[2,122],145:[2,122],146:[2,122],147:[2,122]},{6:[2,57],29:[2,57],57:270,58:[1,251],94:[2,57]},{6:[2,143],29:[2,143],30:[2,143],58:[2,143],61:[1,271],94:[2,143],99:[2,143],112:97,113:[1,73],115:[1,74],118:98,119:[1,76],120:77,135:[1,96],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{54:272,55:[1,68],56:[1,69]},{6:[2,58],29:[2,58],30:[2,58],31:120,32:[1,82],48:121,59:273,60:119,62:122,63:123,80:[1,79],97:[1,124],98:[1,125],100:[1,78]},{6:[1,274],29:[1,275]},{6:[2,65],29:[2,65],30:[2,65],53:[2,65],58:[2,65]},{8:276,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{1:[2,217],6:[2,217],29:[2,217],30:[2,217],53:[2,217],58:[2,217],61:[2,217],77:[2,217],82:[2,217],94:[2,217],99:[2,217],102:[2,217],111:[2,217],112:97,113:[2,217],114:[2,217],115:[2,217],118:98,119:[2,217],120:77,127:[2,217],135:[2,217],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{8:277,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{8:278,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{1:[2,220],6:[2,220],29:[2,220],30:[2,220],53:[2,220],58:[2,220],61:[2,220],77:[2,220],82:[2,220],94:[2,220],99:[2,220],102:[2,220],111:[2,220],112:97,113:[2,220],114:[2,220],115:[2,220],118:98,119:[2,220],120:77,127:[2,220],135:[2,220],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{1:[2,198],6:[2,198],29:[2,198],30:[2,198],53:[2,198],58:[2,198],61:[2,198],77:[2,198],82:[2,198],94:[2,198],99:[2,198],102:[2,198],111:[2,198],113:[2,198],114:[2,198],115:[2,198],119:[2,198],127:[2,198],135:[2,198],137:[2,198],138:[2,198],141:[2,198],142:[2,198],143:[2,198],144:[2,198],145:[2,198],146:[2,198],147:[2,198]},{8:279,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{1:[2,148],6:[2,148],29:[2,148],30:[2,148],53:[2,148],58:[2,148],61:[2,148],77:[2,148],82:[2,148],94:[2,148],99:[2,148],102:[2,148],107:[1,280],111:[2,148],113:[2,148],114:[2,148],115:[2,148],119:[2,148],127:[2,148],135:[2,148],137:[2,148],138:[2,148],141:[2,148],142:[2,148],143:[2,148],144:[2,148],145:[2,148],146:[2,148],147:[2,148]},{5:281,29:[1,5]},{5:284,29:[1,5],31:282,32:[1,82],63:283,80:[1,79]},{129:285,131:236,132:[1,237]},{30:[1,286],130:[1,287],131:288,132:[1,237]},{30:[2,191],130:[2,191],132:[2,191]},{8:290,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],104:289,105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{1:[2,102],5:291,6:[2,102],29:[1,5],30:[2,102],53:[2,102],58:[2,102],61:[2,102],77:[2,102],82:[2,102],94:[2,102],99:[2,102],102:[2,102],111:[2,102],112:97,113:[1,73],114:[2,102],115:[1,74],118:98,119:[1,76],120:77,127:[2,102],135:[2,102],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{1:[2,105],6:[2,105],29:[2,105],30:[2,105],53:[2,105],58:[2,105],61:[2,105],77:[2,105],82:[2,105],94:[2,105],99:[2,105],102:[2,105],111:[2,105],113:[2,105],114:[2,105],115:[2,105],119:[2,105],127:[2,105],135:[2,105],137:[2,105],138:[2,105],141:[2,105],142:[2,105],143:[2,105],144:[2,105],145:[2,105],146:[2,105],147:[2,105]},{8:292,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{1:[2,109],6:[2,109],29:[2,109],30:[2,109],53:[2,109],58:[2,109],61:[2,109],77:[2,109],82:[2,109],94:[2,109],99:[2,109],102:[2,109],111:[2,109],113:[2,109],114:[2,109],115:[2,109],119:[2,109],127:[2,109],135:[2,109],137:[2,109],138:[2,109],141:[2,109],142:[2,109],143:[2,109],144:[2,109],145:[2,109],146:[2,109],147:[2,109]},{1:[2,111],6:[2,111],29:[2,111],30:[2,111],53:[2,111],58:[2,111],61:[2,111],77:[2,111],82:[2,111],94:[2,111],99:[2,111],102:[2,111],111:[2,111],113:[2,111],114:[2,111],115:[2,111],119:[2,111],127:[2,111],135:[2,111],137:[2,111],138:[2,111],141:[2,111],142:[2,111],143:[2,111],144:[2,111],145:[2,111],146:[2,111],147:[2,111]},{1:[2,113],6:[2,113],29:[2,113],30:[2,113],53:[2,113],58:[2,113],61:[2,113],77:[2,113],82:[2,113],94:[2,113],99:[2,113],102:[2,113],111:[2,113],113:[2,113],114:[2,113],115:[2,113],119:[2,113],127:[2,113],135:[2,113],137:[2,113],138:[2,113],141:[2,113],142:[2,113],143:[2,113],144:[2,113],145:[2,113],146:[2,113],147:[2,113]},{35:[1,293]},{29:[1,294],70:[2,76],71:[2,76],72:[2,76],73:[2,76],75:[2,76],78:[2,76],92:[2,76],93:[2,76]},{1:[2,155],6:[2,155],29:[2,155],30:[2,155],53:[2,155],58:[2,155],61:[2,155],70:[2,155],71:[2,155],72:[2,155],73:[2,155],75:[2,155],77:[2,155],78:[2,155],82:[2,155],92:[2,155],93:[2,155],94:[2,155],99:[2,155],102:[2,155],111:[2,155],113:[2,155],114:[2,155],115:[2,155],119:[2,155],127:[2,155],135:[2,155],137:[2,155],138:[2,155],141:[2,155],142:[2,155],143:[2,155],144:[2,155],145:[2,155],146:[2,155],147:[2,155]},{6:[1,83],30:[1,295]},{8:296,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{6:[2,71],12:[2,132],29:[2,71],32:[2,132],34:[2,132],35:[2,132],37:[2,132],38:[2,132],39:[2,132],40:[2,132],41:[2,132],42:[2,132],49:[2,132],50:[2,132],51:[2,132],55:[2,132],56:[2,132],58:[2,71],80:[2,132],83:[2,132],85:[2,132],86:[2,132],87:[2,132],88:[2,132],91:[2,132],96:[2,132],97:[2,132],98:[2,132],99:[2,71],100:[2,132],105:[2,132],109:[2,132],110:[2,132],113:[2,132],115:[2,132],117:[2,132],119:[2,132],128:[2,132],134:[2,132],136:[2,132],137:[2,132],138:[2,132],139:[2,132],140:[2,132]},{6:[1,298],29:[1,299],99:[1,297]},{6:[2,58],8:219,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:[2,58],30:[2,58],31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,64:163,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],94:[2,58],96:[1,66],97:[1,67],98:[1,65],99:[2,58],100:[1,78],103:300,105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{6:[2,57],29:[2,57],30:[2,57],57:301,58:[1,251]},{1:[2,195],6:[2,195],29:[2,195],30:[2,195],53:[2,195],58:[2,195],61:[2,195],77:[2,195],82:[2,195],94:[2,195],99:[2,195],102:[2,195],111:[2,195],113:[2,195],114:[2,195],115:[2,195],119:[2,195],127:[2,195],130:[2,195],135:[2,195],137:[2,195],138:[2,195],141:[2,195],142:[2,195],143:[2,195],144:[2,195],145:[2,195],146:[2,195],147:[2,195]},{8:302,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{8:303,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{125:[2,173],126:[2,173]},{31:174,32:[1,82],48:175,62:176,63:177,80:[1,79],97:[1,124],98:[1,125],100:[1,78],124:304},{1:[2,180],6:[2,180],29:[2,180],30:[2,180],53:[2,180],58:[2,180],61:[2,180],77:[2,180],82:[2,180],94:[2,180],99:[2,180],102:[2,180],111:[2,180],112:97,113:[2,180],114:[1,305],115:[2,180],118:98,119:[2,180],120:77,127:[1,306],135:[2,180],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{1:[2,181],6:[2,181],29:[2,181],30:[2,181],53:[2,181],58:[2,181],61:[2,181],77:[2,181],82:[2,181],94:[2,181],99:[2,181],102:[2,181],111:[2,181],112:97,113:[2,181],114:[1,307],115:[2,181],118:98,119:[2,181],120:77,127:[2,181],135:[2,181],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{1:[2,129],6:[2,129],29:[2,129],30:[2,129],44:[2,129],53:[2,129],58:[2,129],61:[2,129],70:[2,129],71:[2,129],72:[2,129],73:[2,129],75:[2,129],77:[2,129],78:[2,129],82:[2,129],92:[2,129],93:[2,129],94:[2,129],99:[2,129],102:[2,129],111:[2,129],113:[2,129],114:[2,129],115:[2,129],119:[2,129],125:[2,129],126:[2,129],127:[2,129],135:[2,129],137:[2,129],138:[2,129],141:[2,129],142:[2,129],143:[2,129],144:[2,129],145:[2,129],146:[2,129],147:[2,129]},{6:[2,57],29:[2,57],57:308,58:[1,251],99:[2,57]},{6:[1,310],29:[1,311],82:[1,309]},{6:[2,58],11:185,29:[2,58],30:[2,58],31:186,32:[1,82],33:187,34:[1,80],35:[1,81],45:312,46:184,48:188,50:[1,54],82:[2,58],97:[1,124]},{8:313,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:[1,314],31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{1:[2,90],6:[2,90],29:[2,90],30:[2,90],44:[2,90],53:[2,90],58:[2,90],61:[2,90],70:[2,90],71:[2,90],72:[2,90],73:[2,90],75:[2,90],77:[2,90],78:[2,90],82:[2,90],84:[2,90],92:[2,90],93:[2,90],94:[2,90],99:[2,90],102:[2,90],111:[2,90],113:[2,90],114:[2,90],115:[2,90],119:[2,90],127:[2,90],135:[2,90],137:[2,90],138:[2,90],139:[2,90],140:[2,90],141:[2,90],142:[2,90],143:[2,90],144:[2,90],145:[2,90],146:[2,90],147:[2,90],148:[2,90]},{8:315,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,77:[2,135],80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{77:[2,136],112:97,113:[1,73],115:[1,74],118:98,119:[1,76],120:77,135:[1,96],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{1:[2,41],6:[2,41],29:[2,41],30:[2,41],53:[2,41],58:[2,41],61:[2,41],77:[2,41],82:[2,41],94:[2,41],99:[2,41],102:[2,41],111:[2,41],112:97,113:[2,41],114:[2,41],115:[2,41],118:98,119:[2,41],120:77,127:[2,41],135:[2,41],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{30:[1,316],112:97,113:[1,73],115:[1,74],118:98,119:[1,76],120:77,135:[1,96],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{6:[1,298],29:[1,299],94:[1,317]},{6:[2,71],29:[2,71],30:[2,71],58:[2,71],94:[2,71],99:[2,71]},{5:318,29:[1,5]},{6:[2,61],29:[2,61],30:[2,61],53:[2,61],58:[2,61]},{31:120,32:[1,82],48:121,59:319,60:119,62:122,63:123,80:[1,79],97:[1,124],98:[1,125],100:[1,78]},{6:[2,59],29:[2,59],30:[2,59],31:120,32:[1,82],48:121,52:320,58:[2,59],59:118,60:119,62:122,63:123,80:[1,79],97:[1,124],98:[1,125],100:[1,78]},{6:[2,66],29:[2,66],30:[2,66],53:[2,66],58:[2,66],112:97,113:[1,73],115:[1,74],118:98,119:[1,76],120:77,135:[1,96],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{30:[1,321],112:97,113:[1,73],115:[1,74],118:98,119:[1,76],120:77,135:[1,96],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{1:[2,219],6:[2,219],29:[2,219],30:[2,219],53:[2,219],58:[2,219],61:[2,219],77:[2,219],82:[2,219],94:[2,219],99:[2,219],102:[2,219],111:[2,219],112:97,113:[2,219],114:[2,219],115:[2,219],118:98,119:[2,219],120:77,127:[2,219],135:[2,219],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{5:322,29:[1,5],112:97,113:[1,73],115:[1,74],118:98,119:[1,76],120:77,135:[1,96],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{5:323,29:[1,5]},{1:[2,149],6:[2,149],29:[2,149],30:[2,149],53:[2,149],58:[2,149],61:[2,149],77:[2,149],82:[2,149],94:[2,149],99:[2,149],102:[2,149],111:[2,149],113:[2,149],114:[2,149],115:[2,149],119:[2,149],127:[2,149],135:[2,149],137:[2,149],138:[2,149],141:[2,149],142:[2,149],143:[2,149],144:[2,149],145:[2,149],146:[2,149],147:[2,149]},{5:324,29:[1,5]},{5:325,29:[1,5]},{1:[2,153],6:[2,153],29:[2,153],30:[2,153],53:[2,153],58:[2,153],61:[2,153],77:[2,153],82:[2,153],94:[2,153],99:[2,153],102:[2,153],107:[2,153],111:[2,153],113:[2,153],114:[2,153],115:[2,153],119:[2,153],127:[2,153],135:[2,153],137:[2,153],138:[2,153],141:[2,153],142:[2,153],143:[2,153],144:[2,153],145:[2,153],146:[2,153],147:[2,153]},{30:[1,326],130:[1,327],131:288,132:[1,237]},{1:[2,189],6:[2,189],29:[2,189],30:[2,189],53:[2,189],58:[2,189],61:[2,189],77:[2,189],82:[2,189],94:[2,189],99:[2,189],102:[2,189],111:[2,189],113:[2,189],114:[2,189],115:[2,189],119:[2,189],127:[2,189],135:[2,189],137:[2,189],138:[2,189],141:[2,189],142:[2,189],143:[2,189],144:[2,189],145:[2,189],146:[2,189],147:[2,189]},{5:328,29:[1,5]},{30:[2,192],130:[2,192],132:[2,192]},{5:329,29:[1,5],58:[1,330]},{29:[2,145],58:[2,145],112:97,113:[1,73],115:[1,74],118:98,119:[1,76],120:77,135:[1,96],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{1:[2,103],6:[2,103],29:[2,103],30:[2,103],53:[2,103],58:[2,103],61:[2,103],77:[2,103],82:[2,103],94:[2,103],99:[2,103],102:[2,103],111:[2,103],113:[2,103],114:[2,103],115:[2,103],119:[2,103],127:[2,103],135:[2,103],137:[2,103],138:[2,103],141:[2,103],142:[2,103],143:[2,103],144:[2,103],145:[2,103],146:[2,103],147:[2,103]},{1:[2,106],5:331,6:[2,106],29:[1,5],30:[2,106],53:[2,106],58:[2,106],61:[2,106],77:[2,106],82:[2,106],94:[2,106],99:[2,106],102:[2,106],111:[2,106],112:97,113:[1,73],114:[2,106],115:[1,74],118:98,119:[1,76],120:77,127:[2,106],135:[2,106],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{6:[1,332]},{35:[1,333]},{111:[1,334]},{99:[1,335],112:97,113:[1,73],115:[1,74],118:98,119:[1,76],120:77,135:[1,96],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{1:[2,128],6:[2,128],29:[2,128],30:[2,128],44:[2,128],53:[2,128],58:[2,128],61:[2,128],70:[2,128],71:[2,128],72:[2,128],73:[2,128],75:[2,128],77:[2,128],78:[2,128],82:[2,128],92:[2,128],93:[2,128],94:[2,128],99:[2,128],102:[2,128],111:[2,128],113:[2,128],114:[2,128],115:[2,128],119:[2,128],125:[2,128],126:[2,128],127:[2,128],135:[2,128],137:[2,128],138:[2,128],141:[2,128],142:[2,128],143:[2,128],144:[2,128],145:[2,128],146:[2,128],147:[2,128]},{8:219,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,64:163,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],103:336,105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{8:219,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:[1,162],31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,64:163,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],95:337,96:[1,66],97:[1,67],98:[1,65],100:[1,78],103:161,105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{6:[2,139],29:[2,139],30:[2,139],58:[2,139],94:[2,139],99:[2,139]},{6:[1,298],29:[1,299],30:[1,338]},{1:[2,158],6:[2,158],29:[2,158],30:[2,158],53:[2,158],58:[2,158],61:[2,158],77:[2,158],82:[2,158],94:[2,158],99:[2,158],102:[2,158],111:[2,158],112:97,113:[1,73],114:[2,158],115:[1,74],118:98,119:[1,76],120:77,127:[2,158],135:[2,158],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{1:[2,160],6:[2,160],29:[2,160],30:[2,160],53:[2,160],58:[2,160],61:[2,160],77:[2,160],82:[2,160],94:[2,160],99:[2,160],102:[2,160],111:[2,160],112:97,113:[1,73],114:[2,160],115:[1,74],118:98,119:[1,76],120:77,127:[2,160],135:[2,160],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{125:[2,179],126:[2,179]},{8:339,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{8:340,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{8:341,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{6:[1,298],29:[1,299],99:[1,342]},{1:[2,94],6:[2,94],29:[2,94],30:[2,94],32:[2,94],34:[2,94],35:[2,94],37:[2,94],38:[2,94],39:[2,94],40:[2,94],41:[2,94],42:[2,94],44:[2,94],53:[2,94],58:[2,94],61:[2,94],70:[2,94],71:[2,94],72:[2,94],73:[2,94],75:[2,94],77:[2,94],78:[2,94],80:[2,94],82:[2,94],91:[2,94],92:[2,94],93:[2,94],94:[2,94],96:[2,94],97:[2,94],98:[2,94],99:[2,94],100:[2,94],102:[2,94],110:[2,94],111:[2,94],113:[2,94],114:[2,94],115:[2,94],119:[2,94],125:[2,94],126:[2,94],127:[2,94],135:[2,94],137:[2,94],138:[2,94],141:[2,94],142:[2,94],143:[2,94],144:[2,94],145:[2,94],146:[2,94],147:[2,94]},{11:185,31:186,32:[1,82],33:187,34:[1,80],35:[1,81],45:343,46:184,48:188,50:[1,54],97:[1,124]},{6:[2,95],11:185,29:[2,95],30:[2,95],31:186,32:[1,82],33:187,34:[1,80],35:[1,81],45:183,46:184,48:188,50:[1,54],58:[2,95],81:344,97:[1,124]},{6:[2,97],29:[2,97],30:[2,97],58:[2,97],82:[2,97]},{6:[2,44],29:[2,44],30:[2,44],58:[2,44],82:[2,44],112:97,113:[1,73],115:[1,74],118:98,119:[1,76],120:77,135:[1,96],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{8:345,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{77:[2,134],112:97,113:[1,73],115:[1,74],118:98,119:[1,76],120:77,135:[1,96],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{1:[2,42],6:[2,42],29:[2,42],30:[2,42],53:[2,42],58:[2,42],61:[2,42],77:[2,42],82:[2,42],94:[2,42],99:[2,42],102:[2,42],111:[2,42],113:[2,42],114:[2,42],115:[2,42],119:[2,42],127:[2,42],135:[2,42],137:[2,42],138:[2,42],141:[2,42],142:[2,42],143:[2,42],144:[2,42],145:[2,42],146:[2,42],147:[2,42]},{1:[2,123],6:[2,123],29:[2,123],30:[2,123],53:[2,123],58:[2,123],61:[2,123],70:[2,123],71:[2,123],72:[2,123],73:[2,123],75:[2,123],77:[2,123],78:[2,123],82:[2,123],92:[2,123],93:[2,123],94:[2,123],99:[2,123],102:[2,123],111:[2,123],113:[2,123],114:[2,123],115:[2,123],119:[2,123],127:[2,123],135:[2,123],137:[2,123],138:[2,123],141:[2,123],142:[2,123],143:[2,123],144:[2,123],145:[2,123],146:[2,123],147:[2,123]},{1:[2,53],6:[2,53],29:[2,53],30:[2,53],53:[2,53],58:[2,53],61:[2,53],77:[2,53],82:[2,53],94:[2,53],99:[2,53],102:[2,53],111:[2,53],113:[2,53],114:[2,53],115:[2,53],119:[2,53],127:[2,53],135:[2,53],137:[2,53],138:[2,53],141:[2,53],142:[2,53],143:[2,53],144:[2,53],145:[2,53],146:[2,53],147:[2,53]},{6:[2,62],29:[2,62],30:[2,62],53:[2,62],58:[2,62]},{6:[2,57],29:[2,57],30:[2,57],57:346,58:[1,221]},{1:[2,218],6:[2,218],29:[2,218],30:[2,218],53:[2,218],58:[2,218],61:[2,218],77:[2,218],82:[2,218],94:[2,218],99:[2,218],102:[2,218],111:[2,218],113:[2,218],114:[2,218],115:[2,218],119:[2,218],127:[2,218],135:[2,218],137:[2,218],138:[2,218],141:[2,218],142:[2,218],143:[2,218],144:[2,218],145:[2,218],146:[2,218],147:[2,218]},{1:[2,196],6:[2,196],29:[2,196],30:[2,196],53:[2,196],58:[2,196],61:[2,196],77:[2,196],82:[2,196],94:[2,196],99:[2,196],102:[2,196],111:[2,196],113:[2,196],114:[2,196],115:[2,196],119:[2,196],127:[2,196],130:[2,196],135:[2,196],137:[2,196],138:[2,196],141:[2,196],142:[2,196],143:[2,196],144:[2,196],145:[2,196],146:[2,196],147:[2,196]},{1:[2,150],6:[2,150],29:[2,150],30:[2,150],53:[2,150],58:[2,150],61:[2,150],77:[2,150],82:[2,150],94:[2,150],99:[2,150],102:[2,150],111:[2,150],113:[2,150],114:[2,150],115:[2,150],119:[2,150],127:[2,150],135:[2,150],137:[2,150],138:[2,150],141:[2,150],142:[2,150],143:[2,150],144:[2,150],145:[2,150],146:[2,150],147:[2,150]},{1:[2,151],6:[2,151],29:[2,151],30:[2,151],53:[2,151],58:[2,151],61:[2,151],77:[2,151],82:[2,151],94:[2,151],99:[2,151],102:[2,151],107:[2,151],111:[2,151],113:[2,151],114:[2,151],115:[2,151],119:[2,151],127:[2,151],135:[2,151],137:[2,151],138:[2,151],141:[2,151],142:[2,151],143:[2,151],144:[2,151],145:[2,151],146:[2,151],147:[2,151]},{1:[2,152],6:[2,152],29:[2,152],30:[2,152],53:[2,152],58:[2,152],61:[2,152],77:[2,152],82:[2,152],94:[2,152],99:[2,152],102:[2,152],107:[2,152],111:[2,152],113:[2,152],114:[2,152],115:[2,152],119:[2,152],127:[2,152],135:[2,152],137:[2,152],138:[2,152],141:[2,152],142:[2,152],143:[2,152],144:[2,152],145:[2,152],146:[2,152],147:[2,152]},{1:[2,187],6:[2,187],29:[2,187],30:[2,187],53:[2,187],58:[2,187],61:[2,187],77:[2,187],82:[2,187],94:[2,187],99:[2,187],102:[2,187],111:[2,187],113:[2,187],114:[2,187],115:[2,187],119:[2,187],127:[2,187],135:[2,187],137:[2,187],138:[2,187],141:[2,187],142:[2,187],143:[2,187],144:[2,187],145:[2,187],146:[2,187],147:[2,187]},{5:347,29:[1,5]},{30:[1,348]},{6:[1,349],30:[2,193],130:[2,193],132:[2,193]},{8:350,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{1:[2,107],6:[2,107],29:[2,107],30:[2,107],53:[2,107],58:[2,107],61:[2,107],77:[2,107],82:[2,107],94:[2,107],99:[2,107],102:[2,107],111:[2,107],113:[2,107],114:[2,107],115:[2,107],119:[2,107],127:[2,107],135:[2,107],137:[2,107],138:[2,107],141:[2,107],142:[2,107],143:[2,107],144:[2,107],145:[2,107],146:[2,107],147:[2,107]},{35:[1,351]},{6:[1,352]},{1:[2,156],6:[2,156],29:[2,156],30:[2,156],53:[2,156],58:[2,156],61:[2,156],70:[2,156],71:[2,156],72:[2,156],73:[2,156],75:[2,156],77:[2,156],78:[2,156],82:[2,156],92:[2,156],93:[2,156],94:[2,156],99:[2,156],102:[2,156],111:[2,156],113:[2,156],114:[2,156],115:[2,156],119:[2,156],127:[2,156],135:[2,156],137:[2,156],138:[2,156],141:[2,156],142:[2,156],143:[2,156],144:[2,156],145:[2,156],146:[2,156],147:[2,156]},{1:[2,133],6:[2,133],29:[2,133],30:[2,133],53:[2,133],58:[2,133],61:[2,133],70:[2,133],71:[2,133],72:[2,133],73:[2,133],75:[2,133],77:[2,133],78:[2,133],82:[2,133],92:[2,133],93:[2,133],94:[2,133],99:[2,133],102:[2,133],111:[2,133],113:[2,133],114:[2,133],115:[2,133],119:[2,133],127:[2,133],135:[2,133],137:[2,133],138:[2,133],141:[2,133],142:[2,133],143:[2,133],144:[2,133],145:[2,133],146:[2,133],147:[2,133]},{6:[2,140],29:[2,140],30:[2,140],58:[2,140],94:[2,140],99:[2,140]},{6:[2,57],29:[2,57],30:[2,57],57:353,58:[1,251]},{6:[2,141],29:[2,141],30:[2,141],58:[2,141],94:[2,141],99:[2,141]},{1:[2,182],6:[2,182],29:[2,182],30:[2,182],53:[2,182],58:[2,182],61:[2,182],77:[2,182],82:[2,182],94:[2,182],99:[2,182],102:[2,182],111:[2,182],112:97,113:[2,182],114:[2,182],115:[2,182],118:98,119:[2,182],120:77,127:[1,354],135:[2,182],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{1:[2,184],6:[2,184],29:[2,184],30:[2,184],53:[2,184],58:[2,184],61:[2,184],77:[2,184],82:[2,184],94:[2,184],99:[2,184],102:[2,184],111:[2,184],112:97,113:[2,184],114:[1,355],115:[2,184],118:98,119:[2,184],120:77,127:[2,184],135:[2,184],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{1:[2,183],6:[2,183],29:[2,183],30:[2,183],53:[2,183],58:[2,183],61:[2,183],77:[2,183],82:[2,183],94:[2,183],99:[2,183],102:[2,183],111:[2,183],112:97,113:[2,183],114:[2,183],115:[2,183],118:98,119:[2,183],120:77,127:[2,183],135:[2,183],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{1:[2,130],6:[2,130],29:[2,130],30:[2,130],44:[2,130],53:[2,130],58:[2,130],61:[2,130],70:[2,130],71:[2,130],72:[2,130],73:[2,130],75:[2,130],77:[2,130],78:[2,130],82:[2,130],92:[2,130],93:[2,130],94:[2,130],99:[2,130],102:[2,130],111:[2,130],113:[2,130],114:[2,130],115:[2,130],119:[2,130],125:[2,130],126:[2,130],127:[2,130],135:[2,130],137:[2,130],138:[2,130],141:[2,130],142:[2,130],143:[2,130],144:[2,130],145:[2,130],146:[2,130],147:[2,130]},{6:[2,98],29:[2,98],30:[2,98],58:[2,98],82:[2,98]},{6:[2,57],29:[2,57],30:[2,57],57:356,58:[1,263]},{30:[1,357],112:97,113:[1,73],115:[1,74],118:98,119:[1,76],120:77,135:[1,96],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{6:[1,274],29:[1,275],30:[1,358]},{30:[1,359]},{1:[2,190],6:[2,190],29:[2,190],30:[2,190],53:[2,190],58:[2,190],61:[2,190],77:[2,190],82:[2,190],94:[2,190],99:[2,190],102:[2,190],111:[2,190],113:[2,190],114:[2,190],115:[2,190],119:[2,190],127:[2,190],135:[2,190],137:[2,190],138:[2,190],141:[2,190],142:[2,190],143:[2,190],144:[2,190],145:[2,190],146:[2,190],147:[2,190]},{30:[2,194],130:[2,194],132:[2,194]},{29:[2,146],58:[2,146],112:97,113:[1,73],115:[1,74],118:98,119:[1,76],120:77,135:[1,96],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{30:[1,360]},{35:[1,361]},{6:[1,298],29:[1,299],30:[1,362]},{8:363,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{8:364,9:128,10:24,11:25,12:[1,26],13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,31:70,32:[1,82],33:57,34:[1,80],35:[1,81],36:28,37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],42:[1,63],43:27,48:71,49:[1,53],50:[1,54],51:[1,33],54:34,55:[1,68],56:[1,69],62:55,63:56,65:40,67:29,68:30,69:31,80:[1,79],83:[1,47],85:[1,48],86:[1,49],87:[1,50],88:[1,51],91:[1,32],96:[1,66],97:[1,67],98:[1,65],100:[1,78],105:[1,42],109:[1,52],110:[1,64],112:43,113:[1,73],115:[1,74],116:44,117:[1,75],118:45,119:[1,76],120:77,128:[1,46],133:41,134:[1,72],136:[1,35],137:[1,36],138:[1,37],139:[1,38],140:[1,39]},{6:[1,310],29:[1,311],30:[1,365]},{6:[2,45],29:[2,45],30:[2,45],58:[2,45],82:[2,45]},{6:[2,63],29:[2,63],30:[2,63],53:[2,63],58:[2,63]},{1:[2,188],6:[2,188],29:[2,188],30:[2,188],53:[2,188],58:[2,188],61:[2,188],77:[2,188],82:[2,188],94:[2,188],99:[2,188],102:[2,188],111:[2,188],113:[2,188],114:[2,188],115:[2,188],119:[2,188],127:[2,188],135:[2,188],137:[2,188],138:[2,188],141:[2,188],142:[2,188],143:[2,188],144:[2,188],145:[2,188],146:[2,188],147:[2,188]},{1:[2,114],6:[2,114],29:[2,114],30:[2,114],53:[2,114],58:[2,114],61:[2,114],77:[2,114],82:[2,114],94:[2,114],99:[2,114],102:[2,114],111:[2,114],113:[2,114],114:[2,114],115:[2,114],119:[2,114],127:[2,114],135:[2,114],137:[2,114],138:[2,114],141:[2,114],142:[2,114],143:[2,114],144:[2,114],145:[2,114],146:[2,114],147:[2,114]},{30:[1,366]},{6:[2,142],29:[2,142],30:[2,142],58:[2,142],94:[2,142],99:[2,142]},{1:[2,185],6:[2,185],29:[2,185],30:[2,185],53:[2,185],58:[2,185],61:[2,185],77:[2,185],82:[2,185],94:[2,185],99:[2,185],102:[2,185],111:[2,185],112:97,113:[2,185],114:[2,185],115:[2,185],118:98,119:[2,185],120:77,127:[2,185],135:[2,185],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{1:[2,186],6:[2,186],29:[2,186],30:[2,186],53:[2,186],58:[2,186],61:[2,186],77:[2,186],82:[2,186],94:[2,186],99:[2,186],102:[2,186],111:[2,186],112:97,113:[2,186],114:[2,186],115:[2,186],118:98,119:[2,186],120:77,127:[2,186],135:[2,186],137:[1,89],138:[1,88],141:[1,87],142:[1,90],143:[1,91],144:[1,92],145:[1,93],146:[1,94],147:[1,95]},{6:[2,99],29:[2,99],30:[2,99],58:[2,99],82:[2,99]},{1:[2,115],6:[2,115],29:[2,115],30:[2,115],53:[2,115],58:[2,115],61:[2,115],77:[2,115],82:[2,115],94:[2,115],99:[2,115],102:[2,115],111:[2,115],113:[2,115],114:[2,115],115:[2,115],119:[2,115],127:[2,115],135:[2,115],137:[2,115],138:[2,115],141:[2,115],142:[2,115],143:[2,115],144:[2,115],145:[2,115],146:[2,115],147:[2,115]}],
defaultActions: {68:[2,55],69:[2,56],84:[2,3],104:[2,121],208:[2,93]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
undefined
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
} if(module.exports){ var temp = module.exports; module.exports = void 0; return temp; }};module['./scope'] = new function(){ var exports = this; // Generated by CoffeeScript 1.6.3
(function() {
  var Scope, extend, last, _ref;

  _ref = require('./helpers'), extend = _ref.extend, last = _ref.last;

  exports.Scope = Scope = (function() {
    Scope.root = null;

    function Scope(parent, expressions, method) {
      this.parent = parent;
      this.expressions = expressions;
      this.method = method;
      this.variables = [
        {
          name: 'arguments',
          type: 'arguments'
        }
      ];
      this.positions = {};
      if (!this.parent) {
        Scope.root = this;
      }
    }

    Scope.prototype.add = function(name, type, immediate) {
      if (this.shared && !immediate) {
        return this.parent.add(name, type, immediate);
      }
      if (Object.prototype.hasOwnProperty.call(this.positions, name)) {
        return this.variables[this.positions[name]].type = type;
      } else {
        return this.positions[name] = this.variables.push({
          name: name,
          type: type
        }) - 1;
      }
    };

    Scope.prototype.namedMethod = function() {
      var _ref1;
      if (((_ref1 = this.method) != null ? _ref1.name : void 0) || !this.parent) {
        return this.method;
      }
      return this.parent.namedMethod();
    };

    Scope.prototype.find = function(name) {
      if (this.check(name)) {
        return true;
      }
      this.add(name, 'var');
      return false;
    };

    Scope.prototype.parameter = function(name) {
      if (this.shared && this.parent.check(name, true)) {
        return;
      }
      return this.add(name, 'param');
    };

    Scope.prototype.check = function(name) {
      var _ref1;
      return !!(this.type(name) || ((_ref1 = this.parent) != null ? _ref1.check(name) : void 0));
    };

    Scope.prototype.temporary = function(name, index) {
      if (name.length > 1) {
        return '_' + name + (index > 1 ? index - 1 : '');
      } else {
        return '_' + (index + parseInt(name, 36)).toString(36).replace(/\d/g, 'a');
      }
    };

    Scope.prototype.type = function(name) {
      var v, _i, _len, _ref1;
      _ref1 = this.variables;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        v = _ref1[_i];
        if (v.name === name) {
          return v.type;
        }
      }
      return null;
    };

    Scope.prototype.freeVariable = function(name, reserve) {
      var index, temp;
      if (reserve == null) {
        reserve = true;
      }
      index = 0;
      while (this.check((temp = this.temporary(name, index)))) {
        index++;
      }
      if (reserve) {
        this.add(temp, 'var', true);
      }
      return temp;
    };

    Scope.prototype.assign = function(name, value) {
      this.add(name, {
        value: value,
        assigned: true
      }, true);
      return this.hasAssignments = true;
    };

    Scope.prototype.hasDeclarations = function() {
      return !!this.declaredVariables().length;
    };

    Scope.prototype.declaredVariables = function() {
      var realVars, tempVars, v, _i, _len, _ref1;
      realVars = [];
      tempVars = [];
      _ref1 = this.variables;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        v = _ref1[_i];
        if (v.type === 'var') {
          (v.name.charAt(0) === '_' ? tempVars : realVars).push(v.name);
        }
      }
      return realVars.sort().concat(tempVars.sort());
    };

    Scope.prototype.assignedVariables = function() {
      var v, _i, _len, _ref1, _results;
      _ref1 = this.variables;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        v = _ref1[_i];
        if (v.type.assigned) {
          _results.push("" + v.name + " = " + v.type.value);
        }
      }
      return _results;
    };

    return Scope;

  })();

}).call(this);
 if(module.exports){ var temp = module.exports; module.exports = void 0; return temp; }};module['./sourcemap'] = new function(){ var exports = this; // Generated by CoffeeScript 1.6.3
(function() {
  var LineMap, SourceMap;

  LineMap = (function() {
    function LineMap(line) {
      this.line = line;
      this.columns = [];
    }

    LineMap.prototype.add = function(column, _arg, options) {
      var sourceColumn, sourceLine;
      sourceLine = _arg[0], sourceColumn = _arg[1];
      if (options == null) {
        options = {};
      }
      if (this.columns[column] && options.noReplace) {
        return;
      }
      return this.columns[column] = {
        line: this.line,
        column: column,
        sourceLine: sourceLine,
        sourceColumn: sourceColumn
      };
    };

    LineMap.prototype.sourceLocation = function(column) {
      var mapping;
      while (!((mapping = this.columns[column]) || (column <= 0))) {
        column--;
      }
      return mapping && [mapping.sourceLine, mapping.sourceColumn];
    };

    return LineMap;

  })();

  SourceMap = (function() {
    var BASE64_CHARS, VLQ_CONTINUATION_BIT, VLQ_SHIFT, VLQ_VALUE_MASK;

    function SourceMap() {
      this.lines = [];
    }

    SourceMap.prototype.add = function(sourceLocation, generatedLocation, options) {
      var column, line, lineMap, _base;
      if (options == null) {
        options = {};
      }
      line = generatedLocation[0], column = generatedLocation[1];
      lineMap = ((_base = this.lines)[line] || (_base[line] = new LineMap(line)));
      return lineMap.add(column, sourceLocation, options);
    };

    SourceMap.prototype.sourceLocation = function(_arg) {
      var column, line, lineMap;
      line = _arg[0], column = _arg[1];
      while (!((lineMap = this.lines[line]) || (line <= 0))) {
        line--;
      }
      return lineMap && lineMap.sourceLocation(column);
    };

    SourceMap.prototype.generate = function(options, code) {
      var buffer, lastColumn, lastSourceColumn, lastSourceLine, lineMap, lineNumber, mapping, needComma, v3, writingline, _i, _j, _len, _len1, _ref, _ref1;
      if (options == null) {
        options = {};
      }
      if (code == null) {
        code = null;
      }
      writingline = 0;
      lastColumn = 0;
      lastSourceLine = 0;
      lastSourceColumn = 0;
      needComma = false;
      buffer = "";
      _ref = this.lines;
      for (lineNumber = _i = 0, _len = _ref.length; _i < _len; lineNumber = ++_i) {
        lineMap = _ref[lineNumber];
        if (lineMap) {
          _ref1 = lineMap.columns;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            mapping = _ref1[_j];
            if (!(mapping)) {
              continue;
            }
            while (writingline < mapping.line) {
              lastColumn = 0;
              needComma = false;
              buffer += ";";
              writingline++;
            }
            if (needComma) {
              buffer += ",";
              needComma = false;
            }
            buffer += this.encodeVlq(mapping.column - lastColumn);
            lastColumn = mapping.column;
            buffer += this.encodeVlq(0);
            buffer += this.encodeVlq(mapping.sourceLine - lastSourceLine);
            lastSourceLine = mapping.sourceLine;
            buffer += this.encodeVlq(mapping.sourceColumn - lastSourceColumn);
            lastSourceColumn = mapping.sourceColumn;
            needComma = true;
          }
        }
      }
      v3 = {
        version: 3,
        file: options.generatedFile || '',
        sourceRoot: options.sourceRoot || '',
        sources: options.sourceFiles || [''],
        names: [],
        mappings: buffer
      };
      if (options.inline) {
        v3.sourcesContent = [code];
      }
      return JSON.stringify(v3, null, 2);
    };

    VLQ_SHIFT = 5;

    VLQ_CONTINUATION_BIT = 1 << VLQ_SHIFT;

    VLQ_VALUE_MASK = VLQ_CONTINUATION_BIT - 1;

    SourceMap.prototype.encodeVlq = function(value) {
      var answer, nextChunk, signBit, valueToEncode;
      answer = '';
      signBit = value < 0 ? 1 : 0;
      valueToEncode = (Math.abs(value) << 1) + signBit;
      while (valueToEncode || !answer) {
        nextChunk = valueToEncode & VLQ_VALUE_MASK;
        valueToEncode = valueToEncode >> VLQ_SHIFT;
        if (valueToEncode) {
          nextChunk |= VLQ_CONTINUATION_BIT;
        }
        answer += this.encodeBase64(nextChunk);
      }
      return answer;
    };

    BASE64_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

    SourceMap.prototype.encodeBase64 = function(value) {
      return BASE64_CHARS[value] || (function() {
        throw new Error("Cannot Base64 encode value: " + value);
      })();
    };

    return SourceMap;

  })();

  module.exports = SourceMap;

}).call(this);
 if(module.exports){ var temp = module.exports; module.exports = void 0; return temp; }};module['./nodes'] = new function(){ var exports = this; // Generated by CoffeeScript 1.6.3
(function() {
  var Access, Arr, Assign, Base, Block, CUSTOM_OPERATOR, Call, Class, Closure, Code, CodeFragment, Comment, Existence, Extends, For, IDENTIFIER, IDENTIFIER_STR, IS_STRING, If, In, Index, InlineWorker, LEVEL_ACCESS, LEVEL_COND, LEVEL_LIST, LEVEL_OP, LEVEL_PAREN, LEVEL_TOP, Literal, METHOD_DEF, MatVec, ModelClass, NEGATE, NO, Obj, Op, Param, Parens, RESERVED, Range, Return, SHADER_PROPERTY, SIMPLENUM, STRICT_PROSCRIBED, SceneClass, Scope, Shader, Slice, Splat, Switch, TAB, THIS, Throw, Try, UTILITIES, Value, While, YES, addLocationDataFn, compact, del, ends, extend, flatten, fragmentsToText, last, locationDataToString, merge, multident, some, starts, throwSyntaxError, unfoldSoak, utility, _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  Error.stackTraceLimit = Infinity;

  Scope = require('./scope').Scope;

  _ref = require('./lexer'), RESERVED = _ref.RESERVED, STRICT_PROSCRIBED = _ref.STRICT_PROSCRIBED;

  _ref1 = require('./helpers'), compact = _ref1.compact, flatten = _ref1.flatten, extend = _ref1.extend, merge = _ref1.merge, del = _ref1.del, starts = _ref1.starts, ends = _ref1.ends, last = _ref1.last, some = _ref1.some, addLocationDataFn = _ref1.addLocationDataFn, locationDataToString = _ref1.locationDataToString, throwSyntaxError = _ref1.throwSyntaxError;

  exports.extend = extend;

  exports.addLocationDataFn = addLocationDataFn;

  YES = function() {
    return true;
  };

  NO = function() {
    return false;
  };

  THIS = function() {
    return this;
  };

  NEGATE = function() {
    this.negated = !this.negated;
    return this;
  };

  exports.CodeFragment = CodeFragment = (function() {
    function CodeFragment(parent, code) {
      var _ref2;
      this.code = "" + code;
      this.locationData = parent != null ? parent.locationData : void 0;
      this.type = (parent != null ? (_ref2 = parent.constructor) != null ? _ref2.name : void 0 : void 0) || 'unknown';
    }

    CodeFragment.prototype.toString = function() {
      return "" + this.code + (this.locationData ? ": " + locationDataToString(this.locationData) : '');
    };

    return CodeFragment;

  })();

  fragmentsToText = function(fragments) {
    var fragment;
    return ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = fragments.length; _i < _len; _i++) {
        fragment = fragments[_i];
        _results.push(fragment.code);
      }
      return _results;
    })()).join('');
  };

  exports.Base = Base = (function() {
    function Base() {}

    Base.prototype.compile = function(o, lvl) {
      return fragmentsToText(this.compileToFragments(o, lvl));
    };

    Base.prototype.compileToFragments = function(o, lvl) {
      var node;
      o = extend({}, o);
      if (lvl) {
        o.level = lvl;
      }
      node = this.unfoldSoak(o) || this;
      node.tab = o.indent;
      if (o.level === LEVEL_TOP || !node.isStatement(o)) {
        return node.compileNode(o);
      } else {
        return node.compileClosure(o);
      }
    };

    Base.prototype.compileClosure = function(o) {
      var jumpNode;
      if (jumpNode = this.jumps()) {
        jumpNode.error('cannot use a pure statement in an expression');
      }
      o.sharedScope = true;
      return Closure.wrap(this).compileNode(o);
    };

    Base.prototype.cache = function(o, level, reused) {
      var ref, sub;
      if (!this.isComplex()) {
        ref = level ? this.compileToFragments(o, level) : this;
        return [ref, ref];
      } else {
        ref = new Literal(reused || o.scope.freeVariable('ref'));
        sub = new Assign(ref, this);
        if (level) {
          return [sub.compileToFragments(o, level), [this.makeCode(ref.value)]];
        } else {
          return [sub, ref];
        }
      }
    };

    Base.prototype.cacheToCodeFragments = function(cacheValues) {
      return [fragmentsToText(cacheValues[0]), fragmentsToText(cacheValues[1])];
    };

    Base.prototype.makeReturn = function(res) {
      var me;
      me = this.unwrapAll();
      if (res) {
        return new Call(new Literal("" + res + ".push"), [me]);
      } else {
        return new Return(me);
      }
    };

    Base.prototype.contains = function(pred) {
      var node;
      node = void 0;
      this.traverseChildren(false, function(n) {
        if (pred(n)) {
          node = n;
          return false;
        }
      });
      return node;
    };

    Base.prototype.lastNonComment = function(list) {
      var i;
      i = list.length;
      while (i--) {
        if (!(list[i] instanceof Comment)) {
          return list[i];
        }
      }
      return null;
    };

    Base.prototype.toString = function(idt, name) {
      var tree;
      if (idt == null) {
        idt = '';
      }
      if (name == null) {
        name = this.constructor.name;
      }
      tree = '\n' + idt + name;
      if (this.soak) {
        tree += '?';
      }
      this.eachChild(function(node) {
        return tree += node.toString(idt + TAB);
      });
      return tree;
    };

    Base.prototype.eachChild = function(func) {
      var attr, child, _i, _j, _len, _len1, _ref2, _ref3;
      if (!this.children) {
        return this;
      }
      _ref2 = this.children;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        attr = _ref2[_i];
        if (this[attr]) {
          _ref3 = flatten([this[attr]]);
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            child = _ref3[_j];
            if (func(child) === false) {
              return this;
            }
          }
        }
      }
      return this;
    };

    Base.prototype.traverseChildren = function(crossScope, func) {
      return this.eachChild(function(child) {
        var recur;
        recur = func(child);
        if (recur !== false) {
          return child.traverseChildren(crossScope, func);
        }
      });
    };

    Base.prototype.invert = function() {
      return new Op('!', this);
    };

    Base.prototype.unwrapAll = function() {
      var node;
      node = this;
      while (node !== (node = node.unwrap())) {
        continue;
      }
      return node;
    };

    Base.prototype.children = [];

    Base.prototype.isStatement = NO;

    Base.prototype.jumps = NO;

    Base.prototype.isComplex = YES;

    Base.prototype.isChainable = NO;

    Base.prototype.isAssignable = NO;

    Base.prototype.unwrap = THIS;

    Base.prototype.unfoldSoak = NO;

    Base.prototype.assigns = NO;

    Base.prototype.updateLocationDataIfMissing = function(locationData) {
      this.locationData || (this.locationData = locationData);
      return this.eachChild(function(child) {
        return child.updateLocationDataIfMissing(locationData);
      });
    };

    Base.prototype.error = function(message) {
      return throwSyntaxError(message, this.locationData);
    };

    Base.prototype.makeCode = function(code) {
      return new CodeFragment(this, code);
    };

    Base.prototype.wrapInBraces = function(fragments) {
      return [].concat(this.makeCode('('), fragments, this.makeCode(')'));
    };

    Base.prototype.joinFragmentArrays = function(fragmentsList, joinStr) {
      var answer, fragments, i, _i, _len;
      answer = [];
      for (i = _i = 0, _len = fragmentsList.length; _i < _len; i = ++_i) {
        fragments = fragmentsList[i];
        if (i) {
          answer.push(this.makeCode(joinStr));
        }
        answer = answer.concat(fragments);
      }
      return answer;
    };

    return Base;

  })();

  exports.Block = Block = (function(_super) {
    __extends(Block, _super);

    function Block(nodes) {
      this.expressions = compact(flatten(nodes || []));
    }

    Block.prototype.children = ['expressions'];

    Block.prototype.push = function(node) {
      this.expressions.push(node);
      return this;
    };

    Block.prototype.pop = function() {
      return this.expressions.pop();
    };

    Block.prototype.unshift = function(node) {
      this.expressions.unshift(node);
      return this;
    };

    Block.prototype.unwrap = function() {
      if (this.expressions.length === 1) {
        return this.expressions[0];
      } else {
        return this;
      }
    };

    Block.prototype.isEmpty = function() {
      return !this.expressions.length;
    };

    Block.prototype.isStatement = function(o) {
      var exp, _i, _len, _ref2;
      _ref2 = this.expressions;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        exp = _ref2[_i];
        if (exp.isStatement(o)) {
          return true;
        }
      }
      return false;
    };

    Block.prototype.jumps = function(o) {
      var exp, _i, _len, _ref2;
      _ref2 = this.expressions;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        exp = _ref2[_i];
        if (exp.jumps(o)) {
          return exp;
        }
      }
    };

    Block.prototype.makeReturn = function(res) {
      var expr, len;
      len = this.expressions.length;
      while (len--) {
        expr = this.expressions[len];
        if (!(expr instanceof Comment)) {
          this.expressions[len] = expr.makeReturn(res);
          if (expr instanceof Return && !expr.expression) {
            this.expressions.splice(len, 1);
          }
          break;
        }
      }
      return this;
    };

    Block.prototype.compileToFragments = function(o, level) {
      if (o == null) {
        o = {};
      }
      if (o.scope) {
        return Block.__super__.compileToFragments.call(this, o, level);
      } else {
        return this.compileRoot(o);
      }
    };

    Block.prototype.compileNode = function(o) {
      var answer, compiledNodes, fragments, index, node, top, _i, _len, _ref2;
      this.tab = o.indent;
      top = o.level === LEVEL_TOP;
      compiledNodes = [];
      _ref2 = this.expressions;
      for (index = _i = 0, _len = _ref2.length; _i < _len; index = ++_i) {
        node = _ref2[index];
        node = node.unwrapAll();
        node = node.unfoldSoak(o) || node;
        if (node instanceof Block) {
          compiledNodes.push(node.compileNode(o));
        } else if (top) {
          node.front = true;
          fragments = node.compileToFragments(o);
          if (!node.isStatement(o)) {
            fragments.unshift(this.makeCode("" + this.tab));
            fragments.push(this.makeCode(";"));
          }
          compiledNodes.push(fragments);
        } else {
          compiledNodes.push(node.compileToFragments(o, LEVEL_LIST));
        }
      }
      if (top) {
        if (this.spaced) {
          return [].concat(this.joinFragmentArrays(compiledNodes, '\n\n'), this.makeCode("\n"));
        } else {
          return this.joinFragmentArrays(compiledNodes, '\n');
        }
      }
      if (compiledNodes.length) {
        answer = this.joinFragmentArrays(compiledNodes, ', ');
      } else {
        answer = [this.makeCode("void 0")];
      }
      if (compiledNodes.length > 1 && o.level >= LEVEL_LIST) {
        return this.wrapInBraces(answer);
      } else {
        return answer;
      }
    };

    Block.prototype.compileRoot = function(o) {
      var exp, fragments, i, name, prelude, preludeExps, rest, _i, _len, _ref2;
      o.indent = o.bare ? '' : TAB;
      o.level = LEVEL_TOP;
      this.spaced = true;
      o.scope = new Scope(null, this, null);
      _ref2 = o.locals || [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        name = _ref2[_i];
        o.scope.parameter(name);
      }
      prelude = [];
      if (!o.bare) {
        preludeExps = (function() {
          var _j, _len1, _ref3, _results;
          _ref3 = this.expressions;
          _results = [];
          for (i = _j = 0, _len1 = _ref3.length; _j < _len1; i = ++_j) {
            exp = _ref3[i];
            if (!(exp.unwrap() instanceof Comment)) {
              break;
            }
            _results.push(exp);
          }
          return _results;
        }).call(this);
        rest = this.expressions.slice(preludeExps.length);
        this.expressions = preludeExps;
        if (preludeExps.length) {
          prelude = this.compileNode(merge(o, {
            indent: ''
          }));
          prelude.push(this.makeCode("\n"));
        }
        this.expressions = rest;
      }
      fragments = this.compileWithDeclarations(o);
      if (o.bare) {
        return fragments;
      }
      return [].concat(prelude, this.makeCode("(function() {\n"), fragments, this.makeCode("\n}).call(this);\n"));
    };

    Block.prototype.compileWithDeclarations = function(o) {
      var assigns, declars, exp, fragments, i, post, rest, scope, spaced, _i, _len, _ref2, _ref3, _ref4;
      fragments = [];
      post = [];
      _ref2 = this.expressions;
      for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
        exp = _ref2[i];
        exp = exp.unwrap();
        if (!(exp instanceof Comment || exp instanceof Literal)) {
          break;
        }
      }
      o = merge(o, {
        level: LEVEL_TOP
      });
      if (i) {
        rest = this.expressions.splice(i, 9e9);
        _ref3 = [this.spaced, false], spaced = _ref3[0], this.spaced = _ref3[1];
        _ref4 = [this.compileNode(o), spaced], fragments = _ref4[0], this.spaced = _ref4[1];
        this.expressions = rest;
      }
      post = this.compileNode(o);
      scope = o.scope;
      if (scope.expressions === this) {
        declars = o.scope.hasDeclarations();
        assigns = scope.hasAssignments;
        if (declars || assigns) {
          if (i) {
            fragments.push(this.makeCode('\n'));
          }
          fragments.push(this.makeCode("" + this.tab + "var "));
          if (declars) {
            fragments.push(this.makeCode(scope.declaredVariables().join(', ')));
          }
          if (assigns) {
            if (declars) {
              fragments.push(this.makeCode(",\n" + (this.tab + TAB)));
            }
            fragments.push(this.makeCode(scope.assignedVariables().join(",\n" + (this.tab + TAB))));
          }
          fragments.push(this.makeCode(";\n" + (this.spaced ? '\n' : '')));
        } else if (fragments.length && post.length) {
          fragments.push(this.makeCode("\n"));
        }
      }
      return fragments.concat(post);
    };

    Block.wrap = function(nodes) {
      if (nodes.length === 1 && nodes[0] instanceof Block) {
        return nodes[0];
      }
      return new Block(nodes);
    };

    return Block;

  })(Base);

  exports.Literal = Literal = (function(_super) {
    __extends(Literal, _super);

    function Literal(value) {
      this.value = value;
    }

    Literal.prototype.makeReturn = function() {
      if (this.isStatement()) {
        return this;
      } else {
        return Literal.__super__.makeReturn.apply(this, arguments);
      }
    };

    Literal.prototype.isAssignable = function() {
      return IDENTIFIER.test(this.value);
    };

    Literal.prototype.isStatement = function() {
      var _ref2;
      return (_ref2 = this.value) === 'break' || _ref2 === 'continue' || _ref2 === 'debugger';
    };

    Literal.prototype.isComplex = NO;

    Literal.prototype.assigns = function(name) {
      return name === this.value;
    };

    Literal.prototype.jumps = function(o) {
      if (this.value === 'break' && !((o != null ? o.loop : void 0) || (o != null ? o.block : void 0))) {
        return this;
      }
      if (this.value === 'continue' && !(o != null ? o.loop : void 0)) {
        return this;
      }
    };

    Literal.prototype.compileNode = function(o) {
      var answer, code, _ref2;
      code = this.value === 'this' ? ((_ref2 = o.scope.method) != null ? _ref2.bound : void 0) ? o.scope.method.context : this.value : this.value.reserved ? "\"" + this.value + "\"" : this.value;
      answer = this.isStatement() ? "" + this.tab + code + ";" : code;
      return [this.makeCode(answer)];
    };

    Literal.prototype.toString = function() {
      return ' "' + this.value + '"';
    };

    return Literal;

  })(Base);

  exports.Undefined = (function(_super) {
    __extends(Undefined, _super);

    function Undefined() {
      _ref2 = Undefined.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Undefined.prototype.isAssignable = NO;

    Undefined.prototype.isComplex = NO;

    Undefined.prototype.compileNode = function(o) {
      return [this.makeCode(o.level >= LEVEL_ACCESS ? '(void 0)' : 'void 0')];
    };

    return Undefined;

  })(Base);

  exports.Null = (function(_super) {
    __extends(Null, _super);

    function Null() {
      _ref3 = Null.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    Null.prototype.isAssignable = NO;

    Null.prototype.isComplex = NO;

    Null.prototype.compileNode = function() {
      return [this.makeCode("null")];
    };

    return Null;

  })(Base);

  exports.Bool = (function(_super) {
    __extends(Bool, _super);

    Bool.prototype.isAssignable = NO;

    Bool.prototype.isComplex = NO;

    Bool.prototype.compileNode = function() {
      return [this.makeCode(this.val)];
    };

    function Bool(val) {
      this.val = val;
    }

    return Bool;

  })(Base);

  exports.Return = Return = (function(_super) {
    __extends(Return, _super);

    function Return(expr) {
      if (expr && !expr.unwrap().isUndefined) {
        this.expression = expr;
      }
    }

    Return.prototype.children = ['expression'];

    Return.prototype.isStatement = YES;

    Return.prototype.makeReturn = THIS;

    Return.prototype.jumps = THIS;

    Return.prototype.compileToFragments = function(o, level) {
      var expr, _ref4;
      expr = (_ref4 = this.expression) != null ? _ref4.makeReturn() : void 0;
      if (expr && !(expr instanceof Return)) {
        return expr.compileToFragments(o, level);
      } else {
        return Return.__super__.compileToFragments.call(this, o, level);
      }
    };

    Return.prototype.compileNode = function(o) {
      var answer;
      answer = [];
      answer.push(this.makeCode(this.tab + ("return" + (this.expression ? " " : ""))));
      if (this.expression) {
        answer = answer.concat(this.expression.compileToFragments(o, LEVEL_PAREN));
      }
      answer.push(this.makeCode(";"));
      return answer;
    };

    return Return;

  })(Base);

  exports.Value = Value = (function(_super) {
    __extends(Value, _super);

    function Value(base, props, tag) {
      if (!props && base instanceof Value) {
        return base;
      }
      this.base = base;
      this.properties = props || [];
      if (tag) {
        this[tag] = true;
      }
      return this;
    }

    Value.prototype.children = ['base', 'properties'];

    Value.prototype.add = function(props) {
      this.properties = this.properties.concat(props);
      return this;
    };

    Value.prototype.hasProperties = function() {
      return !!this.properties.length;
    };

    Value.prototype.isArray = function() {
      return !this.properties.length && this.base instanceof Arr;
    };

    Value.prototype.isComplex = function() {
      return this.hasProperties() || this.base.isComplex();
    };

    Value.prototype.isAssignable = function() {
      return this.hasProperties() || this.base.isAssignable();
    };

    Value.prototype.isSimpleNumber = function() {
      return this.base instanceof Literal && SIMPLENUM.test(this.base.value);
    };

    Value.prototype.isString = function() {
      return this.base instanceof Literal && IS_STRING.test(this.base.value);
    };

    Value.prototype.isAtomic = function() {
      var node, _i, _len, _ref4;
      _ref4 = this.properties.concat(this.base);
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        node = _ref4[_i];
        if (node.soak || node instanceof Call) {
          return false;
        }
      }
      return true;
    };

    Value.prototype.isStatement = function(o) {
      return !this.properties.length && this.base.isStatement(o);
    };

    Value.prototype.assigns = function(name) {
      return !this.properties.length && this.base.assigns(name);
    };

    Value.prototype.jumps = function(o) {
      return !this.properties.length && this.base.jumps(o);
    };

    Value.prototype.isObject = function(onlyGenerated) {
      if (this.properties.length) {
        return false;
      }
      return (this.base instanceof Obj) && (!onlyGenerated || this.base.generated);
    };

    Value.prototype.isSplice = function() {
      return last(this.properties) instanceof Slice;
    };

    Value.prototype.unwrap = function() {
      if (this.properties.length) {
        return this;
      } else {
        return this.base;
      }
    };

    Value.prototype.cacheReference = function(o) {
      var base, bref, name, nref;
      name = last(this.properties);
      if (this.properties.length < 2 && !this.base.isComplex() && !(name != null ? name.isComplex() : void 0)) {
        return [this, this];
      }
      base = new Value(this.base, this.properties.slice(0, -1));
      if (base.isComplex()) {
        bref = new Literal(o.scope.freeVariable('base'));
        base = new Value(new Parens(new Assign(bref, base)));
      }
      if (!name) {
        return [base, bref];
      }
      if (name.isComplex()) {
        nref = new Literal(o.scope.freeVariable('name'));
        name = new Index(new Assign(nref, name.index));
        nref = new Index(nref);
      }
      return [base.add(name), new Value(bref || base.base, [nref || name])];
    };

    Value.prototype.compileNode = function(o) {
      var fragments, prop, props, _i, _len;
      this.base.front = this.front;
      props = this.properties;
      fragments = this.base.compileToFragments(o, (props.length ? LEVEL_ACCESS : null));
      if ((this.base instanceof Parens || props.length) && SIMPLENUM.test(fragmentsToText(fragments))) {
        fragments.push(this.makeCode('.'));
      }
      for (_i = 0, _len = props.length; _i < _len; _i++) {
        prop = props[_i];
        fragments.push.apply(fragments, prop.compileToFragments(o));
      }
      return fragments;
    };

    Value.prototype.unfoldSoak = function(o) {
      var _this = this;
      return this.unfoldedSoak != null ? this.unfoldedSoak : this.unfoldedSoak = (function() {
        var fst, i, ifn, prop, ref, snd, _i, _len, _ref4, _ref5;
        if (ifn = _this.base.unfoldSoak(o)) {
          (_ref4 = ifn.body.properties).push.apply(_ref4, _this.properties);
          return ifn;
        }
        _ref5 = _this.properties;
        for (i = _i = 0, _len = _ref5.length; _i < _len; i = ++_i) {
          prop = _ref5[i];
          if (!prop.soak) {
            continue;
          }
          prop.soak = false;
          fst = new Value(_this.base, _this.properties.slice(0, i));
          snd = new Value(_this.base, _this.properties.slice(i));
          if (fst.isComplex()) {
            ref = new Literal(o.scope.freeVariable('ref'));
            fst = new Parens(new Assign(ref, fst));
            snd.base = ref;
          }
          return new If(new Existence(fst), snd, {
            soak: true
          });
        }
        return false;
      })();
    };

    return Value;

  })(Base);

  exports.Comment = Comment = (function(_super) {
    __extends(Comment, _super);

    function Comment(comment) {
      this.comment = comment;
    }

    Comment.prototype.isStatement = YES;

    Comment.prototype.makeReturn = THIS;

    Comment.prototype.compileNode = function(o, level) {
      var code;
      code = "/*" + (multident(this.comment, this.tab)) + (__indexOf.call(this.comment, '\n') >= 0 ? "\n" + this.tab : '') + "*/\n";
      if ((level || o.level) === LEVEL_TOP) {
        code = o.indent + code;
      }
      return [this.makeCode(code)];
    };

    return Comment;

  })(Base);

  exports.Call = Call = (function(_super) {
    __extends(Call, _super);

    function Call(variable, args, soak) {
      this.args = args != null ? args : [];
      this.soak = soak;
      this.isNew = false;
      this.isSuper = variable === 'super';
      this.variable = this.isSuper ? null : variable;
    }

    Call.prototype.children = ['variable', 'args'];

    Call.prototype.newInstance = function() {
      var base, _ref4;
      base = ((_ref4 = this.variable) != null ? _ref4.base : void 0) || this.variable;
      if (base instanceof Call && !base.isNew) {
        base.newInstance();
      } else {
        this.isNew = true;
      }
      return this;
    };

    Call.prototype.superReference = function(o) {
      var accesses, method;
      method = o.scope.namedMethod();
      if (method != null ? method.klass : void 0) {
        accesses = [new Access(new Literal('__super__'))];
        if (method["static"]) {
          accesses.push(new Access(new Literal('constructor')));
        }
        accesses.push(new Access(new Literal(method.name)));
        return (new Value(new Literal(method.klass), accesses)).compile(o);
      } else if (method != null ? method.ctor : void 0) {
        return "" + method.name + ".__super__.constructor";
      } else {
        return this.error('cannot call super outside of an instance method.');
      }
    };

    Call.prototype.superThis = function(o) {
      var method;
      method = o.scope.method;
      return (method && !method.klass && method.context) || "this";
    };

    Call.prototype.unfoldSoak = function(o) {
      var call, ifn, left, list, rite, _i, _len, _ref4, _ref5;
      if (this.soak) {
        if (this.variable) {
          if (ifn = unfoldSoak(o, this, 'variable')) {
            return ifn;
          }
          _ref4 = new Value(this.variable).cacheReference(o), left = _ref4[0], rite = _ref4[1];
        } else {
          left = new Literal(this.superReference(o));
          rite = new Value(left);
        }
        rite = new Call(rite, this.args);
        rite.isNew = this.isNew;
        left = new Literal("typeof " + (left.compile(o)) + " === \"function\"");
        return new If(left, new Value(rite), {
          soak: true
        });
      }
      call = this;
      list = [];
      while (true) {
        if (call.variable instanceof Call) {
          list.push(call);
          call = call.variable;
          continue;
        }
        if (!(call.variable instanceof Value)) {
          break;
        }
        list.push(call);
        if (!((call = call.variable.base) instanceof Call)) {
          break;
        }
      }
      _ref5 = list.reverse();
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        call = _ref5[_i];
        if (ifn) {
          if (call.variable instanceof Call) {
            call.variable = ifn;
          } else {
            call.variable.base = ifn;
          }
        }
        ifn = unfoldSoak(o, call, 'variable');
      }
      return ifn;
    };

    Call.prototype.compileNode = function(o) {
      var arg, argIndex, compiledArgs, compiledArray, fragments, preface, _i, _len, _ref4, _ref5;
      if ((_ref4 = this.variable) != null) {
        _ref4.front = this.front;
      }
      compiledArray = Splat.compileSplattedArray(o, this.args, true);
      if (compiledArray.length) {
        return this.compileSplat(o, compiledArray);
      }
      compiledArgs = [];
      _ref5 = this.args;
      for (argIndex = _i = 0, _len = _ref5.length; _i < _len; argIndex = ++_i) {
        arg = _ref5[argIndex];
        if (argIndex) {
          compiledArgs.push(this.makeCode(", "));
        }
        compiledArgs.push.apply(compiledArgs, arg.compileToFragments(o, LEVEL_LIST));
      }
      fragments = [];
      if (this.isSuper) {
        preface = this.superReference(o) + (".call(" + (this.superThis(o)));
        if (compiledArgs.length) {
          preface += ", ";
        }
        fragments.push(this.makeCode(preface));
      } else {
        if (this.isNew) {
          fragments.push(this.makeCode('new '));
        }
        fragments.push.apply(fragments, this.variable.compileToFragments(o, LEVEL_ACCESS));
        fragments.push(this.makeCode("("));
      }
      fragments.push.apply(fragments, compiledArgs);
      fragments.push(this.makeCode(")"));
      return fragments;
    };

    Call.prototype.compileSplat = function(o, splatArgs) {
      var answer, base, fun, idt, name, ref;
      if (this.isSuper) {
        return [].concat(this.makeCode("" + (this.superReference(o)) + ".apply(" + (this.superThis(o)) + ", "), splatArgs, this.makeCode(")"));
      }
      if (this.isNew) {
        idt = this.tab + TAB;
        return [].concat(this.makeCode("(function(func, args, ctor) {\n" + idt + "ctor.prototype = func.prototype;\n" + idt + "var child = new ctor, result = func.apply(child, args);\n" + idt + "return Object(result) === result ? result : child;\n" + this.tab + "})("), this.variable.compileToFragments(o, LEVEL_LIST), this.makeCode(", "), splatArgs, this.makeCode(", function(){})"));
      }
      answer = [];
      base = new Value(this.variable);
      if ((name = base.properties.pop()) && base.isComplex()) {
        ref = o.scope.freeVariable('ref');
        answer = answer.concat(this.makeCode("(" + ref + " = "), base.compileToFragments(o, LEVEL_LIST), this.makeCode(")"), name.compileToFragments(o));
      } else {
        fun = base.compileToFragments(o, LEVEL_ACCESS);
        if (SIMPLENUM.test(fragmentsToText(fun))) {
          fun = this.wrapInBraces(fun);
        }
        if (name) {
          ref = fragmentsToText(fun);
          fun.push.apply(fun, name.compileToFragments(o));
        } else {
          ref = 'null';
        }
        answer = answer.concat(fun);
      }
      return answer = answer.concat(this.makeCode(".apply(" + ref + ", "), splatArgs, this.makeCode(")"));
    };

    return Call;

  })(Base);

  exports.Extends = Extends = (function(_super) {
    __extends(Extends, _super);

    function Extends(child, parent) {
      this.child = child;
      this.parent = parent;
    }

    Extends.prototype.children = ['child', 'parent'];

    Extends.prototype.compileToFragments = function(o) {
      return new Call(new Value(new Literal(utility('extends'))), [this.child, this.parent]).compileToFragments(o);
    };

    return Extends;

  })(Base);

  exports.Access = Access = (function(_super) {
    __extends(Access, _super);

    function Access(name, tag) {
      this.name = name;
      this.name.asKey = true;
      this.soak = tag === 'soak';
    }

    Access.prototype.children = ['name'];

    Access.prototype.compileToFragments = function(o) {
      var name;
      name = this.name.compileToFragments(o);
      if (IDENTIFIER.test(fragmentsToText(name))) {
        name.unshift(this.makeCode("."));
      } else {
        name.unshift(this.makeCode("["));
        name.push(this.makeCode("]"));
      }
      return name;
    };

    Access.prototype.isComplex = NO;

    return Access;

  })(Base);

  exports.Index = Index = (function(_super) {
    __extends(Index, _super);

    function Index(index) {
      this.index = index;
    }

    Index.prototype.children = ['index'];

    Index.prototype.compileToFragments = function(o) {
      return [].concat(this.makeCode("["), this.index.compileToFragments(o, LEVEL_PAREN), this.makeCode("]"));
    };

    Index.prototype.isComplex = function() {
      return this.index.isComplex();
    };

    return Index;

  })(Base);

  exports.Range = Range = (function(_super) {
    __extends(Range, _super);

    Range.prototype.children = ['from', 'to'];

    function Range(from, to, tag) {
      this.from = from;
      this.to = to;
      this.exclusive = tag === 'exclusive';
      this.equals = this.exclusive ? '' : '=';
    }

    Range.prototype.compileVariables = function(o) {
      var step, _ref4, _ref5, _ref6, _ref7;
      o = merge(o, {
        top: true
      });
      _ref4 = this.cacheToCodeFragments(this.from.cache(o, LEVEL_LIST)), this.fromC = _ref4[0], this.fromVar = _ref4[1];
      _ref5 = this.cacheToCodeFragments(this.to.cache(o, LEVEL_LIST)), this.toC = _ref5[0], this.toVar = _ref5[1];
      if (step = del(o, 'step')) {
        _ref6 = this.cacheToCodeFragments(step.cache(o, LEVEL_LIST)), this.step = _ref6[0], this.stepVar = _ref6[1];
      }
      _ref7 = [this.fromVar.match(SIMPLENUM), this.toVar.match(SIMPLENUM)], this.fromNum = _ref7[0], this.toNum = _ref7[1];
      if (this.stepVar) {
        return this.stepNum = this.stepVar.match(SIMPLENUM);
      }
    };

    Range.prototype.compileNode = function(o) {
      var cond, condPart, from, gt, idx, idxName, known, lt, namedIndex, stepPart, to, varPart, _ref4, _ref5;
      if (!this.fromVar) {
        this.compileVariables(o);
      }
      if (!o.index) {
        return this.compileArray(o);
      }
      known = this.fromNum && this.toNum;
      idx = del(o, 'index');
      idxName = del(o, 'name');
      namedIndex = idxName && idxName !== idx;
      varPart = "" + idx + " = " + this.fromC;
      if (this.toC !== this.toVar) {
        varPart += ", " + this.toC;
      }
      if (this.step !== this.stepVar) {
        varPart += ", " + this.step;
      }
      _ref4 = ["" + idx + " <" + this.equals, "" + idx + " >" + this.equals], lt = _ref4[0], gt = _ref4[1];
      condPart = this.stepNum ? +this.stepNum > 0 ? "" + lt + " " + this.toVar : "" + gt + " " + this.toVar : known ? ((_ref5 = [+this.fromNum, +this.toNum], from = _ref5[0], to = _ref5[1], _ref5), from <= to ? "" + lt + " " + to : "" + gt + " " + to) : (cond = this.stepVar ? "" + this.stepVar + " > 0" : "" + this.fromVar + " <= " + this.toVar, "" + cond + " ? " + lt + " " + this.toVar + " : " + gt + " " + this.toVar);
      stepPart = this.stepVar ? "" + idx + " += " + this.stepVar : known ? namedIndex ? from <= to ? "++" + idx : "--" + idx : from <= to ? "" + idx + "++" : "" + idx + "--" : namedIndex ? "" + cond + " ? ++" + idx + " : --" + idx : "" + cond + " ? " + idx + "++ : " + idx + "--";
      if (namedIndex) {
        varPart = "" + idxName + " = " + varPart;
      }
      if (namedIndex) {
        stepPart = "" + idxName + " = " + stepPart;
      }
      return [this.makeCode("" + varPart + "; " + condPart + "; " + stepPart)];
    };

    Range.prototype.compileArray = function(o) {
      var args, body, cond, hasArgs, i, idt, post, pre, range, result, vars, _i, _ref4, _ref5, _results;
      if (this.fromNum && this.toNum && Math.abs(this.fromNum - this.toNum) <= 20) {
        range = (function() {
          _results = [];
          for (var _i = _ref4 = +this.fromNum, _ref5 = +this.toNum; _ref4 <= _ref5 ? _i <= _ref5 : _i >= _ref5; _ref4 <= _ref5 ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this);
        if (this.exclusive) {
          range.pop();
        }
        return [this.makeCode("[" + (range.join(', ')) + "]")];
      }
      idt = this.tab + TAB;
      i = o.scope.freeVariable('i');
      result = o.scope.freeVariable('results');
      pre = "\n" + idt + result + " = [];";
      if (this.fromNum && this.toNum) {
        o.index = i;
        body = fragmentsToText(this.compileNode(o));
      } else {
        vars = ("" + i + " = " + this.fromC) + (this.toC !== this.toVar ? ", " + this.toC : '');
        cond = "" + this.fromVar + " <= " + this.toVar;
        body = "var " + vars + "; " + cond + " ? " + i + " <" + this.equals + " " + this.toVar + " : " + i + " >" + this.equals + " " + this.toVar + "; " + cond + " ? " + i + "++ : " + i + "--";
      }
      post = "{ " + result + ".push(" + i + "); }\n" + idt + "return " + result + ";\n" + o.indent;
      hasArgs = function(node) {
        return node != null ? node.contains(function(n) {
          return n instanceof Literal && n.value === 'arguments' && !n.asKey;
        }) : void 0;
      };
      if (hasArgs(this.from) || hasArgs(this.to)) {
        args = ', arguments';
      }
      return [this.makeCode("(function() {" + pre + "\n" + idt + "for (" + body + ")" + post + "}).apply(this" + (args != null ? args : '') + ")")];
    };

    return Range;

  })(Base);

  exports.Slice = Slice = (function(_super) {
    __extends(Slice, _super);

    Slice.prototype.children = ['range'];

    function Slice(range) {
      this.range = range;
      Slice.__super__.constructor.call(this);
    }

    Slice.prototype.compileNode = function(o) {
      var compiled, compiledText, from, fromCompiled, to, toStr, _ref4;
      _ref4 = this.range, to = _ref4.to, from = _ref4.from;
      fromCompiled = from && from.compileToFragments(o, LEVEL_PAREN) || [this.makeCode('0')];
      if (to) {
        compiled = to.compileToFragments(o, LEVEL_PAREN);
        compiledText = fragmentsToText(compiled);
        if (!(!this.range.exclusive && +compiledText === -1)) {
          toStr = ', ' + (this.range.exclusive ? compiledText : SIMPLENUM.test(compiledText) ? "" + (+compiledText + 1) : (compiled = to.compileToFragments(o, LEVEL_ACCESS), "+" + (fragmentsToText(compiled)) + " + 1 || 9e9"));
        }
      }
      return [this.makeCode(".slice(" + (fragmentsToText(fromCompiled)) + (toStr || '') + ")")];
    };

    return Slice;

  })(Base);

  exports.Obj = Obj = (function(_super) {
    __extends(Obj, _super);

    function Obj(props, generated) {
      this.generated = generated != null ? generated : false;
      this.objects = this.properties = props || [];
    }

    Obj.prototype.children = ['properties'];

    Obj.prototype.compileNode = function(o) {
      var answer, i, idt, indent, join, lastNoncom, node, prop, props, _i, _j, _len, _len1;
      props = this.properties;
      if (!props.length) {
        return [this.makeCode(this.front ? '({})' : '{}')];
      }
      if (this.generated) {
        for (_i = 0, _len = props.length; _i < _len; _i++) {
          node = props[_i];
          if (node instanceof Value) {
            node.error('cannot have an implicit value in an implicit object');
          }
        }
      }
      idt = o.indent += TAB;
      lastNoncom = this.lastNonComment(this.properties);
      answer = [];
      for (i = _j = 0, _len1 = props.length; _j < _len1; i = ++_j) {
        prop = props[i];
        join = i === props.length - 1 ? '' : prop === lastNoncom || prop instanceof Comment ? '\n' : ',\n';
        indent = prop instanceof Comment ? '' : idt;
        if (prop instanceof Assign && prop.variable instanceof Value && prop.variable.hasProperties()) {
          prop.variable.error('Invalid object key');
        }
        if (prop instanceof Value && prop["this"]) {
          prop = new Assign(prop.properties[0].name, prop, 'object');
        }
        if (!(prop instanceof Comment)) {
          if (!(prop instanceof Assign)) {
            prop = new Assign(prop, prop, 'object');
          }
          (prop.variable.base || prop.variable).asKey = true;
        }
        if (indent) {
          answer.push(this.makeCode(indent));
        }
        answer.push.apply(answer, prop.compileToFragments(o, LEVEL_TOP));
        if (join) {
          answer.push(this.makeCode(join));
        }
      }
      answer.unshift(this.makeCode("{" + (props.length && '\n')));
      answer.push(this.makeCode("" + (props.length && '\n' + this.tab) + "}"));
      if (this.front) {
        return this.wrapInBraces(answer);
      } else {
        return answer;
      }
    };

    Obj.prototype.assigns = function(name) {
      var prop, _i, _len, _ref4;
      _ref4 = this.properties;
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        prop = _ref4[_i];
        if (prop.assigns(name)) {
          return true;
        }
      }
      return false;
    };

    return Obj;

  })(Base);

  exports.Arr = Arr = (function(_super) {
    __extends(Arr, _super);

    function Arr(objs) {
      this.objects = objs || [];
    }

    Arr.prototype.children = ['objects'];

    Arr.prototype.compileNode = function(o) {
      var answer, compiledObjs, fragments, index, obj, _i, _len;
      if (!this.objects.length) {
        return [this.makeCode('[]')];
      }
      o.indent += TAB;
      answer = Splat.compileSplattedArray(o, this.objects);
      if (answer.length) {
        return answer;
      }
      answer = [];
      compiledObjs = (function() {
        var _i, _len, _ref4, _results;
        _ref4 = this.objects;
        _results = [];
        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
          obj = _ref4[_i];
          _results.push(obj.compileToFragments(o, LEVEL_LIST));
        }
        return _results;
      }).call(this);
      for (index = _i = 0, _len = compiledObjs.length; _i < _len; index = ++_i) {
        fragments = compiledObjs[index];
        if (index) {
          answer.push(this.makeCode(", "));
        }
        answer.push.apply(answer, fragments);
      }
      if (fragmentsToText(answer).indexOf('\n') >= 0) {
        answer.unshift(this.makeCode("[\n" + o.indent));
        answer.push(this.makeCode("\n" + this.tab + "]"));
      } else {
        answer.unshift(this.makeCode("["));
        answer.push(this.makeCode("]"));
      }
      return answer;
    };

    Arr.prototype.assigns = function(name) {
      var obj, _i, _len, _ref4;
      _ref4 = this.objects;
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        obj = _ref4[_i];
        if (obj.assigns(name)) {
          return true;
        }
      }
      return false;
    };

    return Arr;

  })(Base);

  exports.MatVec = MatVec = (function(_super) {
    __extends(MatVec, _super);

    function MatVec(objects, type) {
      this.objects = objects;
      this.type = type;
    }

    MatVec.prototype.children = ['objects'];

    MatVec.prototype.compileNode = function(o) {
      var answer, compiledObjs, fragments, index, obj, ucfirst, _i, _len;
      o.indent += TAB;
      ucfirst = function(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
      };
      answer = [];
      compiledObjs = (function() {
        var _i, _len, _ref4, _results;
        _ref4 = this.objects;
        _results = [];
        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
          obj = _ref4[_i];
          _results.push(obj.compileToFragments(o, LEVEL_LIST));
        }
        return _results;
      }).call(this);
      for (index = _i = 0, _len = compiledObjs.length; _i < _len; index = ++_i) {
        fragments = compiledObjs[index];
        if (index) {
          answer.push(this.makeCode(", "));
        }
        answer.push.apply(answer, fragments);
      }
      if (fragmentsToText(answer).indexOf('\n') >= 0) {
        answer.unshift(this.makeCode("[\n" + o.indent));
        answer.push(this.makeCode("\n" + this.tab + "]"));
      } else {
        answer.unshift(this.makeCode("new " + (ucfirst(this.type)) + "(["));
        answer.push(this.makeCode("])"));
      }
      return answer;
    };

    MatVec.prototype.assigns = function(name) {
      var obj, _i, _len, _ref4;
      _ref4 = this.objects;
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        obj = _ref4[_i];
        if (obj.assigns(name)) {
          return true;
        }
      }
      return false;
    };

    return MatVec;

  })(Base);

  exports.InlineWorker = InlineWorker = (function(_super) {
    __extends(InlineWorker, _super);

    function InlineWorker(variable, body) {
      this.variable = variable;
      this.body = body;
    }

    InlineWorker.prototype.children = ['variable', 'body'];

    InlineWorker.prototype.compileNode = function(o) {
      var answer, compiledBody, dataURI, klass, trueRoot;
      o.indent += TAB;
      trueRoot = Scope.root;
      Scope.root = o;
      answer = [];
      compiledBody = fragmentsToText(this.body.compileToFragments(Block.wrap([o]), LEVEL_PAREN));
      compiledBody = compiledBody.replace(/"/g, '\\"');
      compiledBody = compiledBody.replace(/.*/g, '"$&"+');
      compiledBody += '\n""';
      dataURI = "\"data:text/javascript;charset=UTF-8,\"+encodeURIComponent(\n" + compiledBody + ")";
      Scope.root = trueRoot;
      klass = new Class(this.variable, new Value(new Literal(utility("codeWorker"))));
      klass.body = Block.wrap([new Assign(new Value(new Literal("this"), [new Access(new Literal("dataURI"))], 'this'), new Value(new Literal(dataURI))), new Assign(new Value(new Literal("this"), [new Access(new Literal("name"))], 'this'), new Value(new Literal("\"" + klass.determineName() + "\"")))]);
      return klass.compileToFragments(o);
    };

    return InlineWorker;

  })(Base);

  exports.ModelClass = ModelClass = (function(_super) {
    __extends(ModelClass, _super);

    function ModelClass(variable, body) {
      this.variable = variable;
      this.body = body;
    }

    ModelClass.prototype.children = ['variable', 'body'];

    ModelClass.prototype.compileNode = function(o) {
      var klass;
      klass = new Class(this.variable, new Value(new Literal("ModelObject")), this.body);
      return klass.compileToFragments(o);
    };

    return ModelClass;

  })(Base);

  exports.SceneClass = SceneClass = (function(_super) {
    __extends(SceneClass, _super);

    function SceneClass(variable, body) {
      this.variable = variable;
      this.body = body;
    }

    SceneClass.prototype.children = ['variable', 'body'];

    SceneClass.prototype.compileNode = function(o) {
      var klass;
      klass = new Class(this.variable, new Value(new Literal("Scene")), this.body);
      return klass.compileToFragments(o);
    };

    return SceneClass;

  })(Base);

  exports.Shader = Shader = (function(_super) {
    __extends(Shader, _super);

    function Shader(variable, vertex, fragment, options) {
      this.variable = variable;
      this.vertex = vertex;
      this.fragment = fragment;
      this.options = options != null ? options : new Obj;
    }

    Shader.prototype.children = ['variable', 'options'];

    /*
    scanShader: (shader) ->
      #PROPERTY = /^>\s*(attribute|uniform)\s+([a-z0-9]+)\s+([a-z0-9]+)/mi
      shader = shader.replace /^"(.*)"$/g, "$1"
      shader = shader.replace /\\n/g, "\n"
      
      PROPERTY = /^>\s*(attribute|uniform)\s+([a-z0-9]+)\s+([a-z0-9]+)/mig
      properties = []
      while matches = PROPERTY.exec shader
        properties.push [matches[1], matches[2], matches[3]]
      
      shader = shader.replace PROPERTY, "$1 $2 $3"
      shader = shader.replace( /^(.*)$/mg, '"$1\\n"+' ) + '""';
      return [shader, properties]
    */


    Shader.prototype.compileNode = function(o) {
      var assignFragment, assignVertex, fragmentShader, vertexShader;
      vertexShader = this.vertex.value;
      fragmentShader = this.fragment.value;
      /*
      @options.properties.push( new Assign new Value( new Literal( "vertexShaderProperties")), new Value( new Literal JSON.stringify vertexShader[1]), 'object' )
      @options.properties.push( new Assign new Value( new Literal( "fragmentShaderProperties")), new Value( new Literal JSON.stringify fragmentShader[1]), 'object' )
      
      setOptionsName = new Value( new Literal("this"), [new Access( new Literal "setOptions" )], 'this')
      setOptionsParams = [new Value @options]
      setOptions = new Call setOptionsName, setOptionsParams 
        
      klass = new Class @variable, new Value(new Literal "ShaderSources")
      klass.body = Block.wrap([
          new Assign new Value(new Literal("instance")), new Value(new Literal "null")
          new Value( new Obj([
            new Assign( 
              new Value(new Literal("this"), [new Access(new Literal "get")], 'this'), 
              new Code(
                [], 
                new Block([
                  new Return (
                    new Assign( 
                      new Value(
                        new Literal("instance")
                      ), 
                      new Value(
                        new Op "new", new Literal klass.determineName()
                      ), 
                      '?=' 
                    )
                  )
                ])
              ),
            )
            new Assign( 
              new Value(new Literal("constructor")), 
              new Code(
                [], 
                new Block([
                  setOptions
                ])
              )
            )
            new Assign( new Value(new Literal("vertexShader")), new Value(new Literal vertexShader[0]), 'object')
            new Assign( new Value(new Literal("fragmentShader")), new Value(new Literal fragmentShader[0]), 'object')
          ], true))
        ])
      klass.compileToFragments o
      */

      assignVertex = new Assign((new Value(new Literal("window.Enliven.ShaderSources"))).add(new Index(new Value(new Literal("\"" + this.variable.base.value + ".vertex\"")))), new Value(new Literal(vertexShader)));
      assignFragment = new Assign((new Value(new Literal("window.Enliven.ShaderSources"))).add(new Index(new Value(new Literal("\"" + this.variable.base.value + ".fragment\"")))), new Value(new Literal(fragmentShader)));
      return [].concat(assignVertex.compileToFragments(o), this.makeCode(";"), assignFragment.compileToFragments(o));
    };

    return Shader;

  })(Base);

  exports.Class = Class = (function(_super) {
    __extends(Class, _super);

    function Class(variable, parent, body) {
      this.variable = variable;
      this.parent = parent;
      this.body = body != null ? body : new Block;
      this.boundFuncs = [];
      this.body.classBody = true;
    }

    Class.prototype.children = ['variable', 'parent', 'body'];

    Class.prototype.determineName = function() {
      var decl, tail;
      if (!this.variable) {
        return null;
      }
      decl = (tail = last(this.variable.properties)) ? tail instanceof Access && tail.name.value : this.variable.base.value;
      if (__indexOf.call(STRICT_PROSCRIBED, decl) >= 0) {
        this.variable.error("class variable name may not be " + decl);
      }
      return decl && (decl = IDENTIFIER.test(decl) && decl);
    };

    Class.prototype.setContext = function(name) {
      return this.body.traverseChildren(false, function(node) {
        if (node.classBody) {
          return false;
        }
        if (node instanceof Literal && node.value === 'this') {
          return node.value = name;
        } else if (node instanceof Code) {
          node.klass = name;
          if (node.bound) {
            return node.context = name;
          }
        }
      });
    };

    Class.prototype.addBoundFunctions = function(o) {
      var bvar, lhs, _i, _len, _ref4;
      _ref4 = this.boundFuncs;
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        bvar = _ref4[_i];
        lhs = (new Value(new Literal("this"), [new Access(bvar)])).compile(o);
        this.ctor.body.unshift(new Literal("" + lhs + " = " + (utility('bind')) + "(" + lhs + ", this)"));
      }
    };

    Class.prototype.addProperties = function(node, name, o) {
      var assign, base, exprs, func, props;
      props = node.base.properties.slice(0);
      exprs = (function() {
        var _results;
        _results = [];
        while (assign = props.shift()) {
          if (assign instanceof Assign) {
            base = assign.variable.base;
            delete assign.context;
            func = assign.value;
            if (base.value === 'constructor') {
              if (this.ctor) {
                assign.error('cannot define more than one constructor in a class');
              }
              if (func.bound) {
                assign.error('cannot define a constructor as a bound function');
              }
              if (func instanceof Code) {
                assign = this.ctor = func;
              } else {
                this.externalCtor = o.scope.freeVariable('class');
                assign = new Assign(new Literal(this.externalCtor), func);
              }
            } else {
              if (assign.variable["this"]) {
                func["static"] = true;
                if (func.bound) {
                  func.context = name;
                }
              } else {
                assign.variable = new Value(new Literal(name), [new Access(new Literal('prototype')), new Access(base)]);
                if (func instanceof Code && func.bound) {
                  this.boundFuncs.push(base);
                  func.bound = false;
                }
              }
            }
          }
          _results.push(assign);
        }
        return _results;
      }).call(this);
      return compact(exprs);
    };

    Class.prototype.walkBody = function(name, o) {
      var _this = this;
      return this.traverseChildren(false, function(child) {
        var cont, exps, i, node, _i, _len, _ref4;
        cont = true;
        if (child instanceof Class) {
          return false;
        }
        if (child instanceof Block) {
          _ref4 = exps = child.expressions;
          for (i = _i = 0, _len = _ref4.length; _i < _len; i = ++_i) {
            node = _ref4[i];
            if (node instanceof Value && node.isObject(true)) {
              cont = false;
              exps[i] = _this.addProperties(node, name, o);
            }
          }
          child.expressions = exps = flatten(exps);
        }
        return cont && !(child instanceof Class);
      });
    };

    Class.prototype.hoistDirectivePrologue = function() {
      var expressions, index, node;
      index = 0;
      expressions = this.body.expressions;
      while ((node = expressions[index]) && node instanceof Comment || node instanceof Value && node.isString()) {
        ++index;
      }
      return this.directives = expressions.splice(0, index);
    };

    Class.prototype.ensureConstructor = function(name, o) {
      var missing, ref, superCall;
      missing = !this.ctor;
      this.ctor || (this.ctor = new Code);
      this.ctor.ctor = this.ctor.name = name;
      this.ctor.klass = null;
      this.ctor.noReturn = true;
      if (missing) {
        if (this.parent) {
          superCall = new Literal("" + name + ".__super__.constructor.apply(this, arguments)");
        }
        if (this.externalCtor) {
          superCall = new Literal("" + this.externalCtor + ".apply(this, arguments)");
        }
        if (superCall) {
          ref = new Literal(o.scope.freeVariable('ref'));
          this.ctor.body.unshift(new Assign(ref, superCall));
        }
        this.addBoundFunctions(o);
        if (superCall) {
          this.ctor.body.push(ref);
          this.ctor.body.makeReturn();
        }
        return this.body.expressions.unshift(this.ctor);
      } else {
        return this.addBoundFunctions(o);
      }
    };

    Class.prototype.compileNode = function(o) {
      var call, decl, klass, lname, name, params, _ref4;
      decl = this.determineName();
      name = decl || '_Class';
      if (name.reserved) {
        name = "_" + name;
      }
      lname = new Literal(name);
      this.hoistDirectivePrologue();
      this.setContext(name);
      this.walkBody(name, o);
      this.ensureConstructor(name, o);
      this.body.spaced = true;
      if (!(this.ctor instanceof Code)) {
        this.body.expressions.unshift(this.ctor);
      }
      this.body.expressions.push(lname);
      (_ref4 = this.body.expressions).unshift.apply(_ref4, this.directives);
      call = Closure.wrap(this.body);
      if (this.parent) {
        this.superClass = new Literal(o.scope.freeVariable('super', false));
        this.body.expressions.unshift(new Extends(lname, this.superClass));
        call.args.push(this.parent);
        params = call.variable.params || call.variable.base.params;
        params.push(new Param(this.superClass));
      }
      klass = new Parens(call, true);
      if (this.variable) {
        klass = new Assign(this.variable, klass);
      }
      return klass.compileToFragments(o);
    };

    return Class;

  })(Base);

  exports.Assign = Assign = (function(_super) {
    __extends(Assign, _super);

    function Assign(variable, value, context, options) {
      var forbidden, name, _ref4;
      this.variable = variable;
      this.value = value;
      this.context = context;
      this.param = options && options.param;
      this.subpattern = options && options.subpattern;
      forbidden = (_ref4 = (name = this.variable.unwrapAll().value), __indexOf.call(STRICT_PROSCRIBED, _ref4) >= 0);
      if (forbidden && this.context !== 'object') {
        this.variable.error("variable name may not be \"" + name + "\"");
      }
    }

    Assign.prototype.children = ['variable', 'value'];

    Assign.prototype.isStatement = function(o) {
      return (o != null ? o.level : void 0) === LEVEL_TOP && (this.context != null) && __indexOf.call(this.context, "?") >= 0;
    };

    Assign.prototype.assigns = function(name) {
      return this[this.context === 'object' ? 'value' : 'variable'].assigns(name);
    };

    Assign.prototype.unfoldSoak = function(o) {
      return unfoldSoak(o, this, 'variable');
    };

    Assign.prototype.compileNode = function(o) {
      var accesses, answer, bindProperty, compiledName, func, isValue, match, name, val, varBase, _ref4, _ref5, _ref6, _ref7;
      if (isValue = this.variable instanceof Value) {
        if (this.variable.isArray() || this.variable.isObject()) {
          return this.compilePatternMatch(o);
        }
        if (this.variable.isSplice()) {
          return this.compileSplice(o);
        }
        if ((_ref4 = this.context) === '||=' || _ref4 === '&&=' || _ref4 === '?=') {
          return this.compileConditional(o);
        }
      }
      compiledName = this.variable.compileToFragments(o, LEVEL_LIST);
      name = fragmentsToText(compiledName);
      if (!this.context) {
        varBase = this.variable.unwrapAll();
        if (!varBase.isAssignable()) {
          this.variable.error("\"" + (this.variable.compile(o)) + "\" cannot be assigned");
        }
        if (!(typeof varBase.hasProperties === "function" ? varBase.hasProperties() : void 0)) {
          if (this.param) {
            o.scope.add(name, 'var');
          } else {
            o.scope.find(name);
          }
        }
      }
      if (this.value instanceof Code && (match = METHOD_DEF.exec(name))) {
        if (match[1]) {
          this.value.klass = match[1];
        }
        this.value.name = (_ref5 = (_ref6 = (_ref7 = match[2]) != null ? _ref7 : match[3]) != null ? _ref6 : match[4]) != null ? _ref5 : match[5];
      }
      val = this.value.compileToFragments(o, LEVEL_LIST);
      if (this.context === 'object') {
        return compiledName.concat(this.makeCode(": "), val);
      }
      answer = [];
      answer = answer.concat(compiledName);
      answer = answer.concat(this.makeCode(" " + (this.context || '=') + " "), val);
      if (SHADER_PROPERTY.test(name)) {
        answer = answer.concat([this.makeCode(';\n')]);
        accesses = [new Access(new Literal('current'))];
        accesses.push(new Access(new Literal('bindProperty')));
        func = new Value(new Literal('ShaderProgram'), accesses);
        bindProperty = new Call(func, [new Value(new Literal('gl')), new Value(new Literal("'" + (name.substr(1)) + "'")), new Value(new Literal(name))]);
        answer = answer.concat(bindProperty.compileToFragments(o));
      }
      if (o.level <= LEVEL_LIST) {
        return answer;
      } else {
        return this.wrapInBraces(answer);
      }
    };

    Assign.prototype.compilePatternMatch = function(o) {
      var acc, assigns, code, fragments, i, idx, isObject, ivar, name, obj, objects, olen, ref, rest, splat, top, val, value, vvar, vvarText, _i, _len, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      top = o.level === LEVEL_TOP;
      value = this.value;
      objects = this.variable.base.objects;
      if (!(olen = objects.length)) {
        code = value.compileToFragments(o);
        if (o.level >= LEVEL_OP) {
          return this.wrapInBraces(code);
        } else {
          return code;
        }
      }
      isObject = this.variable.isObject();
      if (top && olen === 1 && !((obj = objects[0]) instanceof Splat)) {
        if (obj instanceof Assign) {
          _ref4 = obj, (_ref5 = _ref4.variable, idx = _ref5.base), obj = _ref4.value;
        } else {
          idx = isObject ? obj["this"] ? obj.properties[0].name : obj : new Literal(0);
        }
        acc = IDENTIFIER.test(idx.unwrap().value || 0);
        value = new Value(value);
        value.properties.push(new (acc ? Access : Index)(idx));
        if (_ref6 = obj.unwrap().value, __indexOf.call(RESERVED, _ref6) >= 0) {
          obj.error("assignment to a reserved word: " + (obj.compile(o)));
        }
        return new Assign(obj, value, null, {
          param: this.param
        }).compileToFragments(o, LEVEL_TOP);
      }
      vvar = value.compileToFragments(o, LEVEL_LIST);
      vvarText = fragmentsToText(vvar);
      assigns = [];
      splat = false;
      if (!IDENTIFIER.test(vvarText) || this.variable.assigns(vvarText)) {
        assigns.push([this.makeCode("" + (ref = o.scope.freeVariable('ref')) + " = ")].concat(__slice.call(vvar)));
        vvar = [this.makeCode(ref)];
        vvarText = ref;
      }
      for (i = _i = 0, _len = objects.length; _i < _len; i = ++_i) {
        obj = objects[i];
        idx = i;
        if (isObject) {
          if (obj instanceof Assign) {
            _ref7 = obj, (_ref8 = _ref7.variable, idx = _ref8.base), obj = _ref7.value;
          } else {
            if (obj.base instanceof Parens) {
              _ref9 = new Value(obj.unwrapAll()).cacheReference(o), obj = _ref9[0], idx = _ref9[1];
            } else {
              idx = obj["this"] ? obj.properties[0].name : obj;
            }
          }
        }
        if (!splat && obj instanceof Splat) {
          name = obj.name.unwrap().value;
          obj = obj.unwrap();
          val = "" + olen + " <= " + vvarText + ".length ? " + (utility('slice')) + ".call(" + vvarText + ", " + i;
          if (rest = olen - i - 1) {
            ivar = o.scope.freeVariable('i');
            val += ", " + ivar + " = " + vvarText + ".length - " + rest + ") : (" + ivar + " = " + i + ", [])";
          } else {
            val += ") : []";
          }
          val = new Literal(val);
          splat = "" + ivar + "++";
        } else {
          name = obj.unwrap().value;
          if (obj instanceof Splat) {
            obj.error("multiple splats are disallowed in an assignment");
          }
          if (typeof idx === 'number') {
            idx = new Literal(splat || idx);
            acc = false;
          } else {
            acc = isObject && IDENTIFIER.test(idx.unwrap().value || 0);
          }
          val = new Value(new Literal(vvarText), [new (acc ? Access : Index)(idx)]);
        }
        if ((name != null) && __indexOf.call(RESERVED, name) >= 0) {
          obj.error("assignment to a reserved word: " + (obj.compile(o)));
        }
        assigns.push(new Assign(obj, val, null, {
          param: this.param,
          subpattern: true
        }).compileToFragments(o, LEVEL_LIST));
      }
      if (!(top || this.subpattern)) {
        assigns.push(vvar);
      }
      fragments = this.joinFragmentArrays(assigns, ', ');
      if (o.level < LEVEL_LIST) {
        return fragments;
      } else {
        return this.wrapInBraces(fragments);
      }
    };

    Assign.prototype.compileConditional = function(o) {
      var left, right, _ref4;
      _ref4 = this.variable.cacheReference(o), left = _ref4[0], right = _ref4[1];
      if (!left.properties.length && left.base instanceof Literal && left.base.value !== "this" && !o.scope.check(left.base.value)) {
        this.variable.error("the variable \"" + left.base.value + "\" can't be assigned with " + this.context + " because it has not been declared before");
      }
      if (__indexOf.call(this.context, "?") >= 0) {
        o.isExistentialEquals = true;
      }
      return new Op(this.context.slice(0, -1), left, new Assign(right, this.value, '=')).compileToFragments(o);
    };

    Assign.prototype.compileSplice = function(o) {
      var answer, exclusive, from, fromDecl, fromRef, name, to, valDef, valRef, _ref4, _ref5, _ref6;
      _ref4 = this.variable.properties.pop().range, from = _ref4.from, to = _ref4.to, exclusive = _ref4.exclusive;
      name = this.variable.compile(o);
      if (from) {
        _ref5 = this.cacheToCodeFragments(from.cache(o, LEVEL_OP)), fromDecl = _ref5[0], fromRef = _ref5[1];
      } else {
        fromDecl = fromRef = '0';
      }
      if (to) {
        if ((from != null ? from.isSimpleNumber() : void 0) && to.isSimpleNumber()) {
          to = +to.compile(o) - +fromRef;
          if (!exclusive) {
            to += 1;
          }
        } else {
          to = to.compile(o, LEVEL_ACCESS) + ' - ' + fromRef;
          if (!exclusive) {
            to += ' + 1';
          }
        }
      } else {
        to = "9e9";
      }
      _ref6 = this.value.cache(o, LEVEL_LIST), valDef = _ref6[0], valRef = _ref6[1];
      answer = [].concat(this.makeCode("[].splice.apply(" + name + ", [" + fromDecl + ", " + to + "].concat("), valDef, this.makeCode(")), "), valRef);
      if (o.level > LEVEL_TOP) {
        return this.wrapInBraces(answer);
      } else {
        return answer;
      }
    };

    return Assign;

  })(Base);

  exports.Code = Code = (function(_super) {
    __extends(Code, _super);

    function Code(params, body, tag) {
      this.params = params || [];
      this.body = body || new Block;
      this.bound = tag === 'boundfunc';
      if (this.bound) {
        this.context = '_this';
      }
    }

    Code.prototype.children = ['params', 'body'];

    Code.prototype.isStatement = function() {
      return !!this.ctor;
    };

    Code.prototype.jumps = NO;

    Code.prototype.compileNode = function(o) {
      var answer, code, exprs, i, idt, lit, p, param, params, ref, splats, uniqs, val, wasEmpty, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref4, _ref5, _ref6, _ref7, _ref8;
      o.scope = new Scope(o.scope, this.body, this);
      o.scope.shared = del(o, 'sharedScope');
      o.indent += TAB;
      delete o.bare;
      delete o.isExistentialEquals;
      params = [];
      exprs = [];
      this.eachParamName(function(name) {
        if (!o.scope.check(name)) {
          return o.scope.parameter(name);
        }
      });
      _ref4 = this.params;
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        param = _ref4[_i];
        if (!param.splat) {
          continue;
        }
        _ref5 = this.params;
        for (_j = 0, _len1 = _ref5.length; _j < _len1; _j++) {
          p = _ref5[_j].name;
          if (p["this"]) {
            p = p.properties[0].name;
          }
          if (p.value) {
            o.scope.add(p.value, 'var', true);
          }
        }
        splats = new Assign(new Value(new Arr((function() {
          var _k, _len2, _ref6, _results;
          _ref6 = this.params;
          _results = [];
          for (_k = 0, _len2 = _ref6.length; _k < _len2; _k++) {
            p = _ref6[_k];
            _results.push(p.asReference(o));
          }
          return _results;
        }).call(this))), new Value(new Literal('arguments')));
        break;
      }
      _ref6 = this.params;
      for (_k = 0, _len2 = _ref6.length; _k < _len2; _k++) {
        param = _ref6[_k];
        if (param.isComplex()) {
          val = ref = param.asReference(o);
          if (param.value) {
            val = new Op('?', ref, param.value);
          }
          exprs.push(new Assign(new Value(param.name), val, '=', {
            param: true
          }));
        } else {
          ref = param;
          if (param.value) {
            lit = new Literal(ref.name.value + ' == null');
            val = new Assign(new Value(param.name), param.value, '=');
            exprs.push(new If(lit, val));
          }
        }
        if (!splats) {
          params.push(ref);
        }
      }
      wasEmpty = this.body.isEmpty();
      if (splats) {
        exprs.unshift(splats);
      }
      if (exprs.length) {
        (_ref7 = this.body.expressions).unshift.apply(_ref7, exprs);
      }
      for (i = _l = 0, _len3 = params.length; _l < _len3; i = ++_l) {
        p = params[i];
        params[i] = p.compileToFragments(o);
        o.scope.parameter(fragmentsToText(params[i]));
      }
      uniqs = [];
      this.eachParamName(function(name, node) {
        if (__indexOf.call(uniqs, name) >= 0) {
          node.error("multiple parameters named '" + name + "'");
        }
        return uniqs.push(name);
      });
      if (!(wasEmpty || this.noReturn)) {
        this.body.makeReturn();
      }
      if (this.bound) {
        if ((_ref8 = o.scope.parent.method) != null ? _ref8.bound : void 0) {
          this.bound = this.context = o.scope.parent.method.context;
        } else if (!this["static"]) {
          o.scope.parent.assign('_this', 'this');
        }
      }
      idt = o.indent;
      code = 'function';
      if (this.ctor) {
        code += ' ' + this.name;
      }
      code += '(';
      answer = [this.makeCode(code)];
      for (i = _m = 0, _len4 = params.length; _m < _len4; i = ++_m) {
        p = params[i];
        if (i) {
          answer.push(this.makeCode(", "));
        }
        answer.push.apply(answer, p);
      }
      answer.push(this.makeCode(') {'));
      if (!this.body.isEmpty()) {
        answer = answer.concat(this.makeCode("\n"), this.body.compileWithDeclarations(o), this.makeCode("\n" + this.tab));
      }
      answer.push(this.makeCode('}'));
      if (this.ctor) {
        return [this.makeCode(this.tab)].concat(__slice.call(answer));
      }
      if (this.front || (o.level >= LEVEL_ACCESS)) {
        return this.wrapInBraces(answer);
      } else {
        return answer;
      }
    };

    Code.prototype.eachParamName = function(iterator) {
      var param, _i, _len, _ref4, _results;
      _ref4 = this.params;
      _results = [];
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        param = _ref4[_i];
        _results.push(param.eachName(iterator));
      }
      return _results;
    };

    Code.prototype.traverseChildren = function(crossScope, func) {
      if (crossScope) {
        return Code.__super__.traverseChildren.call(this, crossScope, func);
      }
    };

    return Code;

  })(Base);

  exports.Param = Param = (function(_super) {
    __extends(Param, _super);

    function Param(name, value, splat) {
      var _ref4;
      this.name = name;
      this.value = value;
      this.splat = splat;
      if (_ref4 = (name = this.name.unwrapAll().value), __indexOf.call(STRICT_PROSCRIBED, _ref4) >= 0) {
        this.name.error("parameter name \"" + name + "\" is not allowed");
      }
    }

    Param.prototype.children = ['name', 'value'];

    Param.prototype.compileToFragments = function(o) {
      return this.name.compileToFragments(o, LEVEL_LIST);
    };

    Param.prototype.asReference = function(o) {
      var node;
      if (this.reference) {
        return this.reference;
      }
      node = this.name;
      if (node["this"]) {
        node = node.properties[0].name;
        if (node.value.reserved) {
          node = new Literal(o.scope.freeVariable(node.value));
        }
      } else if (node.isComplex()) {
        node = new Literal(o.scope.freeVariable('arg'));
      }
      node = new Value(node);
      if (this.splat) {
        node = new Splat(node);
      }
      return this.reference = node;
    };

    Param.prototype.isComplex = function() {
      return this.name.isComplex();
    };

    Param.prototype.eachName = function(iterator, name) {
      var atParam, node, obj, _i, _len, _ref4;
      if (name == null) {
        name = this.name;
      }
      atParam = function(obj) {
        var node;
        node = obj.properties[0].name;
        if (!node.value.reserved) {
          return iterator(node.value, node);
        }
      };
      if (name instanceof Literal) {
        return iterator(name.value, name);
      }
      if (name instanceof Value) {
        return atParam(name);
      }
      _ref4 = name.objects;
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        obj = _ref4[_i];
        if (obj instanceof Assign) {
          this.eachName(iterator, obj.value.unwrap());
        } else if (obj instanceof Splat) {
          node = obj.name.unwrap();
          iterator(node.value, node);
        } else if (obj instanceof Value) {
          if (obj.isArray() || obj.isObject()) {
            this.eachName(iterator, obj.base);
          } else if (obj["this"]) {
            atParam(obj);
          } else {
            iterator(obj.base.value, obj.base);
          }
        } else {
          obj.error("illegal parameter " + (obj.compile()));
        }
      }
    };

    return Param;

  })(Base);

  exports.Splat = Splat = (function(_super) {
    __extends(Splat, _super);

    Splat.prototype.children = ['name'];

    Splat.prototype.isAssignable = YES;

    function Splat(name) {
      this.name = name.compile ? name : new Literal(name);
    }

    Splat.prototype.assigns = function(name) {
      return this.name.assigns(name);
    };

    Splat.prototype.compileToFragments = function(o) {
      return this.name.compileToFragments(o);
    };

    Splat.prototype.unwrap = function() {
      return this.name;
    };

    Splat.compileSplattedArray = function(o, list, apply) {
      var args, base, compiledNode, concatPart, fragments, i, index, node, _i, _len;
      index = -1;
      while ((node = list[++index]) && !(node instanceof Splat)) {
        continue;
      }
      if (index >= list.length) {
        return [];
      }
      if (list.length === 1) {
        node = list[0];
        fragments = node.compileToFragments(o, LEVEL_LIST);
        if (apply) {
          return fragments;
        }
        return [].concat(node.makeCode("" + (utility('slice')) + ".call("), fragments, node.makeCode(")"));
      }
      args = list.slice(index);
      for (i = _i = 0, _len = args.length; _i < _len; i = ++_i) {
        node = args[i];
        compiledNode = node.compileToFragments(o, LEVEL_LIST);
        args[i] = node instanceof Splat ? [].concat(node.makeCode("" + (utility('slice')) + ".call("), compiledNode, node.makeCode(")")) : [].concat(node.makeCode("["), compiledNode, node.makeCode("]"));
      }
      if (index === 0) {
        node = list[0];
        concatPart = node.joinFragmentArrays(args.slice(1), ', ');
        return args[0].concat(node.makeCode(".concat("), concatPart, node.makeCode(")"));
      }
      base = (function() {
        var _j, _len1, _ref4, _results;
        _ref4 = list.slice(0, index);
        _results = [];
        for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
          node = _ref4[_j];
          _results.push(node.compileToFragments(o, LEVEL_LIST));
        }
        return _results;
      })();
      base = list[0].joinFragmentArrays(base, ', ');
      concatPart = list[index].joinFragmentArrays(args, ', ');
      return [].concat(list[0].makeCode("["), base, list[index].makeCode("].concat("), concatPart, (last(list)).makeCode(")"));
    };

    return Splat;

  })(Base);

  exports.While = While = (function(_super) {
    __extends(While, _super);

    function While(condition, options) {
      this.condition = (options != null ? options.invert : void 0) ? condition.invert() : condition;
      this.guard = options != null ? options.guard : void 0;
    }

    While.prototype.children = ['condition', 'guard', 'body'];

    While.prototype.isStatement = YES;

    While.prototype.makeReturn = function(res) {
      if (res) {
        return While.__super__.makeReturn.apply(this, arguments);
      } else {
        this.returns = !this.jumps({
          loop: true
        });
        return this;
      }
    };

    While.prototype.addBody = function(body) {
      this.body = body;
      return this;
    };

    While.prototype.jumps = function() {
      var expressions, node, _i, _len;
      expressions = this.body.expressions;
      if (!expressions.length) {
        return false;
      }
      for (_i = 0, _len = expressions.length; _i < _len; _i++) {
        node = expressions[_i];
        if (node.jumps({
          loop: true
        })) {
          return node;
        }
      }
      return false;
    };

    While.prototype.compileNode = function(o) {
      var answer, body, rvar, set;
      o.indent += TAB;
      set = '';
      body = this.body;
      if (body.isEmpty()) {
        body = this.makeCode('');
      } else {
        if (this.returns) {
          body.makeReturn(rvar = o.scope.freeVariable('results'));
          set = "" + this.tab + rvar + " = [];\n";
        }
        if (this.guard) {
          if (body.expressions.length > 1) {
            body.expressions.unshift(new If((new Parens(this.guard)).invert(), new Literal("continue")));
          } else {
            if (this.guard) {
              body = Block.wrap([new If(this.guard, body)]);
            }
          }
        }
        body = [].concat(this.makeCode("\n"), body.compileToFragments(o, LEVEL_TOP), this.makeCode("\n" + this.tab));
      }
      answer = [].concat(this.makeCode(set + this.tab + "while ("), this.condition.compileToFragments(o, LEVEL_PAREN), this.makeCode(") {"), body, this.makeCode("}"));
      if (this.returns) {
        answer.push(this.makeCode("\n" + this.tab + "return " + rvar + ";"));
      }
      return answer;
    };

    return While;

  })(Base);

  exports.Op = Op = (function(_super) {
    var CONVERSIONS, INVERSIONS;

    __extends(Op, _super);

    function Op(op, first, second, flip) {
      if (op === 'in') {
        return new In(first, second);
      }
      if (op === 'do') {
        return this.generateDo(first);
      }
      if (op === 'new') {
        if (first instanceof Call && !first["do"] && !first.isNew) {
          return first.newInstance();
        }
        if (first instanceof Code && first.bound || first["do"]) {
          first = new Parens(first);
        }
      }
      this.operator = CONVERSIONS[op] || op;
      this.first = first;
      this.second = second;
      this.flip = !!flip;
      return this;
    }

    CONVERSIONS = {
      '==': '===',
      '!=': '!==',
      'of': 'in'
    };

    INVERSIONS = {
      '!==': '===',
      '===': '!=='
    };

    Op.prototype.children = ['first', 'second'];

    Op.prototype.isSimpleNumber = NO;

    Op.prototype.isUnary = function() {
      return !this.second;
    };

    Op.prototype.isComplex = function() {
      var _ref4;
      return !(this.isUnary() && ((_ref4 = this.operator) === '+' || _ref4 === '-')) || this.first.isComplex();
    };

    Op.prototype.isChainable = function() {
      var _ref4;
      return (_ref4 = this.operator) === '<' || _ref4 === '>' || _ref4 === '>=' || _ref4 === '<=' || _ref4 === '===' || _ref4 === '!==';
    };

    Op.prototype.invert = function() {
      var allInvertable, curr, fst, op, _ref4;
      if (this.isChainable() && this.first.isChainable()) {
        allInvertable = true;
        curr = this;
        while (curr && curr.operator) {
          allInvertable && (allInvertable = curr.operator in INVERSIONS);
          curr = curr.first;
        }
        if (!allInvertable) {
          return new Parens(this).invert();
        }
        curr = this;
        while (curr && curr.operator) {
          curr.invert = !curr.invert;
          curr.operator = INVERSIONS[curr.operator];
          curr = curr.first;
        }
        return this;
      } else if (op = INVERSIONS[this.operator]) {
        this.operator = op;
        if (this.first.unwrap() instanceof Op) {
          this.first.invert();
        }
        return this;
      } else if (this.second) {
        return new Parens(this).invert();
      } else if (this.operator === '!' && (fst = this.first.unwrap()) instanceof Op && ((_ref4 = fst.operator) === '!' || _ref4 === 'in' || _ref4 === 'instanceof')) {
        return fst;
      } else {
        return new Op('!', this);
      }
    };

    Op.prototype.unfoldSoak = function(o) {
      var _ref4;
      return ((_ref4 = this.operator) === '++' || _ref4 === '--' || _ref4 === 'delete') && unfoldSoak(o, this, 'first');
    };

    Op.prototype.generateDo = function(exp) {
      var call, func, param, passedParams, ref, _i, _len, _ref4;
      passedParams = [];
      func = exp instanceof Assign && (ref = exp.value.unwrap()) instanceof Code ? ref : exp;
      _ref4 = func.params || [];
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        param = _ref4[_i];
        if (param.value) {
          passedParams.push(param.value);
          delete param.value;
        } else {
          passedParams.push(param);
        }
      }
      call = new Call(exp, passedParams);
      call["do"] = true;
      return call;
    };

    Op.prototype.compileNode = function(o) {
      var answer, isChain, _ref4, _ref5;
      isChain = this.isChainable() && this.first.isChainable();
      if (!isChain) {
        this.first.front = this.front;
      }
      if (this.operator === 'delete' && o.scope.check(this.first.unwrapAll().value)) {
        this.error('delete operand may not be argument or var');
      }
      if (((_ref4 = this.operator) === '--' || _ref4 === '++') && (_ref5 = this.first.unwrapAll().value, __indexOf.call(STRICT_PROSCRIBED, _ref5) >= 0)) {
        this.error("cannot increment/decrement \"" + (this.first.unwrapAll().value) + "\"");
      }
      if (this.isUnary()) {
        return this.compileUnary(o);
      }
      if (isChain) {
        return this.compileChain(o);
      }
      if (this.operator === '?') {
        return this.compileExistence(o);
      }
      if (CUSTOM_OPERATOR.test(this.operator)) {
        return this.compileCustomOperator(o);
      }
      answer = [].concat(this.first.compileToFragments(o, LEVEL_OP), this.makeCode(' ' + this.operator + ' '), this.second.compileToFragments(o, LEVEL_OP));
      if (o.level <= LEVEL_OP) {
        return answer;
      } else {
        return this.wrapInBraces(answer);
      }
    };

    Op.prototype.compileCustomOperator = function(o) {
      var answer;
      utility("operators");
      return answer = [].concat(this.makeCode('('), this.first.compileToFragments(o, LEVEL_OP), this.makeCode(').operators("' + this.operator + '",'), this.second.compileToFragments(o, LEVEL_OP), this.makeCode(')'));
    };

    Op.prototype.compileChain = function(o) {
      var fragments, fst, shared, _ref4;
      _ref4 = this.first.second.cache(o), this.first.second = _ref4[0], shared = _ref4[1];
      fst = this.first.compileToFragments(o, LEVEL_OP);
      fragments = fst.concat(this.makeCode(" " + (this.invert ? '&&' : '||') + " "), shared.compileToFragments(o), this.makeCode(" " + this.operator + " "), this.second.compileToFragments(o, LEVEL_OP));
      return this.wrapInBraces(fragments);
    };

    Op.prototype.compileExistence = function(o) {
      var fst, ref;
      if (!o.isExistentialEquals && this.first.isComplex()) {
        ref = new Literal(o.scope.freeVariable('ref'));
        fst = new Parens(new Assign(ref, this.first));
      } else {
        fst = this.first;
        ref = fst;
      }
      return new If(new Existence(fst), ref, {
        type: 'if'
      }).addElse(this.second).compileToFragments(o);
    };

    Op.prototype.compileUnary = function(o) {
      var op, parts, plusMinus;
      parts = [];
      op = this.operator;
      parts.push([this.makeCode(op)]);
      if (op === '!' && this.first instanceof Existence) {
        this.first.negated = !this.first.negated;
        return this.first.compileToFragments(o);
      }
      if (o.level >= LEVEL_ACCESS) {
        return (new Parens(this)).compileToFragments(o);
      }
      plusMinus = op === '+' || op === '-';
      if ((op === 'new' || op === 'typeof' || op === 'delete') || plusMinus && this.first instanceof Op && this.first.operator === op) {
        parts.push([this.makeCode(' ')]);
      }
      if ((plusMinus && this.first instanceof Op) || (op === 'new' && this.first.isStatement(o))) {
        this.first = new Parens(this.first);
      }
      parts.push(this.first.compileToFragments(o, LEVEL_OP));
      if (this.flip) {
        parts.reverse();
      }
      return this.joinFragmentArrays(parts, '');
    };

    Op.prototype.toString = function(idt) {
      return Op.__super__.toString.call(this, idt, this.constructor.name + ' ' + this.operator);
    };

    return Op;

  })(Base);

  exports.In = In = (function(_super) {
    __extends(In, _super);

    function In(object, array) {
      this.object = object;
      this.array = array;
    }

    In.prototype.children = ['object', 'array'];

    In.prototype.invert = NEGATE;

    In.prototype.compileNode = function(o) {
      var hasSplat, obj, _i, _len, _ref4;
      if (this.array instanceof Value && this.array.isArray()) {
        _ref4 = this.array.base.objects;
        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
          obj = _ref4[_i];
          if (!(obj instanceof Splat)) {
            continue;
          }
          hasSplat = true;
          break;
        }
        if (!hasSplat) {
          return this.compileOrTest(o);
        }
      }
      return this.compileLoopTest(o);
    };

    In.prototype.compileOrTest = function(o) {
      var cmp, cnj, i, item, ref, sub, tests, _i, _len, _ref4, _ref5, _ref6;
      if (this.array.base.objects.length === 0) {
        return [this.makeCode("" + (!!this.negated))];
      }
      _ref4 = this.object.cache(o, LEVEL_OP), sub = _ref4[0], ref = _ref4[1];
      _ref5 = this.negated ? [' !== ', ' && '] : [' === ', ' || '], cmp = _ref5[0], cnj = _ref5[1];
      tests = [];
      _ref6 = this.array.base.objects;
      for (i = _i = 0, _len = _ref6.length; _i < _len; i = ++_i) {
        item = _ref6[i];
        if (i) {
          tests.push(this.makeCode(cnj));
        }
        tests = tests.concat((i ? ref : sub), this.makeCode(cmp), item.compileToFragments(o, LEVEL_ACCESS));
      }
      if (o.level < LEVEL_OP) {
        return tests;
      } else {
        return this.wrapInBraces(tests);
      }
    };

    In.prototype.compileLoopTest = function(o) {
      var fragments, ref, sub, _ref4;
      _ref4 = this.object.cache(o, LEVEL_LIST), sub = _ref4[0], ref = _ref4[1];
      fragments = [].concat(this.makeCode(utility('indexOf') + ".call("), this.array.compileToFragments(o, LEVEL_LIST), this.makeCode(", "), ref, this.makeCode(") " + (this.negated ? '< 0' : '>= 0')));
      if (fragmentsToText(sub) === fragmentsToText(ref)) {
        return fragments;
      }
      fragments = sub.concat(this.makeCode(', '), fragments);
      if (o.level < LEVEL_LIST) {
        return fragments;
      } else {
        return this.wrapInBraces(fragments);
      }
    };

    In.prototype.toString = function(idt) {
      return In.__super__.toString.call(this, idt, this.constructor.name + (this.negated ? '!' : ''));
    };

    return In;

  })(Base);

  exports.Try = Try = (function(_super) {
    __extends(Try, _super);

    function Try(attempt, errorVariable, recovery, ensure) {
      this.attempt = attempt;
      this.errorVariable = errorVariable;
      this.recovery = recovery;
      this.ensure = ensure;
    }

    Try.prototype.children = ['attempt', 'recovery', 'ensure'];

    Try.prototype.isStatement = YES;

    Try.prototype.jumps = function(o) {
      var _ref4;
      return this.attempt.jumps(o) || ((_ref4 = this.recovery) != null ? _ref4.jumps(o) : void 0);
    };

    Try.prototype.makeReturn = function(res) {
      if (this.attempt) {
        this.attempt = this.attempt.makeReturn(res);
      }
      if (this.recovery) {
        this.recovery = this.recovery.makeReturn(res);
      }
      return this;
    };

    Try.prototype.compileNode = function(o) {
      var catchPart, ensurePart, placeholder, tryPart;
      o.indent += TAB;
      tryPart = this.attempt.compileToFragments(o, LEVEL_TOP);
      catchPart = this.recovery ? (placeholder = new Literal('_error'), this.errorVariable ? this.recovery.unshift(new Assign(this.errorVariable, placeholder)) : void 0, [].concat(this.makeCode(" catch ("), placeholder.compileToFragments(o), this.makeCode(") {\n"), this.recovery.compileToFragments(o, LEVEL_TOP), this.makeCode("\n" + this.tab + "}"))) : !(this.ensure || this.recovery) ? [this.makeCode(' catch (_error) {}')] : [];
      ensurePart = this.ensure ? [].concat(this.makeCode(" finally {\n"), this.ensure.compileToFragments(o, LEVEL_TOP), this.makeCode("\n" + this.tab + "}")) : [];
      return [].concat(this.makeCode("" + this.tab + "try {\n"), tryPart, this.makeCode("\n" + this.tab + "}"), catchPart, ensurePart);
    };

    return Try;

  })(Base);

  exports.Throw = Throw = (function(_super) {
    __extends(Throw, _super);

    function Throw(expression) {
      this.expression = expression;
    }

    Throw.prototype.children = ['expression'];

    Throw.prototype.isStatement = YES;

    Throw.prototype.jumps = NO;

    Throw.prototype.makeReturn = THIS;

    Throw.prototype.compileNode = function(o) {
      return [].concat(this.makeCode(this.tab + "throw "), this.expression.compileToFragments(o), this.makeCode(";"));
    };

    return Throw;

  })(Base);

  exports.Existence = Existence = (function(_super) {
    __extends(Existence, _super);

    function Existence(expression) {
      this.expression = expression;
    }

    Existence.prototype.children = ['expression'];

    Existence.prototype.invert = NEGATE;

    Existence.prototype.compileNode = function(o) {
      var cmp, cnj, code, _ref4;
      this.expression.front = this.front;
      code = this.expression.compile(o, LEVEL_OP);
      if (IDENTIFIER.test(code) && !o.scope.check(code)) {
        _ref4 = this.negated ? ['===', '||'] : ['!==', '&&'], cmp = _ref4[0], cnj = _ref4[1];
        code = "typeof " + code + " " + cmp + " \"undefined\" " + cnj + " " + code + " " + cmp + " null";
      } else {
        code = "" + code + " " + (this.negated ? '==' : '!=') + " null";
      }
      return [this.makeCode(o.level <= LEVEL_COND ? code : "(" + code + ")")];
    };

    return Existence;

  })(Base);

  exports.Parens = Parens = (function(_super) {
    __extends(Parens, _super);

    function Parens(body) {
      this.body = body;
    }

    Parens.prototype.children = ['body'];

    Parens.prototype.unwrap = function() {
      return this.body;
    };

    Parens.prototype.isComplex = function() {
      return this.body.isComplex();
    };

    Parens.prototype.compileNode = function(o) {
      var bare, expr, fragments;
      expr = this.body.unwrap();
      if (expr instanceof Value && expr.isAtomic()) {
        expr.front = this.front;
        return expr.compileToFragments(o);
      }
      fragments = expr.compileToFragments(o, LEVEL_PAREN);
      bare = o.level < LEVEL_OP && (expr instanceof Op || expr instanceof Call || (expr instanceof For && expr.returns));
      if (bare) {
        return fragments;
      } else {
        return this.wrapInBraces(fragments);
      }
    };

    return Parens;

  })(Base);

  exports.For = For = (function(_super) {
    __extends(For, _super);

    function For(body, source) {
      var _ref4;
      this.source = source.source, this.guard = source.guard, this.step = source.step, this.name = source.name, this.index = source.index;
      this.body = Block.wrap([body]);
      this.own = !!source.own;
      this.object = !!source.object;
      if (this.object) {
        _ref4 = [this.index, this.name], this.name = _ref4[0], this.index = _ref4[1];
      }
      if (this.index instanceof Value) {
        this.index.error('index cannot be a pattern matching expression');
      }
      this.range = this.source instanceof Value && this.source.base instanceof Range && !this.source.properties.length;
      this.pattern = this.name instanceof Value;
      if (this.range && this.index) {
        this.index.error('indexes do not apply to range loops');
      }
      if (this.range && this.pattern) {
        this.name.error('cannot pattern match over range loops');
      }
      this.returns = false;
    }

    For.prototype.children = ['body', 'source', 'guard', 'step'];

    For.prototype.compileNode = function(o) {
      var body, bodyFragments, compare, compareDown, declare, declareDown, defPart, defPartFragments, down, forPartFragments, guardPart, idt1, increment, index, ivar, kvar, kvarAssign, lastJumps, lvar, name, namePart, ref, resultPart, returnResult, rvar, scope, source, step, stepNum, stepVar, svar, varPart, _ref4, _ref5;
      body = Block.wrap([this.body]);
      lastJumps = (_ref4 = last(body.expressions)) != null ? _ref4.jumps() : void 0;
      if (lastJumps && lastJumps instanceof Return) {
        this.returns = false;
      }
      source = this.range ? this.source.base : this.source;
      scope = o.scope;
      name = this.name && (this.name.compile(o, LEVEL_LIST));
      index = this.index && (this.index.compile(o, LEVEL_LIST));
      if (name && !this.pattern) {
        scope.find(name);
      }
      if (index) {
        scope.find(index);
      }
      if (this.returns) {
        rvar = scope.freeVariable('results');
      }
      ivar = (this.object && index) || scope.freeVariable('i');
      kvar = (this.range && name) || index || ivar;
      kvarAssign = kvar !== ivar ? "" + kvar + " = " : "";
      if (this.step && !this.range) {
        _ref5 = this.cacheToCodeFragments(this.step.cache(o, LEVEL_LIST)), step = _ref5[0], stepVar = _ref5[1];
        stepNum = stepVar.match(SIMPLENUM);
      }
      if (this.pattern) {
        name = ivar;
      }
      varPart = '';
      guardPart = '';
      defPart = '';
      idt1 = this.tab + TAB;
      if (this.range) {
        forPartFragments = source.compileToFragments(merge(o, {
          index: ivar,
          name: name,
          step: this.step
        }));
      } else {
        svar = this.source.compile(o, LEVEL_LIST);
        if ((name || this.own) && !IDENTIFIER.test(svar)) {
          defPart += "" + this.tab + (ref = scope.freeVariable('ref')) + " = " + svar + ";\n";
          svar = ref;
        }
        if (name && !this.pattern) {
          namePart = "" + name + " = " + svar + "[" + kvar + "]";
        }
        if (!this.object) {
          if (step !== stepVar) {
            defPart += "" + this.tab + step + ";\n";
          }
          if (!(this.step && stepNum && (down = +stepNum < 0))) {
            lvar = scope.freeVariable('len');
          }
          declare = "" + kvarAssign + ivar + " = 0, " + lvar + " = " + svar + ".length";
          declareDown = "" + kvarAssign + ivar + " = " + svar + ".length - 1";
          compare = "" + ivar + " < " + lvar;
          compareDown = "" + ivar + " >= 0";
          if (this.step) {
            if (stepNum) {
              if (down) {
                compare = compareDown;
                declare = declareDown;
              }
            } else {
              compare = "" + stepVar + " > 0 ? " + compare + " : " + compareDown;
              declare = "(" + stepVar + " > 0 ? (" + declare + ") : " + declareDown + ")";
            }
            increment = "" + ivar + " += " + stepVar;
          } else {
            increment = "" + (kvar !== ivar ? "++" + ivar : "" + ivar + "++");
          }
          forPartFragments = [this.makeCode("" + declare + "; " + compare + "; " + kvarAssign + increment)];
        }
      }
      if (this.returns) {
        resultPart = "" + this.tab + rvar + " = [];\n";
        returnResult = "\n" + this.tab + "return " + rvar + ";";
        body.makeReturn(rvar);
      }
      if (this.guard) {
        if (body.expressions.length > 1) {
          body.expressions.unshift(new If((new Parens(this.guard)).invert(), new Literal("continue")));
        } else {
          if (this.guard) {
            body = Block.wrap([new If(this.guard, body)]);
          }
        }
      }
      if (this.pattern) {
        body.expressions.unshift(new Assign(this.name, new Literal("" + svar + "[" + kvar + "]")));
      }
      defPartFragments = [].concat(this.makeCode(defPart), this.pluckDirectCall(o, body));
      if (namePart) {
        varPart = "\n" + idt1 + namePart + ";";
      }
      if (this.object) {
        forPartFragments = [this.makeCode("" + kvar + " in " + svar)];
        if (this.own) {
          guardPart = "\n" + idt1 + "if (!" + (utility('hasProp')) + ".call(" + svar + ", " + kvar + ")) continue;";
        }
      }
      bodyFragments = body.compileToFragments(merge(o, {
        indent: idt1
      }), LEVEL_TOP);
      if (bodyFragments && (bodyFragments.length > 0)) {
        bodyFragments = [].concat(this.makeCode("\n"), bodyFragments, this.makeCode("\n"));
      }
      return [].concat(defPartFragments, this.makeCode("" + (resultPart || '') + this.tab + "for ("), forPartFragments, this.makeCode(") {" + guardPart + varPart), bodyFragments, this.makeCode("" + this.tab + "}" + (returnResult || '')));
    };

    For.prototype.pluckDirectCall = function(o, body) {
      var base, defs, expr, fn, idx, ref, val, _i, _len, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      defs = [];
      _ref4 = body.expressions;
      for (idx = _i = 0, _len = _ref4.length; _i < _len; idx = ++_i) {
        expr = _ref4[idx];
        expr = expr.unwrapAll();
        if (!(expr instanceof Call)) {
          continue;
        }
        val = expr.variable.unwrapAll();
        if (!((val instanceof Code) || (val instanceof Value && ((_ref5 = val.base) != null ? _ref5.unwrapAll() : void 0) instanceof Code && val.properties.length === 1 && ((_ref6 = (_ref7 = val.properties[0].name) != null ? _ref7.value : void 0) === 'call' || _ref6 === 'apply')))) {
          continue;
        }
        fn = ((_ref8 = val.base) != null ? _ref8.unwrapAll() : void 0) || val;
        ref = new Literal(o.scope.freeVariable('fn'));
        base = new Value(ref);
        if (val.base) {
          _ref9 = [base, val], val.base = _ref9[0], base = _ref9[1];
        }
        body.expressions[idx] = new Call(base, expr.args);
        defs = defs.concat(this.makeCode(this.tab), new Assign(ref, fn).compileToFragments(o, LEVEL_TOP), this.makeCode(';\n'));
      }
      return defs;
    };

    return For;

  })(While);

  exports.Switch = Switch = (function(_super) {
    __extends(Switch, _super);

    function Switch(subject, cases, otherwise) {
      this.subject = subject;
      this.cases = cases;
      this.otherwise = otherwise;
    }

    Switch.prototype.children = ['subject', 'cases', 'otherwise'];

    Switch.prototype.isStatement = YES;

    Switch.prototype.jumps = function(o) {
      var block, conds, _i, _len, _ref4, _ref5, _ref6;
      if (o == null) {
        o = {
          block: true
        };
      }
      _ref4 = this.cases;
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        _ref5 = _ref4[_i], conds = _ref5[0], block = _ref5[1];
        if (block.jumps(o)) {
          return block;
        }
      }
      return (_ref6 = this.otherwise) != null ? _ref6.jumps(o) : void 0;
    };

    Switch.prototype.makeReturn = function(res) {
      var pair, _i, _len, _ref4, _ref5;
      _ref4 = this.cases;
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        pair = _ref4[_i];
        pair[1].makeReturn(res);
      }
      if (res) {
        this.otherwise || (this.otherwise = new Block([new Literal('void 0')]));
      }
      if ((_ref5 = this.otherwise) != null) {
        _ref5.makeReturn(res);
      }
      return this;
    };

    Switch.prototype.compileNode = function(o) {
      var block, body, cond, conditions, expr, fragments, i, idt1, idt2, _i, _j, _len, _len1, _ref4, _ref5, _ref6;
      idt1 = o.indent + TAB;
      idt2 = o.indent = idt1 + TAB;
      fragments = [].concat(this.makeCode(this.tab + "switch ("), (this.subject ? this.subject.compileToFragments(o, LEVEL_PAREN) : this.makeCode("false")), this.makeCode(") {\n"));
      _ref4 = this.cases;
      for (i = _i = 0, _len = _ref4.length; _i < _len; i = ++_i) {
        _ref5 = _ref4[i], conditions = _ref5[0], block = _ref5[1];
        _ref6 = flatten([conditions]);
        for (_j = 0, _len1 = _ref6.length; _j < _len1; _j++) {
          cond = _ref6[_j];
          if (!this.subject) {
            cond = cond.invert();
          }
          fragments = fragments.concat(this.makeCode(idt1 + "case "), cond.compileToFragments(o, LEVEL_PAREN), this.makeCode(":\n"));
        }
        if ((body = block.compileToFragments(o, LEVEL_TOP)).length > 0) {
          fragments = fragments.concat(body, this.makeCode('\n'));
        }
        if (i === this.cases.length - 1 && !this.otherwise) {
          break;
        }
        expr = this.lastNonComment(block.expressions);
        if (expr instanceof Return || (expr instanceof Literal && expr.jumps() && expr.value !== 'debugger')) {
          continue;
        }
        fragments.push(cond.makeCode(idt2 + 'break;\n'));
      }
      if (this.otherwise && this.otherwise.expressions.length) {
        fragments.push.apply(fragments, [this.makeCode(idt1 + "default:\n")].concat(__slice.call(this.otherwise.compileToFragments(o, LEVEL_TOP)), [this.makeCode("\n")]));
      }
      fragments.push(this.makeCode(this.tab + '}'));
      return fragments;
    };

    return Switch;

  })(Base);

  exports.If = If = (function(_super) {
    __extends(If, _super);

    function If(condition, body, options) {
      this.body = body;
      if (options == null) {
        options = {};
      }
      this.condition = options.type === 'unless' ? condition.invert() : condition;
      this.elseBody = null;
      this.isChain = false;
      this.soak = options.soak;
    }

    If.prototype.children = ['condition', 'body', 'elseBody'];

    If.prototype.bodyNode = function() {
      var _ref4;
      return (_ref4 = this.body) != null ? _ref4.unwrap() : void 0;
    };

    If.prototype.elseBodyNode = function() {
      var _ref4;
      return (_ref4 = this.elseBody) != null ? _ref4.unwrap() : void 0;
    };

    If.prototype.addElse = function(elseBody) {
      if (this.isChain) {
        this.elseBodyNode().addElse(elseBody);
      } else {
        this.isChain = elseBody instanceof If;
        this.elseBody = this.ensureBlock(elseBody);
      }
      return this;
    };

    If.prototype.isStatement = function(o) {
      var _ref4;
      return (o != null ? o.level : void 0) === LEVEL_TOP || this.bodyNode().isStatement(o) || ((_ref4 = this.elseBodyNode()) != null ? _ref4.isStatement(o) : void 0);
    };

    If.prototype.jumps = function(o) {
      var _ref4;
      return this.body.jumps(o) || ((_ref4 = this.elseBody) != null ? _ref4.jumps(o) : void 0);
    };

    If.prototype.compileNode = function(o) {
      if (this.isStatement(o)) {
        return this.compileStatement(o);
      } else {
        return this.compileExpression(o);
      }
    };

    If.prototype.makeReturn = function(res) {
      if (res) {
        this.elseBody || (this.elseBody = new Block([new Literal('void 0')]));
      }
      this.body && (this.body = new Block([this.body.makeReturn(res)]));
      this.elseBody && (this.elseBody = new Block([this.elseBody.makeReturn(res)]));
      return this;
    };

    If.prototype.ensureBlock = function(node) {
      if (node instanceof Block) {
        return node;
      } else {
        return new Block([node]);
      }
    };

    If.prototype.compileStatement = function(o) {
      var answer, body, child, cond, exeq, ifPart, indent;
      child = del(o, 'chainChild');
      exeq = del(o, 'isExistentialEquals');
      if (exeq) {
        return new If(this.condition.invert(), this.elseBodyNode(), {
          type: 'if'
        }).compileToFragments(o);
      }
      indent = o.indent + TAB;
      cond = this.condition.compileToFragments(o, LEVEL_PAREN);
      body = this.ensureBlock(this.body).compileToFragments(merge(o, {
        indent: indent
      }));
      ifPart = [].concat(this.makeCode("if ("), cond, this.makeCode(") {\n"), body, this.makeCode("\n" + this.tab + "}"));
      if (!child) {
        ifPart.unshift(this.makeCode(this.tab));
      }
      if (!this.elseBody) {
        return ifPart;
      }
      answer = ifPart.concat(this.makeCode(' else '));
      if (this.isChain) {
        o.chainChild = true;
        answer = answer.concat(this.elseBody.unwrap().compileToFragments(o, LEVEL_TOP));
      } else {
        answer = answer.concat(this.makeCode("{\n"), this.elseBody.compileToFragments(merge(o, {
          indent: indent
        }), LEVEL_TOP), this.makeCode("\n" + this.tab + "}"));
      }
      return answer;
    };

    If.prototype.compileExpression = function(o) {
      var alt, body, cond, fragments;
      cond = this.condition.compileToFragments(o, LEVEL_COND);
      body = this.bodyNode().compileToFragments(o, LEVEL_LIST);
      alt = this.elseBodyNode() ? this.elseBodyNode().compileToFragments(o, LEVEL_LIST) : [this.makeCode('void 0')];
      fragments = cond.concat(this.makeCode(" ? "), body, this.makeCode(" : "), alt);
      if (o.level >= LEVEL_COND) {
        return this.wrapInBraces(fragments);
      } else {
        return fragments;
      }
    };

    If.prototype.unfoldSoak = function() {
      return this.soak && this;
    };

    return If;

  })(Base);

  Closure = {
    wrap: function(expressions, statement, noReturn) {
      var args, argumentsNode, call, func, meth;
      if (expressions.jumps()) {
        return expressions;
      }
      func = new Code([], Block.wrap([expressions]));
      args = [];
      argumentsNode = expressions.contains(this.isLiteralArguments);
      if (argumentsNode && expressions.classBody) {
        argumentsNode.error("Class bodies shouldn't reference arguments");
      }
      if (argumentsNode || expressions.contains(this.isLiteralThis)) {
        meth = new Literal(argumentsNode ? 'apply' : 'call');
        args = [new Literal('this')];
        if (argumentsNode) {
          args.push(new Literal('arguments'));
        }
        func = new Value(func, [new Access(meth)]);
      }
      func.noReturn = noReturn;
      call = new Call(func, args);
      if (statement) {
        return Block.wrap([call]);
      } else {
        return call;
      }
    },
    isLiteralArguments: function(node) {
      return node instanceof Literal && node.value === 'arguments' && !node.asKey;
    },
    isLiteralThis: function(node) {
      return (node instanceof Literal && node.value === 'this' && !node.asKey) || (node instanceof Code && node.bound) || (node instanceof Call && node.isSuper);
    }
  };

  unfoldSoak = function(o, parent, name) {
    var ifn;
    if (!(ifn = parent[name].unfoldSoak(o))) {
      return;
    }
    parent[name] = ifn.body;
    ifn.body = new Value(parent);
    return ifn;
  };

  UTILITIES = {
    "extends": function() {
      return "function(child, parent) { for (var key in parent) { if (" + (utility('hasProp')) + ".call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }";
    },
    bind: function() {
      return 'function(fn, me){ return function(){ return fn.apply(me, arguments); }; }';
    },
    indexOf: function() {
      return "[].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; }";
    },
    hasProp: function() {
      return '{}.hasOwnProperty';
    },
    slice: function() {
      return '[].slice';
    },
    operators: function() {
      return 'Object.prototype.operators = function(operator, object) { switch (operator) {case \'+\': return this + object;case \'-\': return this - object;case \'/\':return this / object;case \'*\':return this * object;case \'%\':return this % object;case \'^\':return this ^ object;default:throw SyntaxError(\'Object does not support \"\' + operator + \'\" operator\');}}';
    },
    codeWorker: function() {
      return '(function() {function CodeWorker() {}CodeWorker.dataURI = null;CodeWorker.name = null;CodeWorker.create = function() {var w,_this = this;w = new Worker(this.dataURI);w.onerror = function(event) {return console.error(\'Error in \"\' + _this.name + \'\" worker: \"\' + event.message + \'\"\\n\', event);};return w;};return CodeWorker;})()';
    }
  };

  LEVEL_TOP = 1;

  LEVEL_PAREN = 2;

  LEVEL_LIST = 3;

  LEVEL_COND = 4;

  LEVEL_OP = 5;

  LEVEL_ACCESS = 6;

  TAB = '  ';

  IDENTIFIER_STR = "[$A-Za-z_\\x7f-\\uffff][$\\w\\x7f-\\uffff]*";

  IDENTIFIER = RegExp("^" + IDENTIFIER_STR + "$");

  SHADER_PROPERTY = /^\$.*/;

  SIMPLENUM = /^[+-]?\d+$/;

  METHOD_DEF = RegExp("^(?:(" + IDENTIFIER_STR + ")\\.prototype(?:\\.(" + IDENTIFIER_STR + ")|\\[(\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"|'(?:[^\\\\'\\r\\n]|\\\\.)*')\\]|\\[(0x[\\da-fA-F]+|\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\]))|(" + IDENTIFIER_STR + ")$");

  CUSTOM_OPERATOR = /^(?:[+\-*%\/^]|[@^|]>)/;

  IS_STRING = /^['"]/;

  utility = function(name) {
    var ref;
    ref = "__" + name;
    Scope.root.assign(ref, UTILITIES[name]());
    return ref;
  };

  multident = function(code, tab) {
    code = code.replace(/\n/g, '$&' + tab);
    return code.replace(/\s+$/, '');
  };

}).call(this);
 if(module.exports){ var temp = module.exports; module.exports = void 0; return temp; }};module['./coffee-script'] = new function(){ var exports = this; // Generated by CoffeeScript 1.6.3
(function() {
  var Lexer, SourceMap, child_process, compile, ext, fork, formatSourcePosition, fs, helpers, lexer, loadFile, parser, patchStackTrace, patched, path, vm, _i, _len, _ref,
    __hasProp = {}.hasOwnProperty;

  fs = require('fs');

  vm = require('vm');

  path = require('path');

  child_process = require('child_process');

  Lexer = require('./lexer').Lexer;

  parser = require('./parser').parser;

  helpers = require('./helpers');

  SourceMap = require('./sourcemap');

  exports.VERSION = '1.6.2';

  exports.helpers = helpers;

  exports.compile = compile = function(code, options) {
    var answer, currentColumn, currentLine, debug, fragment, fragments, header, js, map, merge, newLines, _i, _len;
    if (options == null) {
      options = {};
    }
    merge = helpers.merge;
    if (options.sourceMap) {
      map = new SourceMap;
    }
    fragments = parser.parse(lexer.tokenize(code, options)).compileToFragments(options);
    currentLine = 0;
    if (options.header) {
      currentLine += 1;
    }
    if (options.shiftLine) {
      currentLine += 1;
    }
    currentColumn = 0;
    js = "";
    for (_i = 0, _len = fragments.length; _i < _len; _i++) {
      fragment = fragments[_i];
      if (options.sourceMap) {
        if (fragment.locationData) {
          map.add([fragment.locationData.first_line, fragment.locationData.first_column], [currentLine, currentColumn], {
            noReplace: true
          });
        }
        newLines = helpers.count(fragment.code, "\n");
        currentLine += newLines;
        currentColumn = fragment.code.length - (newLines ? fragment.code.lastIndexOf("\n") : 0);
      }
      js += fragment.code;
    }
    if (options.header) {
      header = "Generated by CoffeeScript " + this.VERSION;
      js = "// " + header + "\n" + js;
    }
    debug = typeof document !== "undefined" && document !== null ? document.getElementById("debug") : void 0;
    if (debug) {
      debug.innerHTML += "<pre class=\"code\">" + (js.replace(/\n/g, "<br/>")) + "</pre>";
    }
    if (options.sourceMap) {
      answer = {
        js: js
      };
      answer.sourceMap = map;
      answer.v3SourceMap = map.generate(options, code);
      return answer;
    } else {
      return js;
    }
  };

  exports.tokens = function(code, options) {
    return lexer.tokenize(code, options);
  };

  exports.nodes = function(source, options) {
    if (typeof source === 'string') {
      return parser.parse(lexer.tokenize(source, options));
    } else {
      return parser.parse(source);
    }
  };

  exports.run = function(code, options) {
    var answer, mainModule;
    if (options == null) {
      options = {};
    }
    mainModule = require.main;
    if (options.sourceMap == null) {
      options.sourceMap = true;
    }
    mainModule.filename = process.argv[1] = options.filename ? fs.realpathSync(options.filename) : '.';
    mainModule.moduleCache && (mainModule.moduleCache = {});
    mainModule.paths = require('module')._nodeModulePaths(path.dirname(fs.realpathSync(options.filename || '.')));
    if (!helpers.isCoffee(mainModule.filename) || require.extensions) {
      answer = compile(code, options);
      patchStackTrace();
      mainModule._sourceMaps[mainModule.filename] = answer.sourceMap;
      return mainModule._compile(answer.js, mainModule.filename);
    } else {
      return mainModule._compile(code, mainModule.filename);
    }
  };

  exports["eval"] = function(code, options) {
    var Module, Script, js, k, o, r, sandbox, v, _i, _len, _module, _ref, _ref1, _require;
    if (options == null) {
      options = {};
    }
    if (!(code = code.trim())) {
      return;
    }
    Script = vm.Script;
    if (Script) {
      if (options.sandbox != null) {
        if (options.sandbox instanceof Script.createContext().constructor) {
          sandbox = options.sandbox;
        } else {
          sandbox = Script.createContext();
          _ref = options.sandbox;
          for (k in _ref) {
            if (!__hasProp.call(_ref, k)) continue;
            v = _ref[k];
            sandbox[k] = v;
          }
        }
        sandbox.global = sandbox.root = sandbox.GLOBAL = sandbox;
      } else {
        sandbox = global;
      }
      sandbox.__filename = options.filename || 'eval';
      sandbox.__dirname = path.dirname(sandbox.__filename);
      if (!(sandbox !== global || sandbox.module || sandbox.require)) {
        Module = require('module');
        sandbox.module = _module = new Module(options.modulename || 'eval');
        sandbox.require = _require = function(path) {
          return Module._load(path, _module, true);
        };
        _module.filename = sandbox.__filename;
        _ref1 = Object.getOwnPropertyNames(require);
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          r = _ref1[_i];
          if (r !== 'paths') {
            _require[r] = require[r];
          }
        }
        _require.paths = _module.paths = Module._nodeModulePaths(process.cwd());
        _require.resolve = function(request) {
          return Module._resolveFilename(request, _module);
        };
      }
    }
    o = {};
    for (k in options) {
      if (!__hasProp.call(options, k)) continue;
      v = options[k];
      o[k] = v;
    }
    o.bare = true;
    js = compile(code, o);
    if (sandbox === global) {
      return vm.runInThisContext(js);
    } else {
      return vm.runInContext(js, sandbox);
    }
  };

  loadFile = function(module, filename) {
    var raw, stripped;
    raw = fs.readFileSync(filename, 'utf8');
    stripped = raw.charCodeAt(0) === 0xFEFF ? raw.substring(1) : raw;
    return module._compile(compile(stripped, {
      filename: filename,
      literate: helpers.isLiterate(filename)
    }), filename);
  };

  if (require.extensions) {
    _ref = ['.coffee', '.litcoffee', '.coffee.md'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ext = _ref[_i];
      require.extensions[ext] = loadFile;
    }
  }

  if (child_process) {
    fork = child_process.fork;
    child_process.fork = function(path, args, options) {
      var execPath;
      if (args == null) {
        args = [];
      }
      if (options == null) {
        options = {};
      }
      execPath = helpers.isCoffee(path) ? 'coffee' : null;
      if (!Array.isArray(args)) {
        args = [];
        options = args || {};
      }
      options.execPath || (options.execPath = execPath);
      return fork(path, args, options);
    };
  }

  lexer = new Lexer;

  parser.lexer = {
    lex: function() {
      var tag, token;
      token = this.tokens[this.pos++];
      if (token) {
        tag = token[0], this.yytext = token[1], this.yylloc = token[2];
        this.yylineno = this.yylloc.first_line;
      } else {
        tag = '';
      }
      return tag;
    },
    setInput: function(tokens) {
      this.tokens = tokens;
      return this.pos = 0;
    },
    upcomingInput: function() {
      return "";
    }
  };

  parser.yy = require('./nodes');

  parser.yy.parseError = function(message, _arg) {
    var token;
    token = _arg.token;
    message = "unexpected " + (token === 1 ? 'end of input' : token);
    return helpers.throwSyntaxError(message, parser.lexer.yylloc);
  };

  patched = false;

  patchStackTrace = function() {
    var mainModule;
    if (patched) {
      return;
    }
    patched = true;
    mainModule = require.main;
    mainModule._sourceMaps = {};
    return Error.prepareStackTrace = function(err, stack) {
      var frame, frames, getSourceMapping, sourceFiles, _ref1;
      sourceFiles = {};
      getSourceMapping = function(filename, line, column) {
        var answer, sourceMap;
        sourceMap = mainModule._sourceMaps[filename];
        if (sourceMap) {
          answer = sourceMap.sourceLocation([line - 1, column - 1]);
        }
        if (answer) {
          return [answer[0] + 1, answer[1] + 1];
        } else {
          return null;
        }
      };
      frames = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = stack.length; _j < _len1; _j++) {
          frame = stack[_j];
          if (frame.getFunction() === exports.run) {
            break;
          }
          _results.push("  at " + (formatSourcePosition(frame, getSourceMapping)));
        }
        return _results;
      })();
      return "" + err.name + ": " + ((_ref1 = err.message) != null ? _ref1 : '') + "\n" + (frames.join('\n')) + "\n";
    };
  };

  formatSourcePosition = function(frame, getSourceMapping) {
    var as, column, fileLocation, fileName, functionName, isConstructor, isMethodCall, line, methodName, source, tp, typeName;
    fileName = void 0;
    fileLocation = '';
    if (frame.isNative()) {
      fileLocation = "native";
    } else {
      if (frame.isEval()) {
        fileName = frame.getScriptNameOrSourceURL();
        if (!fileName) {
          fileLocation = "" + (frame.getEvalOrigin()) + ", ";
        }
      } else {
        fileName = frame.getFileName();
      }
      fileName || (fileName = "<anonymous>");
      line = frame.getLineNumber();
      column = frame.getColumnNumber();
      source = getSourceMapping(fileName, line, column);
      fileLocation = source ? "" + fileName + ":" + source[0] + ":" + source[1] + ", <js>:" + line + ":" + column : "" + fileName + ":" + line + ":" + column;
    }
    functionName = frame.getFunctionName();
    isConstructor = frame.isConstructor();
    isMethodCall = !(frame.isToplevel() || isConstructor);
    if (isMethodCall) {
      methodName = frame.getMethodName();
      typeName = frame.getTypeName();
      if (functionName) {
        tp = as = '';
        if (typeName && functionName.indexOf(typeName)) {
          tp = "" + typeName + ".";
        }
        if (methodName && functionName.indexOf("." + methodName) !== functionName.length - methodName.length - 1) {
          as = " [as " + methodName + "]";
        }
        return "" + tp + functionName + as + " (" + fileLocation + ")";
      } else {
        return "" + typeName + "." + (methodName || '<anonymous>') + " (" + fileLocation + ")";
      }
    } else if (isConstructor) {
      return "new " + (functionName || '<anonymous>') + " (" + fileLocation + ")";
    } else if (functionName) {
      return "" + functionName + " (" + fileLocation + ")";
    } else {
      return fileLocation;
    }
  };

}).call(this);
 if(module.exports){ var temp = module.exports; module.exports = void 0; return temp; }};module['./browser'] = new function(){ var exports = this; // Generated by CoffeeScript 1.6.3
(function() {
  var CoffeeScript, compile, getErrorLine, getErrorObject, runScripts,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CoffeeScript = require('./coffee-script');

  CoffeeScript.require = require;

  compile = CoffeeScript.compile;

  CoffeeScript["eval"] = function(code, options) {
    if (options == null) {
      options = {};
    }
    if (options.bare == null) {
      options.bare = true;
    }
    return eval(compile(code, options));
  };

  getErrorObject = function() {
    var err;
    try {
      throw Error('');
    } catch (_error) {
      err = _error;
      return err;
    }
  };

  getErrorLine = function(err) {
    return err.lineNumber;
  };

  CoffeeScript.run = function(code, options) {
    var currentLine, delimiter, e, error, line, tokens;
    if (options == null) {
      options = {};
    }
    options.bare = true;
    options.shiftLine = true;
    try {
      return Function(compile(code, options))();
    } catch (_error) {
      error = _error;
      if (error.location === void 0) {
        currentLine = getErrorLine(new Error());
        error.location = {
          first_line: error.lineNumber - (currentLine - 4),
          first_column: 0
        };
      }
      if (error.location) {
        e = new Error();
        delimiter = "\n";
        tokens = code.split(delimiter).slice(error.location.first_line);
        if (tokens.length) {
          line = tokens[0].replace(/(\n|\r)/g, "");
          e.message = "" + error.message + ": \"" + line + "\"\n" + options.scriptFile + " in line " + error.location.first_line + ", at " + error.location.first_column;
        } else {
          e.message = "" + error.message + "\n" + options.scriptFile + " in line " + error.location.first_line + ", at " + error.location.first_column;
        }
        throw e;
      }
      throw error;
    }
  };

  if (typeof window === "undefined" || window === null) {
    return;
  }

  if ((typeof btoa !== "undefined" && btoa !== null) && (typeof JSON !== "undefined" && JSON !== null) && (typeof unescape !== "undefined" && unescape !== null) && (typeof encodeURIComponent !== "undefined" && encodeURIComponent !== null)) {
    compile = function(code, options) {
      var js, v3SourceMap, _ref;
      if (options == null) {
        options = {};
      }
      options.sourceMap = true;
      options.inline = true;
      _ref = CoffeeScript.compile(code, options), js = _ref.js, v3SourceMap = _ref.v3SourceMap;
      return "" + js + "\n//@ sourceMappingURL=data:application/json;base64," + (btoa(unescape(encodeURIComponent(v3SourceMap)))) + "\n//@ sourceURL=coffeescript";
    };
  }

  CoffeeScript.load = function(url, callback, options) {
    var xhr;
    if (options == null) {
      options = {};
    }
    options.sourceFiles = [url];
    xhr = window.ActiveXObject ? new window.ActiveXObject('Microsoft.XMLHTTP') : new window.XMLHttpRequest();
    xhr.open('GET', url, true);
    if ('overrideMimeType' in xhr) {
      xhr.overrideMimeType('text/plain');
    }
    xhr.onreadystatechange = function() {
      var _ref;
      if (xhr.readyState === 4) {
        if ((_ref = xhr.status) === 0 || _ref === 200) {
          CoffeeScript.run(xhr.responseText, options);
        } else {
          throw new Error("Could not load " + url);
        }
        if (callback) {
          return callback();
        }
      }
    };
    return xhr.send(null);
  };

  runScripts = function() {
    var coffees, coffeetypes, execute, index, length, s, scripts, start;
    scripts = window.document.getElementsByTagName('script');
    coffeetypes = ['text/enliven', 'text/coffeescript', 'text/literate-coffeescript'];
    coffees = (function() {
      var _i, _len, _ref, _results;
      _results = [];
      for (_i = 0, _len = scripts.length; _i < _len; _i++) {
        s = scripts[_i];
        if (_ref = s.type, __indexOf.call(coffeetypes, _ref) >= 0) {
          _results.push(s);
        }
      }
      return _results;
    })();
    index = 0;
    length = coffees.length;
    start = Date.now();
    (execute = function() {
      var end, event, loaded, mediatype, options, script;
      script = coffees[index++];
      mediatype = script != null ? script.type : void 0;
      loaded = false;
      if (__indexOf.call(coffeetypes, mediatype) >= 0) {
        loaded = true;
        options = {
          literate: mediatype === 'text/literate-coffeescript'
        };
        if (script.src) {
          options.scriptFile = script.src;
          CoffeeScript.load(script.src, execute, options);
        } else {
          options.scriptFile = 'embedded';
          options.sourceFiles = ['embedded'];
          CoffeeScript.run(script.innerHTML, options);
          execute();
        }
      }
      if (!loaded) {
        event = new CustomEvent('compiled');
        this.dispatchEvent(event);
        end = Date.now() - start;
        if (window.ENLIVEN_DETAILS) {
          return console.log("Comiling: " + end + " ms");
        }
      }
    })();
    return null;
  };

  if (window.addEventListener) {
    window.addEventListener('DOMContentLoaded', runScripts, false);
  } else {
    window.attachEvent('onload', runScripts);
  }

}).call(this);
 if(module.exports){ var temp = module.exports; module.exports = void 0; return temp; }};})(window)